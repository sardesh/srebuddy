chunks:
- '# SRE Standards Documentation'
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # [START cloudbuild_microservice_demo_cloudbuild]
  # This configuration file is used to build and deploy the app into a # GKE cluster
  using Google Cloud Build. # # PREREQUISITES: # - Cloud Build service account must
  have role: "Kubernetes Engine Developer" # USAGE: # GCP zone and GKE target cluster
  must be specified as substitutions # Example invocation: # `gcloud builds submit
  --config=cloudbuild.yaml --substitutions=_ZONE=us-central1-b,_CLUSTER=demo-app-staging
  .` steps: - id: ''Deploy application to cluster'' name: ''gcr.io/k8s-skaffold/skaffold:v2.14.1''
  entrypoint: ''bash'' args: - ''-c'' - > gcloud container clusters get-credentials
  --zone=$_ZONE $_CLUSTER; skaffold run -f=skaffold.yaml --default-repo=gcr.io/$PROJECT_ID;
  # Add more power, and more time, for heavy Skaffold build timeout: ''3600s'' options:
  machineType: ''N1_HIGHCPU_8'' # [END cloudbuild_microservice_demo_cloudbuild]'
- "<!-- <p align=\"center\"> <img src=\"/src/frontend/static/icons/Hipster_HeroLogoMaroon.svg\"\
  \ width=\"300\" alt=\"Online Boutique\" /> </p> --> ![Continuous Integration](https://github.com/GoogleCloudPlatform/microservices-demo/workflows/Continuous%20Integration%20-%20Main/Release/badge.svg)\
  \ **Online Boutique** is a cloud-first microservices demo application. The application\
  \ is a web-based e-commerce app where users can browse items, add them to the cart,\
  \ and purchase them. Google uses this application to demonstrate how developers\
  \ can modernize enterprise applications using Google Cloud products, including:\
  \ [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine),\
  \ [Cloud Service Mesh (CSM)](https://cloud.google.com/service-mesh), [gRPC](https://grpc.io/),\
  \ [Cloud Operations](https://cloud.google.com/products/operations), [Spanner](https://cloud.google.com/spanner),\
  \ [Memorystore](https://cloud.google.com/memorystore), [AlloyDB](https://cloud.google.com/alloydb),\
  \ and [Gemini](https://ai.google.dev/). This application works on any Kubernetes\
  \ cluster. If you\u2019re using this demo, please **\u2605Star** this repository\
  \ to show your interest! **Note to Googlers:** Please fill out the form at [go/microservices-demo](http://go/microservices-demo).\
  \ ## Architecture **Online Boutique** is composed of 11 microservices written in\
  \ different languages that talk to each other over gRPC. [![Architecture of microservices](/docs/img/architecture-diagram.png)](/docs/img/architecture-diagram.png)\
  \ Find **Protocol Buffers Descriptions** at the [`./protos` directory](/protos).\
  \ | Service | Language | Description | | ----------------------------------------------------\
  \ | ------------- | ---------------------------------------------------------------------------------------------------------------------------------\
  \ | | [frontend](/src/frontend) | Go | Exposes an HTTP server to serve the website.\
  \ Does not require signup/login and generates session IDs for all users automatically.\
  \ | | [cartservice](/src/cartservice) | C# | Stores the items in the user's shopping\
  \ cart in Redis and retrieves it. | | [productcatalogservice](/src/productcatalogservice)\
  \ | Go | Provides the list of products from a JSON file and ability to search products\
  \ and get individual products. | | [currencyservice](/src/currencyservice) | Node.js\
  \ | Converts one money amount to another currency. Uses real values fetched from\
  \ European Central Bank. It's the highest QPS service. | | [paymentservice](/src/paymentservice)\
  \ | Node.js | Charges the given credit card info (mock) with the given amount and\
  \ returns a transaction ID. | | [shippingservice](/src/shippingservice) | Go | Gives\
  \ shipping cost estimates based on the shopping cart. Ships items to the given address\
  \ (mock) | | [emailservice](/src/emailservice) | Python | Sends users an order confirmation\
  \ email (mock). | | [checkoutservice](/src/checkoutservice) | Go | Retrieves user\
  \ cart, prepares order and orchestrates the payment, shipping and the email notification.\
  \ | | [recommendationservice](/src/recommendationservice) | Python | Recommends\
  \ other products based on what's given in the cart. | | [adservice](/src/adservice)\
  \ | Java | Provides text ads based on given context words. | | [loadgenerator](/src/loadgenerator)\
  \ | Python/Locust | Continuously sends requests imitating realistic user shopping\
  \ flows to the frontend. | ## Screenshots | Home Page | Checkout Screen | | -----------------------------------------------------------------------------------------------------------------\
  \ | ------------------------------------------------------------------------------------------------------------------\
  \ | | [![Screenshot of store homepage](/docs/img/online-boutique-frontend-1.png)](/docs/img/online-boutique-frontend-1.png)\
  \ | [![Screenshot of checkout screen](/docs/img/online-boutique-frontend-2.png)](/docs/img/online-boutique-frontend-2.png)\
  \ | ## Quickstart (GKE) 1. Ensure you have the following requirements: - [Google\
  \ Cloud project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\
  \ - Shell environment with `gcloud`, `git`, and `kubectl`. 2. Clone the latest major\
  \ version. ```sh git clone --depth 1 --branch v0 https://github.com/GoogleCloudPlatform/microservices-demo.git\
  \ cd microservices-demo/ ``` The `--depth 1` argument skips downloading git history.\
  \ 3. Set the Google Cloud project and region and ensure the Google Kubernetes Engine\
  \ API is enabled. ```sh export PROJECT_ID=<PROJECT_ID> export REGION=us-central1\
  \ gcloud services enable container.googleapis.com \\ --project=${PROJECT_ID} ```\
  \ Substitute `<PROJECT_ID>` with the ID of your Google Cloud project. 4. Create\
  \ a GKE cluster and get the credentials for it. ```sh gcloud container clusters\
  \ create-auto online-boutique \\ --project=${PROJECT_ID} --region=${REGION} ```\
  \ Creating the cluster may take a few minutes. 5. Deploy Online Boutique"
- 'and ensure the Google Kubernetes Engine API is enabled. ```sh export PROJECT_ID=<PROJECT_ID>
  export REGION=us-central1 gcloud services enable container.googleapis.com \ --project=${PROJECT_ID}
  ``` Substitute `<PROJECT_ID>` with the ID of your Google Cloud project. 4. Create
  a GKE cluster and get the credentials for it. ```sh gcloud container clusters create-auto
  online-boutique \ --project=${PROJECT_ID} --region=${REGION} ``` Creating the cluster
  may take a few minutes. 5. Deploy Online Boutique to the cluster. ```sh kubectl
  apply -f ./release/kubernetes-manifests.yaml ``` 6. Wait for the pods to be ready.
  ```sh kubectl get pods ``` After a few minutes, you should see the Pods in a `Running`
  state: ``` NAME READY STATUS RESTARTS AGE adservice-76bdd69666-ckc5j 1/1 Running
  0 2m58s cartservice-66d497c6b7-dp5jr 1/1 Running 0 2m59s checkoutservice-666c784bd6-4jd22
  1/1 Running 0 3m1s currencyservice-5d5d496984-4jmd7 1/1 Running 0 2m59s emailservice-667457d9d6-75jcq
  1/1 Running 0 3m2s frontend-6b8d69b9fb-wjqdg 1/1 Running 0 3m1s loadgenerator-665b5cd444-gwqdq
  1/1 Running 0 3m paymentservice-68596d6dd6-bf6bv 1/1 Running 0 3m productcatalogservice-557d474574-888kr
  1/1 Running 0 3m recommendationservice-69c56b74d4-7z8r5 1/1 Running 0 3m1s redis-cart-5f59546cdd-5jnqf
  1/1 Running 0 2m58s shippingservice-6ccc89f8fd-v686r 1/1 Running 0 2m58s ``` 7.
  Access the web frontend in a browser using the frontend''s external IP. ```sh kubectl
  get service frontend-external | awk ''{print $4}'' ``` Visit `http://EXTERNAL_IP`
  in a web browser to access your instance of Online Boutique. 8. Congrats! You''ve
  deployed the default Online Boutique. To deploy a different variation of Online
  Boutique (e.g., with Google Cloud Operations tracing, Istio, etc.), see [Deploy
  Online Boutique variations with Kustomize](#deploy-online-boutique-variations-with-kustomize).
  9. Once you are done with it, delete the GKE cluster. ```sh gcloud container clusters
  delete online-boutique \ --project=${PROJECT_ID} --region=${REGION} ``` Deleting
  the cluster may take a few minutes. ## Additional deployment options - **Terraform**:
  [See these instructions](/terraform) to learn how to deploy Online Boutique using
  [Terraform](https://www.terraform.io/intro). - **Istio / Cloud Service Mesh**: [See
  these instructions](/kustomize/components/service-mesh-istio/README.md) to deploy
  Online Boutique alongside an Istio-backed service mesh. - **Non-GKE clusters (Minikube,
  Kind, etc)**: See the [Development guide](/docs/development-guide.md) to learn how
  you can deploy Online Boutique on non-GKE clusters. - **AI assistant using Gemini**:
  [See these instructions](/kustomize/components/shopping-assistant/README.md) to
  deploy a Gemini-powered AI assistant that suggests products to purchase based on
  an image. - **And more**: The [`/kustomize` directory](/kustomize) contains instructions
  for customizing the deployment of Online Boutique with other variations. ## Documentation
  - [Development](/docs/development-guide.md) to learn how to run and develop this
  app locally. ## Demos featuring Online Boutique - [Platform Engineering in action:
  Deploy the Online Boutique sample apps with Score and Humanitec](https://medium.com/p/d99101001e69)
  - [The new Kubernetes Gateway API with Istio and Anthos Service Mesh (ASM)](https://medium.com/p/9d64c7009cd)
  - [Use Azure Redis Cache with the Online Boutique sample on AKS](https://medium.com/p/981bd98b53f8)
  - [Sail Sharp, 8 tips to optimize and secure your .NET containers for Kubernetes](https://medium.com/p/c68ba253844a)
  - [Deploy multi-region application with Anthos and Google cloud Spanner](https://medium.com/google-cloud/a2ea3493ed0)
  - [Use Google Cloud Memorystore (Redis) with the Online Boutique sample on GKE](https://medium.com/p/82f7879a900d)
  - [Use Helm to simplify the deployment of Online Boutique, with a Service Mesh,
  GitOps, and more!](https://medium.com/p/246119e46d53) - [How to reduce microservices
  complexity with Apigee and Anthos Service Mesh](https://cloud.google.com/blog/products/application-modernization/api-management-and-service-mesh-go-together)
  - [gRPC health probes with Kubernetes 1.24+](https://medium.com/p/b5bd26253a4c)
  - [Use Google Cloud Spanner with the Online Boutique sample](https://medium.com/p/f7248e077339)
  - [Seamlessly encrypt traffic from any apps in your Mesh'
- "(Redis) with the Online Boutique sample on GKE](https://medium.com/p/82f7879a900d)\
  \ - [Use Helm to simplify the deployment of Online Boutique, with a Service Mesh,\
  \ GitOps, and more!](https://medium.com/p/246119e46d53) - [How to reduce microservices\
  \ complexity with Apigee and Anthos Service Mesh](https://cloud.google.com/blog/products/application-modernization/api-management-and-service-mesh-go-together)\
  \ - [gRPC health probes with Kubernetes 1.24+](https://medium.com/p/b5bd26253a4c)\
  \ - [Use Google Cloud Spanner with the Online Boutique sample](https://medium.com/p/f7248e077339)\
  \ - [Seamlessly encrypt traffic from any apps in your Mesh to Memorystore (redis)](https://medium.com/google-cloud/64b71969318d)\
  \ - [Strengthen your app's security with Cloud Service Mesh and Anthos Config Management](https://cloud.google.com/service-mesh/docs/strengthen-app-security)\
  \ - [From edge to mesh: Exposing service mesh applications through GKE Ingress](https://cloud.google.com/architecture/exposing-service-mesh-apps-through-gke-ingress)\
  \ - [Take the first step toward SRE with Cloud Operations Sandbox](https://cloud.google.com/blog/products/operations/on-the-road-to-sre-with-cloud-operations-sandbox)\
  \ - [Deploying the Online Boutique sample application on Cloud Service Mesh](https://cloud.google.com/service-mesh/docs/onlineboutique-install-kpt)\
  \ - [Anthos Service Mesh Workshop: Lab Guide](https://codelabs.developers.google.com/codelabs/anthos-service-mesh-workshop)\
  \ - [KubeCon EU 2019 - Reinventing Networking: A Deep Dive into Istio's Multicluster\
  \ Gateways - Steve Dake, Independent](https://youtu.be/-t2BfT59zJA?t=982) - Google\
  \ Cloud Next'18 SF - [Day 1 Keynote](https://youtu.be/vJ9OaAqfxo4?t=2416) showing\
  \ GKE On-Prem - [Day 3 Keynote](https://youtu.be/JQPOPV_VH5w?t=815) showing Stackdriver\
  \ APM (Tracing, Code Search, Profiler, Google Cloud Build) - [Introduction to Service\
  \ Management with Istio](https://www.youtube.com/watch?v=wCJrdKdD6UM&feature=youtu.be&t=586)\
  \ - [Google Cloud Next'18 London \u2013 Keynote](https://youtu.be/nIq2pkNcfEI?t=3071)\
  \ showing Stackdriver Incident Response Management"
- '# Copyright 2021 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: skaffold/v3
  kind: Config metadata: name: app build: platforms: ["linux/amd64", "linux/arm64"]
  artifacts: # image tags are relative; to specify an image repo (e.g. GCR), you #
  must provide a "default repo" using one of the methods described # here: # https://skaffold.dev/docs/concepts/#image-repository-handling
  - image: emailservice context: src/emailservice - image: productcatalogservice context:
  src/productcatalogservice - image: recommendationservice context: src/recommendationservice
  - image: shoppingassistantservice context: src/shoppingassistantservice - image:
  shippingservice context: src/shippingservice - image: checkoutservice context: src/checkoutservice
  - image: paymentservice context: src/paymentservice - image: currencyservice context:
  src/currencyservice - image: cartservice context: src/cartservice/src docker: dockerfile:
  Dockerfile - image: frontend context: src/frontend - image: adservice context: src/adservice
  tagPolicy: gitCommit: {} local: useDockerCLI: true useBuildkit: true manifests:
  kustomize: paths: - kubernetes-manifests deploy: kubectl: {} # "gcb" profile allows
  building and pushing the images # on Google Container Builder without requiring
  docker # installed on the developer machine. However, note that # since GCB does
  not cache the builds, each build will # start from scratch and therefore take a
  long time. # # This is not used by default. To use it, run: # skaffold run -p gcb
  profiles: - name: gcb build: googleCloudBuild: diskSizeGb: 300 machineType: N1_HIGHCPU_32
  timeout: 4000s # "debug" profile replaces the default Dockerfile in cartservice
  with Dockerfile.debug, # which enables debugging via skaffold. # # This profile
  is used by default when running skaffold debug. - name: debug activation: - command:
  debug patches: - op: replace path: /build/artifacts/7/docker/dockerfile value: Dockerfile.debug
  # The "network-policies" profile is not used by default. # You can use it in isolation
  or in combination with other profiles: # skaffold run -p network-policies, debug
  - name: network-policies patches: - op: add path: /manifests/kustomize/paths/1 value:
  kustomize/components/network-policies --- apiVersion: skaffold/v3 kind: Config metadata:
  name: loadgenerator requires: - configs: - app build: artifacts: - image: loadgenerator
  context: src/loadgenerator manifests: rawYaml: - ./kubernetes-manifests/loadgenerator.yaml
  deploy: kubectl: {} profiles: - name: gcb build: googleCloudBuild: diskSizeGb: 300
  machineType: N1_HIGHCPU_32 timeout: 4000s'
- '<!-- Copyright 2022 Google LLC Licensed under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance with the License. You
  may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless
  required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
  ANY KIND, either express or implied. See the License for the specific language governing
  permissions and limitations under the License. --> # Use Terraform to deploy Online
  Boutique on a GKE cluster This page walks you through the steps required to deploy
  the [Online Boutique](https://github.com/GoogleCloudPlatform/microservices-demo)
  sample application on a [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine)
  cluster using Terraform. ## Prerequisites 1. [Create a new project or use an existing
  project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#console)
  on Google Cloud, and ensure [billing is enabled](https://cloud.google.com/billing/docs/how-to/verify-billing-enabled)
  on the project. ## Deploy the sample application 1. Clone the Github repository.
  ```bash git clone https://github.com/GoogleCloudPlatform/microservices-demo.git
  ``` 1. Move into the `terraform/` directory which contains the Terraform installation
  scripts. ```bash cd microservices-demo/terraform ``` 1. Open the `terraform.tfvars`
  file and replace `<project_id_here>` with the [GCP Project ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=en#identifying_projects)
  for the `gcp_project_id` variable. 1. (Optional) If you want to provision a [Google
  Cloud Memorystore (Redis)](https://cloud.google.com/memorystore) instance, you can
  change the value of `memorystore = false` to `memorystore = true` in this `terraform.tfvars`
  file. 1. Initialize Terraform. ```bash terraform init ``` 1. See what resources
  will be created. ```bash terraform plan ``` 1. Create the resources and deploy the
  sample. ```bash terraform apply ``` 1. If there is a confirmation prompt, type `yes`
  and hit Enter/Return. Note: This step can take about 10 minutes. Do not interrupt
  the process. Once the Terraform script has finished, you can locate the frontend''s
  external IP address to access the sample application. - Option 1: ```bash kubectl
  get service frontend-external | awk ''{print $4}'' ``` - Option 2: On Google Cloud
  Console, navigate to "Kubernetes Engine" and then "Services & Ingress" to locate
  the Endpoint associated with "frontend-external". ## Clean up To avoid incurring
  charges to your Google Cloud account for the resources used in this sample application,
  either delete the project that contains the resources, or keep the project and delete
  the individual resources. To remove the individual resources created for by Terraform
  without deleting the project: 1. Navigate to the `terraform/` directory. 1. Set
  `deletion_protection` to `false` for the `google_container_cluster` resource (GKE
  cluster). ```bash # Uncomment the line: "deletion_protection = false" sed -i "s/#
  deletion_protection/deletion_protection/g" main.tf # Re-apply the Terraform to update
  the state terraform apply ``` 1. Run the following command: ```bash terraform destroy
  ``` 1. If there is a confirmation prompt, type `yes` and hit Enter/Return.'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.istio.io/v1alpha3
  kind: Gateway metadata: name: frontend-gateway spec: selector: istio: ingressgateway
  # use Istio default gateway implementation servers: - port: number: 80 name: http
  protocol: HTTP hosts: - "*" --- apiVersion: networking.istio.io/v1alpha3 kind: VirtualService
  metadata: name: frontend-ingress spec: hosts: - "*" gateways: - frontend-gateway
  http: - route: - destination: host: frontend port: number: 80'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry metadata: name: allow-egress-googleapis spec: hosts: - "accounts.google.com"
  # Used to get token - "*.googleapis.com" ports: - number: 80 protocol: HTTP name:
  http - number: 443 protocol: HTTPS name: https --- apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry metadata: name: allow-egress-google-metadata spec: hosts: - metadata.google.internal
  addresses: - 169.254.169.254 # GCE metadata server ports: - number: 80 name: http
  protocol: HTTP - number: 443 name: https protocol: HTTPS'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService metadata: name: frontend spec: hosts: - "frontend.default.svc.cluster.local"
  http: - route: - destination: host: frontend port: number: 80'
- '# Copyright 2021 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # DEPLOYSTACK - this
  file is the cloudbuild for running testing automatically # in the testing rig steps:
  - name: ''bash'' id: "creds" args: [''-c'',''echo $$CREDS > .deploystack/creds.json'']
  secretEnv: [''CREDS''] - name: ''gcr.io/cloudshell-images/cloudshell:latest'' entrypoint:
  bash args: [ ''.deploystack/test'' ] secretEnv: [''BA''] timeout: 4200s options:
  machineType: ''E2_HIGHCPU_8'' availableSecrets: secretManager: - versionName: projects/$PROJECT_ID/secrets/creds/versions/latest
  env: ''CREDS'' - versionName: projects/$PROJECT_ID/secrets/billing_account/versions/latest
  env: ''BA'''
- '# The fields inside this deploystack.yaml file are documented in https://github.com/GoogleCloudPlatform/deploystack.
  title: Microservices Demo (Online Boutique) name: microservices-demo duration: 5
  collect_project: true collect_region: true region_type: compute region_default:
  us-central1 hard_settings: filepath_manifest: ../kustomize/ memorystore: "false"
  name: online-boutique namespace: default documentation_link: https://cloud.google.com/shell/docs/cloud-shell-tutorials/deploystack/microservices-demo'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: emailservice labels: app: emailservice spec: selector:
  matchLabels: app: emailservice template: metadata: labels: app: emailservice spec:
  serviceAccountName: emailservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: emailservice ports:
  - containerPort: 8080 env: - name: PORT value: "8080" - name: DISABLE_PROFILER value:
  "1" readinessProbe: periodSeconds: 5 grpc: port: 8080 livenessProbe: periodSeconds:
  5 grpc: port: 8080 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m
  memory: 128Mi --- apiVersion: v1 kind: Service metadata: name: emailservice labels:
  app: emailservice spec: type: ClusterIP selector: app: emailservice ports: - name:
  grpc port: 5000 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: emailservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: checkoutservice labels: app: checkoutservice spec: selector:
  matchLabels: app: checkoutservice template: metadata: labels: app: checkoutservice
  spec: serviceAccountName: checkoutservice securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: checkoutservice ports: - containerPort: 5050 readinessProbe: grpc: port:
  5050 livenessProbe: grpc: port: 5050 env: - name: PORT value: "5050" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "productcatalogservice:3550" - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051"
  - name: PAYMENT_SERVICE_ADDR value: "paymentservice:50051" - name: EMAIL_SERVICE_ADDR
  value: "emailservice:5000" - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000"
  - name: CART_SERVICE_ADDR value: "cartservice:7070" resources: requests: cpu: 100m
  memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion: v1 kind: Service metadata:
  name: checkoutservice labels: app: checkoutservice spec: type: ClusterIP selector:
  app: checkoutservice ports: - name: grpc port: 5050 targetPort: 5050 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: checkoutservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: recommendationservice labels: app: recommendationservice
  spec: selector: matchLabels: app: recommendationservice template: metadata: labels:
  app: recommendationservice spec: serviceAccountName: recommendationservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  recommendationservice ports: - containerPort: 8080 readinessProbe: periodSeconds:
  5 grpc: port: 8080 livenessProbe: periodSeconds: 5 grpc: port: 8080 env: - name:
  PORT value: "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "productcatalogservice:3550"
  - name: DISABLE_PROFILER value: "1" resources: requests: cpu: 100m memory: 220Mi
  limits: cpu: 200m memory: 450Mi --- apiVersion: v1 kind: Service metadata: name:
  recommendationservice labels: app: recommendationservice spec: type: ClusterIP selector:
  app: recommendationservice ports: - name: grpc port: 8080 targetPort: 8080 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: recommendationservice'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - adservice.yaml - cartservice.yaml - checkoutservice.yaml
  - currencyservice.yaml - emailservice.yaml - frontend.yaml # - loadgenerator.yaml
  # During development, the loadgenerator module inside skaffold.yaml will be used.
  - paymentservice.yaml - productcatalogservice.yaml - recommendationservice.yaml
  - shippingservice.yaml # components: # - ../kustomize/components/cymbal-branding
  # - ../kustomize/components/google-cloud-operations # - ../kustomize/components/memorystore
  # - ../kustomize/components/network-policies # - ../kustomize/components/alloydb
  # - ../kustomize/components/shopping-assistant # - ../kustomize/components/spanner
  # - ../kustomize/components/container-images-tag # - ../kustomize/components/container-images-tag-suffix
  # - ../kustomize/components/container-images-registry'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: frontend labels: app: frontend spec: selector: matchLabels:
  app: frontend template: metadata: labels: app: frontend annotations: sidecar.istio.io/rewriteAppHTTPProbers:
  "true" spec: serviceAccountName: frontend securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: frontend ports: - containerPort: 8080 readinessProbe: initialDelaySeconds:
  10 httpGet: path: "/_healthz" port: 8080 httpHeaders: - name: "Cookie" value: "shop_session-id=x-readiness-probe"
  livenessProbe: initialDelaySeconds: 10 httpGet: path: "/_healthz" port: 8080 httpHeaders:
  - name: "Cookie" value: "shop_session-id=x-liveness-probe" env: - name: PORT value:
  "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "productcatalogservice:3550"
  - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000" - name: CART_SERVICE_ADDR
  value: "cartservice:7070" - name: RECOMMENDATION_SERVICE_ADDR value: "recommendationservice:8080"
  - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051" - name: CHECKOUT_SERVICE_ADDR
  value: "checkoutservice:5050" - name: AD_SERVICE_ADDR value: "adservice:9555" -
  name: SHOPPING_ASSISTANT_SERVICE_ADDR value: "shoppingassistantservice:80" # # ENV_PLATFORM:
  One of: local, gcp, aws, azure, onprem, alibaba # # When not set, defaults to "local"
  unless running in GKE, otherwies auto-sets to gcp # - name: ENV_PLATFORM # value:
  "aws" - name: ENABLE_PROFILER value: "0" # - name: CYMBAL_BRANDING # value: "true"
  # - name: ENABLE_ASSISTANT # value: "true" # - name: FRONTEND_MESSAGE # value: "Replace
  this with a message you want to display on all pages." # As part of an optional
  Google Cloud demo, you can run an optional microservice called the "packaging service".
  # - name: PACKAGING_SERVICE_URL # value: "" # This value would look like "http://123.123.123"
  resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi ---
  apiVersion: v1 kind: Service metadata: name: frontend labels: app: frontend spec:
  type: ClusterIP selector: app: frontend ports: - name: http port: 80 targetPort:
  8080 --- apiVersion: v1 kind: Service metadata: name: frontend-external labels:
  app: frontend spec: type: LoadBalancer selector: app: frontend ports: - name: http
  port: 80 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata: name:
  frontend'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: paymentservice labels: app: paymentservice spec: selector:
  matchLabels: app: paymentservice template: metadata: labels: app: paymentservice
  spec: serviceAccountName: paymentservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: paymentservice ports:
  - containerPort: 50051 env: - name: PORT value: "50051" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 50051 livenessProbe: grpc: port: 50051 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: paymentservice labels: app: paymentservice spec:
  type: ClusterIP selector: app: paymentservice ports: - name: grpc port: 50051 targetPort:
  50051 --- apiVersion: v1 kind: ServiceAccount metadata: name: paymentservice'
- '# ./kubernetes-manifests :warning: Kubernetes manifests provided in this directory
  are not directly deployable to a cluster. They are meant to be used with `skaffold`
  command to insert the correct `image:` tags. Use the manifests in [/release](/release)
  directory which are configured with pre-built public images.'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: productcatalogservice labels: app: productcatalogservice
  spec: selector: matchLabels: app: productcatalogservice template: metadata: labels:
  app: productcatalogservice spec: serviceAccountName: productcatalogservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  productcatalogservice ports: - containerPort: 3550 env: - name: PORT value: "3550"
  - name: DISABLE_PROFILER value: "1" readinessProbe: grpc: port: 3550 livenessProbe:
  grpc: port: 3550 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory:
  128Mi --- apiVersion: v1 kind: Service metadata: name: productcatalogservice labels:
  app: productcatalogservice spec: type: ClusterIP selector: app: productcatalogservice
  ports: - name: grpc port: 3550 targetPort: 3550 --- apiVersion: v1 kind: ServiceAccount
  metadata: name: productcatalogservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: cartservice labels: app: cartservice spec: selector:
  matchLabels: app: cartservice template: metadata: labels: app: cartservice spec:
  serviceAccountName: cartservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: cartservice ports: -
  containerPort: 7070 env: - name: REDIS_ADDR value: "redis-cart:6379" resources:
  requests: cpu: 200m memory: 64Mi limits: cpu: 300m memory: 128Mi readinessProbe:
  initialDelaySeconds: 15 grpc: port: 7070 livenessProbe: initialDelaySeconds: 15
  periodSeconds: 10 grpc: port: 7070 --- apiVersion: v1 kind: Service metadata: name:
  cartservice labels: app: cartservice spec: type: ClusterIP selector: app: cartservice
  ports: - name: grpc port: 7070 targetPort: 7070 --- apiVersion: v1 kind: ServiceAccount
  metadata: name: cartservice --- apiVersion: apps/v1 kind: Deployment metadata: name:
  redis-cart labels: app: redis-cart spec: selector: matchLabels: app: redis-cart
  template: metadata: labels: app: redis-cart spec: securityContext: fsGroup: 1000
  runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: - name: redis securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: redis:alpine ports: - containerPort: 6379 readinessProbe: periodSeconds:
  5 tcpSocket: port: 6379 livenessProbe: periodSeconds: 5 tcpSocket: port: 6379 volumeMounts:
  - mountPath: /data name: redis-data resources: limits: memory: 256Mi cpu: 125m requests:
  cpu: 70m memory: 200Mi volumes: - name: redis-data emptyDir: {} --- apiVersion:
  v1 kind: Service metadata: name: redis-cart labels: app: redis-cart spec: type:
  ClusterIP selector: app: redis-cart ports: - name: tcp-redis port: 6379 targetPort:
  6379'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: loadgenerator labels: app: loadgenerator spec: selector:
  matchLabels: app: loadgenerator replicas: 1 template: metadata: labels: app: loadgenerator
  annotations: sidecar.istio.io/rewriteAppHTTPProbers: "true" spec: serviceAccountName:
  loadgenerator terminationGracePeriodSeconds: 5 restartPolicy: Always securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 initContainers:
  - command: - /bin/sh - -exc - | MAX_RETRIES=12 RETRY_INTERVAL=10 for i in $(seq
  1 $MAX_RETRIES); do echo "Attempt $i: Pinging frontend: ${FRONTEND_ADDR}..." STATUSCODE=$(wget
  --server-response http://${FRONTEND_ADDR} 2>&1 | awk ''/^ HTTP/{print $2}'') if
  [ $STATUSCODE -eq 200 ]; then echo "Frontend is reachable." exit 0 fi echo "Error:
  Could not reach frontend - Status code: ${STATUSCODE}" sleep $RETRY_INTERVAL done
  echo "Failed to reach frontend after $MAX_RETRIES attempts." exit 1 name: frontend-check
  securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged:
  false readOnlyRootFilesystem: true image: busybox:latest env: - name: FRONTEND_ADDR
  value: "frontend:80" containers: - name: main securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  loadgenerator env: - name: FRONTEND_ADDR value: "frontend:80" - name: USERS value:
  "10" - name: RATE value: "1" resources: requests: cpu: 300m memory: 256Mi limits:
  cpu: 500m memory: 512Mi --- apiVersion: v1 kind: ServiceAccount metadata: name:
  loadgenerator'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: currencyservice labels: app: currencyservice spec: selector:
  matchLabels: app: currencyservice template: metadata: labels: app: currencyservice
  spec: serviceAccountName: currencyservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: currencyservice ports:
  - name: grpc containerPort: 7000 env: - name: PORT value: "7000" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 7000 livenessProbe: grpc: port: 7000 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: currencyservice labels: app: currencyservice spec:
  type: ClusterIP selector: app: currencyservice ports: - name: grpc port: 7000 targetPort:
  7000 --- apiVersion: v1 kind: ServiceAccount metadata: name: currencyservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: shippingservice labels: app: shippingservice spec: selector:
  matchLabels: app: shippingservice template: metadata: labels: app: shippingservice
  spec: serviceAccountName: shippingservice securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: shippingservice ports: - containerPort: 50051 env: - name: PORT value:
  "50051" - name: DISABLE_PROFILER value: "1" readinessProbe: periodSeconds: 5 grpc:
  port: 50051 livenessProbe: grpc: port: 50051 resources: requests: cpu: 100m memory:
  64Mi limits: cpu: 200m memory: 128Mi --- apiVersion: v1 kind: Service metadata:
  name: shippingservice labels: app: shippingservice spec: type: ClusterIP selector:
  app: shippingservice ports: - name: grpc port: 50051 targetPort: 50051 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: shippingservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: adservice labels: app: adservice spec: selector: matchLabels:
  app: adservice template: metadata: labels: app: adservice spec: serviceAccountName:
  adservice terminationGracePeriodSeconds: 5 securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: adservice ports: - containerPort: 9555 env: - name: PORT value: "9555"
  resources: requests: cpu: 200m memory: 180Mi limits: cpu: 300m memory: 300Mi readinessProbe:
  initialDelaySeconds: 20 periodSeconds: 15 grpc: port: 9555 livenessProbe: initialDelaySeconds:
  20 periodSeconds: 15 grpc: port: 9555 --- apiVersion: v1 kind: Service metadata:
  name: adservice labels: app: adservice spec: type: ClusterIP selector: app: adservice
  ports: - name: grpc port: 9555 targetPort: 9555 --- apiVersion: v1 kind: ServiceAccount
  metadata: name: adservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # ----------------------------------------------------------
  # WARNING: This file is autogenerated. Do not manually edit. # ----------------------------------------------------------
  # [START servicemesh_release_istio_manifests_microservices_demo] --- apiVersion:
  gateway.networking.k8s.io/v1beta1 kind: Gateway metadata: name: istio-gateway spec:
  gatewayClassName: istio listeners: - name: http port: 80 protocol: HTTP allowedRoutes:
  namespaces: from: Same --- apiVersion: gateway.networking.k8s.io/v1beta1 kind: HTTPRoute
  metadata: name: frontend-route spec: parentRefs: - name: istio-gateway rules: -
  matches: - path: value: / backendRefs: - name: frontend port: 80 --- apiVersion:
  networking.istio.io/v1alpha3 kind: ServiceEntry metadata: name: allow-egress-googleapis
  spec: hosts: - "accounts.google.com" # Used to get token - "*.googleapis.com" ports:
  - number: 80 protocol: HTTP name: http - number: 443 protocol: HTTPS name: https
  --- apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry metadata: name:
  allow-egress-google-metadata spec: hosts: - metadata.google.internal addresses:
  - 169.254.169.254 # GCE metadata server ports: - number: 80 name: http protocol:
  HTTP - number: 443 name: https protocol: HTTPS --- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService metadata: name: frontend spec: hosts: - "frontend.default.svc.cluster.local"
  http: - route: - destination: host: frontend port: number: 80 # [END servicemesh_release_istio_manifests_microservices_demo]'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # ----------------------------------------------------------
  # WARNING: This file is autogenerated. Do not manually edit. # ----------------------------------------------------------
  # [START gke_release_kubernetes_manifests_microservices_demo] --- apiVersion: apps/v1
  kind: Deployment metadata: name: emailservice labels: app: emailservice spec: selector:
  matchLabels: app: emailservice template: metadata: labels: app: emailservice spec:
  serviceAccountName: emailservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/emailservice:v0.10.3
  ports: - containerPort: 8080 env: - name: PORT value: "8080" - name: DISABLE_PROFILER
  value: "1" readinessProbe: periodSeconds: 5 grpc: port: 8080 livenessProbe: periodSeconds:
  5 grpc: port: 8080 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m
  memory: 128Mi --- apiVersion: v1 kind: Service metadata: name: emailservice labels:
  app: emailservice spec: type: ClusterIP selector: app: emailservice ports: - name:
  grpc port: 5000 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: emailservice --- apiVersion: apps/v1 kind: Deployment metadata: name: checkoutservice
  labels: app: checkoutservice spec: selector: matchLabels: app: checkoutservice template:
  metadata: labels: app: checkoutservice spec: serviceAccountName: checkoutservice
  securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000
  containers: - name: server securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/checkoutservice:v0.10.3
  ports: - containerPort: 5050 readinessProbe: grpc: port: 5050 livenessProbe: grpc:
  port: 5050 env: - name: PORT value: "5050" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "productcatalogservice:3550" - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051"
  - name: PAYMENT_SERVICE_ADDR value: "paymentservice:50051" - name: EMAIL_SERVICE_ADDR
  value: "emailservice:5000" - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000"
  - name: CART_SERVICE_ADDR value: "cartservice:7070" resources: requests: cpu: 100m
  memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion: v1 kind: Service metadata:
  name: checkoutservice labels: app: checkoutservice spec: type: ClusterIP selector:
  app: checkoutservice ports: - name: grpc port: 5050 targetPort: 5050 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: checkoutservice --- apiVersion: apps/v1
  kind: Deployment metadata: name: recommendationservice labels: app: recommendationservice
  spec: selector: matchLabels: app: recommendationservice template: metadata: labels:
  app: recommendationservice spec: serviceAccountName: recommendationservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice:v0.10.3
  ports: - containerPort: 8080 readinessProbe: periodSeconds: 5 grpc: port: 8080 livenessProbe:
  periodSeconds: 5 grpc: port: 8080 env: - name: PORT value: "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "productcatalogservice:3550" - name: DISABLE_PROFILER value: "1" resources:
  requests: cpu: 100m memory: 220Mi limits: cpu: 200m memory: 450Mi --- apiVersion:
  v1 kind: Service metadata: name: recommendationservice labels: app: recommendationservice
  spec: type: ClusterIP selector: app: recommendationservice ports: - name: grpc port:
  8080 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata: name: recommendationservice
  --- apiVersion: apps/v1 kind: Deployment metadata: name:'
- 'PORT value: "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "productcatalogservice:3550"
  - name: DISABLE_PROFILER value: "1" resources: requests: cpu: 100m memory: 220Mi
  limits: cpu: 200m memory: 450Mi --- apiVersion: v1 kind: Service metadata: name:
  recommendationservice labels: app: recommendationservice spec: type: ClusterIP selector:
  app: recommendationservice ports: - name: grpc port: 8080 targetPort: 8080 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: recommendationservice --- apiVersion: apps/v1
  kind: Deployment metadata: name: frontend labels: app: frontend spec: selector:
  matchLabels: app: frontend template: metadata: labels: app: frontend annotations:
  sidecar.istio.io/rewriteAppHTTPProbers: "true" spec: serviceAccountName: frontend
  securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000
  containers: - name: server securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend:v0.10.3
  ports: - containerPort: 8080 readinessProbe: initialDelaySeconds: 10 httpGet: path:
  "/_healthz" port: 8080 httpHeaders: - name: "Cookie" value: "shop_session-id=x-readiness-probe"
  livenessProbe: initialDelaySeconds: 10 httpGet: path: "/_healthz" port: 8080 httpHeaders:
  - name: "Cookie" value: "shop_session-id=x-liveness-probe" env: - name: PORT value:
  "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "productcatalogservice:3550"
  - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000" - name: CART_SERVICE_ADDR
  value: "cartservice:7070" - name: RECOMMENDATION_SERVICE_ADDR value: "recommendationservice:8080"
  - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051" - name: CHECKOUT_SERVICE_ADDR
  value: "checkoutservice:5050" - name: AD_SERVICE_ADDR value: "adservice:9555" -
  name: SHOPPING_ASSISTANT_SERVICE_ADDR value: "shoppingassistantservice:80" # # ENV_PLATFORM:
  One of: local, gcp, aws, azure, onprem, alibaba # # When not set, defaults to "local"
  unless running in GKE, otherwies auto-sets to gcp # - name: ENV_PLATFORM # value:
  "aws" - name: ENABLE_PROFILER value: "0" # - name: CYMBAL_BRANDING # value: "true"
  # - name: ENABLE_ASSISTANT # value: "true" # - name: FRONTEND_MESSAGE # value: "Replace
  this with a message you want to display on all pages." # As part of an optional
  Google Cloud demo, you can run an optional microservice called the "packaging service".
  # - name: PACKAGING_SERVICE_URL # value: "" # This value would look like "http://123.123.123"
  resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi ---
  apiVersion: v1 kind: Service metadata: name: frontend labels: app: frontend spec:
  type: ClusterIP selector: app: frontend ports: - name: http port: 80 targetPort:
  8080 --- apiVersion: v1 kind: Service metadata: name: frontend-external labels:
  app: frontend spec: type: LoadBalancer selector: app: frontend ports: - name: http
  port: 80 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata: name:
  frontend --- apiVersion: apps/v1 kind: Deployment metadata: name: paymentservice
  labels: app: paymentservice spec: selector: matchLabels: app: paymentservice template:
  metadata: labels: app: paymentservice spec: serviceAccountName: paymentservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/paymentservice:v0.10.3
  ports: - containerPort: 50051 env: - name: PORT value: "50051" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 50051 livenessProbe: grpc: port: 50051 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: paymentservice labels: app: paymentservice spec:
  type: ClusterIP selector: app: paymentservice ports: - name: grpc port: 50051 targetPort:
  50051 --- apiVersion: v1 kind: ServiceAccount metadata: name: paymentservice ---
  apiVersion: apps/v1 kind: Deployment metadata: name: productcatalogservice labels:
  app: productcatalogservice spec: selector: matchLabels: app: productcatalogservice
  template: metadata: labels: app: productcatalogservice spec: serviceAccountName:
  productcatalogservice terminationGracePeriodSeconds: 5 securityContext: fsGroup:
  1000 runAsGroup: 1000 runAsNonRoot:'
- 'apiVersion: v1 kind: Service metadata: name: paymentservice labels: app: paymentservice
  spec: type: ClusterIP selector: app: paymentservice ports: - name: grpc port: 50051
  targetPort: 50051 --- apiVersion: v1 kind: ServiceAccount metadata: name: paymentservice
  --- apiVersion: apps/v1 kind: Deployment metadata: name: productcatalogservice labels:
  app: productcatalogservice spec: selector: matchLabels: app: productcatalogservice
  template: metadata: labels: app: productcatalogservice spec: serviceAccountName:
  productcatalogservice terminationGracePeriodSeconds: 5 securityContext: fsGroup:
  1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server
  securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged:
  false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/productcatalogservice:v0.10.3
  ports: - containerPort: 3550 env: - name: PORT value: "3550" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 3550 livenessProbe: grpc: port: 3550 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: productcatalogservice labels: app: productcatalogservice
  spec: type: ClusterIP selector: app: productcatalogservice ports: - name: grpc port:
  3550 targetPort: 3550 --- apiVersion: v1 kind: ServiceAccount metadata: name: productcatalogservice
  --- apiVersion: apps/v1 kind: Deployment metadata: name: cartservice labels: app:
  cartservice spec: selector: matchLabels: app: cartservice template: metadata: labels:
  app: cartservice spec: serviceAccountName: cartservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/cartservice:v0.10.3
  ports: - containerPort: 7070 env: - name: REDIS_ADDR value: "redis-cart:6379" resources:
  requests: cpu: 200m memory: 64Mi limits: cpu: 300m memory: 128Mi readinessProbe:
  initialDelaySeconds: 15 grpc: port: 7070 livenessProbe: initialDelaySeconds: 15
  periodSeconds: 10 grpc: port: 7070 --- apiVersion: v1 kind: Service metadata: name:
  cartservice labels: app: cartservice spec: type: ClusterIP selector: app: cartservice
  ports: - name: grpc port: 7070 targetPort: 7070 --- apiVersion: v1 kind: ServiceAccount
  metadata: name: cartservice --- apiVersion: apps/v1 kind: Deployment metadata: name:
  redis-cart labels: app: redis-cart spec: selector: matchLabels: app: redis-cart
  template: metadata: labels: app: redis-cart spec: securityContext: fsGroup: 1000
  runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: - name: redis securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: redis:alpine ports: - containerPort: 6379 readinessProbe: periodSeconds:
  5 tcpSocket: port: 6379 livenessProbe: periodSeconds: 5 tcpSocket: port: 6379 volumeMounts:
  - mountPath: /data name: redis-data resources: limits: memory: 256Mi cpu: 125m requests:
  cpu: 70m memory: 200Mi volumes: - name: redis-data emptyDir: {} --- apiVersion:
  v1 kind: Service metadata: name: redis-cart labels: app: redis-cart spec: type:
  ClusterIP selector: app: redis-cart ports: - name: tcp-redis port: 6379 targetPort:
  6379 --- apiVersion: apps/v1 kind: Deployment metadata: name: loadgenerator labels:
  app: loadgenerator spec: selector: matchLabels: app: loadgenerator replicas: 1 template:
  metadata: labels: app: loadgenerator annotations: sidecar.istio.io/rewriteAppHTTPProbers:
  "true" spec: serviceAccountName: loadgenerator terminationGracePeriodSeconds: 5
  restartPolicy: Always securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot:
  true runAsUser: 1000 initContainers: - command: - /bin/sh - -exc - | MAX_RETRIES=12
  RETRY_INTERVAL=10 for i in $(seq 1 $MAX_RETRIES); do echo "Attempt $i: Pinging frontend:
  ${FRONTEND_ADDR}..." STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR}
  2>&1 | awk ''/^ HTTP/{print $2}'') if [ $STATUSCODE -eq 200 ]; then echo "Frontend
  is reachable." exit 0 fi echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
  sleep $RETRY_INTERVAL done echo "Failed to reach frontend after $MAX_RETRIES attempts."
  exit 1 name: frontend-check securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: busybox:latest
  env: -'
- '${FRONTEND_ADDR}..." STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR}
  2>&1 | awk ''/^ HTTP/{print $2}'') if [ $STATUSCODE -eq 200 ]; then echo "Frontend
  is reachable." exit 0 fi echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
  sleep $RETRY_INTERVAL done echo "Failed to reach frontend after $MAX_RETRIES attempts."
  exit 1 name: frontend-check securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: busybox:latest
  env: - name: FRONTEND_ADDR value: "frontend:80" containers: - name: main securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator:v0.10.3
  env: - name: FRONTEND_ADDR value: "frontend:80" - name: USERS value: "10" - name:
  RATE value: "1" resources: requests: cpu: 300m memory: 256Mi limits: cpu: 500m memory:
  512Mi --- apiVersion: v1 kind: ServiceAccount metadata: name: loadgenerator ---
  apiVersion: apps/v1 kind: Deployment metadata: name: currencyservice labels: app:
  currencyservice spec: selector: matchLabels: app: currencyservice template: metadata:
  labels: app: currencyservice spec: serviceAccountName: currencyservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/currencyservice:v0.10.3
  ports: - name: grpc containerPort: 7000 env: - name: PORT value: "7000" - name:
  DISABLE_PROFILER value: "1" readinessProbe: grpc: port: 7000 livenessProbe: grpc:
  port: 7000 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory:
  128Mi --- apiVersion: v1 kind: Service metadata: name: currencyservice labels: app:
  currencyservice spec: type: ClusterIP selector: app: currencyservice ports: - name:
  grpc port: 7000 targetPort: 7000 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: currencyservice --- apiVersion: apps/v1 kind: Deployment metadata: name: shippingservice
  labels: app: shippingservice spec: selector: matchLabels: app: shippingservice template:
  metadata: labels: app: shippingservice spec: serviceAccountName: shippingservice
  securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000
  containers: - name: server securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/shippingservice:v0.10.3
  ports: - containerPort: 50051 env: - name: PORT value: "50051" - name: DISABLE_PROFILER
  value: "1" readinessProbe: periodSeconds: 5 grpc: port: 50051 livenessProbe: grpc:
  port: 50051 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory:
  128Mi --- apiVersion: v1 kind: Service metadata: name: shippingservice labels: app:
  shippingservice spec: type: ClusterIP selector: app: shippingservice ports: - name:
  grpc port: 50051 targetPort: 50051 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: shippingservice --- apiVersion: apps/v1 kind: Deployment metadata: name: adservice
  labels: app: adservice spec: selector: matchLabels: app: adservice template: metadata:
  labels: app: adservice spec: serviceAccountName: adservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/adservice:v0.10.3 ports:
  - containerPort: 9555 env: - name: PORT value: "9555" resources: requests: cpu:
  200m memory: 180Mi limits: cpu: 300m memory: 300Mi readinessProbe: initialDelaySeconds:
  20 periodSeconds: 15 grpc: port: 9555 livenessProbe: initialDelaySeconds: 20 periodSeconds:
  15 grpc: port: 9555 --- apiVersion: v1 kind: Service metadata: name: adservice labels:
  app: adservice spec: type: ClusterIP selector: app: adservice ports: - name: grpc
  port: 9555 targetPort: 9555 --- apiVersion: v1 kind: ServiceAccount metadata: name:
  adservice # [END gke_release_kubernetes_manifests_microservices_demo]'
- '9555 --- apiVersion: v1 kind: Service metadata: name: adservice labels: app: adservice
  spec: type: ClusterIP selector: app: adservice ports: - name: grpc port: 9555 targetPort:
  9555 --- apiVersion: v1 kind: ServiceAccount metadata: name: adservice # [END gke_release_kubernetes_manifests_microservices_demo]'
- "# Development Guide This doc explains how to build and run the Online Boutique\
  \ source code locally using the `skaffold` command-line tool. ## Prerequisites -\
  \ [Docker for Desktop](https://www.docker.com/products/docker-desktop) - [kubectl](https://kubernetes.io/docs/tasks/tools/)\
  \ (can be installed via `gcloud components install kubectl` for Option 1 - GKE)\
  \ - [skaffold **2.0.2+**](https://skaffold.dev/docs/install/) (latest version recommended),\
  \ a tool that builds and deploys Docker images in bulk. - Clone the repository.\
  \ ```sh git clone https://github.com/GoogleCloudPlatform/microservices-demo cd microservices-demo/\
  \ ``` - A Google Cloud project with Google Container Registry enabled. (for Option\
  \ 1 - GKE) - [Minikube](https://minikube.sigs.k8s.io/docs/start/) (optional for\
  \ Option 2 - Local Cluster) - [Kind](https://kind.sigs.k8s.io/) (optional for Option\
  \ 2 - Local Cluster) ## Option 1: Google Kubernetes Engine (GKE) > \U0001F4A1 Recommended\
  \ if you're using Google Cloud and want to try it on > a realistic cluster. **Note**:\
  \ If your cluster has Workload Identity enabled, > [see these instructions](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable)\
  \ 1. Create a Google Kubernetes Engine cluster and make sure `kubectl` is pointing\
  \ to the cluster. ```sh gcloud services enable container.googleapis.com ``` ```sh\
  \ gcloud container clusters create-auto demo --region=us-central1 ``` ``` kubectl\
  \ get nodes ``` 2. Enable Artifact Registry (AR) on your GCP project and configure\
  \ the `docker` CLI to authenticate to AR: ```sh gcloud services enable artifactregistry.googleapis.com\
  \ ``` ```sh gcloud artifacts repositories create microservices-demo \\ --repository-format=docker\
  \ \\ --location=us \\ ``` ```sh gcloud auth configure-docker -q ``` 3. In the root\
  \ of this repository, run `skaffold run --default-repo=us-docker.pkg.dev/[PROJECT_ID]/microservices-demo`,\
  \ where [PROJECT_ID] is your GCP project ID. This command: - builds the container\
  \ images - pushes them to AR - applies the `./kubernetes-manifests` deploying the\
  \ application to Kubernetes. **Troubleshooting:** If you get \"No space left on\
  \ device\" error on Google Cloud Shell, you can build the images on Google Cloud\
  \ Build: [Enable the Cloud Build API](https://console.cloud.google.com/flows/enableapi?apiid=cloudbuild.googleapis.com),\
  \ then run `skaffold run -p gcb --default-repo=us-docker.pkg.dev/[PROJECT_ID]/microservices-demo`\
  \ instead. 4. Find the IP address of your application, then visit the application\
  \ on your browser to confirm installation. kubectl get service frontend-external\
  \ 5. Navigate to `http://EXTERNAL-IP` to access the web frontend. ## Option 2 -\
  \ Local Cluster 1. Launch a local Kubernetes cluster with one of the following tools:\
  \ - To launch **Minikube** (tested with Ubuntu Linux). Please, ensure that the local\
  \ Kubernetes cluster has at least: - 4 CPUs - 4.0 GiB memory - 32 GB disk space\
  \ ```shell minikube start --cpus=4 --memory 4096 --disk-size 32g ``` - To launch\
  \ **Docker for Desktop** (tested with Mac/Windows). Go to Preferences: - choose\
  \ \u201CEnable Kubernetes\u201D, - set CPUs to at least 3, and Memory to at least\
  \ 6.0 GiB - on the \"Disk\" tab, set at least 32 GB disk space - To launch a **Kind**\
  \ cluster: ```shell kind create cluster ``` 2. Run `kubectl get nodes` to verify\
  \ you're connected to the respective control plane. 3. Run `skaffold run` (first\
  \ time will be slow, it can take ~20 minutes). This will build and deploy the application.\
  \ If you need to rebuild the images automatically as you refactor the code, run\
  \ `skaffold dev` command. 4. Run `kubectl get pods` to verify the Pods are ready\
  \ and running. 5. Run `kubectl port-forward deployment/frontend 8080:8080` to forward\
  \ a port to the frontend service."
- 'Run `skaffold run` (first time will be slow, it can take ~20 minutes). This will
  build and deploy the application. If you need to rebuild the images automatically
  as you refactor the code, run `skaffold dev` command. 4. Run `kubectl get pods`
  to verify the Pods are ready and running. 5. Run `kubectl port-forward deployment/frontend
  8080:8080` to forward a port to the frontend service. 6. Navigate to `localhost:8080`
  to access the web frontend. ## Cleanup If you''ve deployed the application with
  `skaffold run` command, you can run `skaffold delete` to clean up the deployed resources.'
- '## Deploy Online Boutique with DeployStack The "Open in Google Cloud Shell" button
  below will use [DeployStack](https://cloud.google.com/shell/docs/cloud-shell-tutorials/deploystack/overview)
  to deploy Online Boutique to a new Google Kubernetes Engine (GKE) cluster. <!--
  TODO: remove reference to the deploystack-enable branch when it pushes to main -->
  <a href="https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fmicroservices-demo&shellonly=true&cloudshell_image=gcr.io/ds-artifacts-cloudshell/deploystack_custom_image"
  target="_new"> <img alt="Open in Cloud Shell" src="https://gstatic.com/cloudssh/images/open-btn.svg">
  </a> The button will open up a [Cloud Shell](https://cloud.google.com/shell) session
  where you will select your Google Cloud project. After project selection, the following
  will happen automatically: 1. a GKE cluster will be created inside the select project
  2. Online Boutique (and its load generator) will be deployed to that cluster'
- '## Purpose Today, the primary purpose of Online Boutique is to demonstrate: * [Google
  Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine) * [Anthos](https://cloud.google.com/anthos)
  * [Google Cloud Operations](https://cloud.google.com/products/operations) * tools
  and technologies commonly used alongside the above products while being accessible
  and useful to all new Kubernetes users. ### Why does the purpose matter? We filter
  and prioritize the work to be done in this repository based on the purpose defined
  above. If you wish to make changes to this repository that do not align with the
  above purpose, we encourage you to maintain your own fork of Online Boutique.'
- "## Product Requirements This document contains a list of requirements that every\
  \ change made to this repository should meet. Every change must: 1. Preserve the\
  \ golden user journey taken by Kubernetes beginners. 1. Preserve the simplicity\
  \ of demos. 1. Preserve the simplicity of the GKE quickstart. These requirements\
  \ are about the default deployment (default configuration) of Online Boutique. Changes\
  \ that will violate any of these rules should not be built into the default configuration\
  \ of Online Boutique. Such changes should be opt-in only \u2014 ideally, as a [Kustomize\
  \ Component](https://github.com/GoogleCloudPlatform/microservices-demo/tree/main/kustomize)\
  \ if they align with the [purpose of Online Boutique](/docs/purpose.md). ### 1.\
  \ Preserve the golden user journey taken by Kubernetes beginners The following statement\
  \ about Online Boutique should always be true: > A user outside of Google can deploy\
  \ Online Boutique's default configuration on a [_kind_ Kubernetes cluster](https://kind.sigs.k8s.io/).\
  \ This statement describes the golden user journey that we expect new Kubernetes\
  \ users to take while onboarding to Online Boutique. Being able to run Online Boutique\
  \ on a _kind_ cluster ensures that Online Boutique is free and cloud-agnostic. This\
  \ is aligned with [Google's mission](https://about.google/) of making information\
  \ universally accessible and useful. To be specific, Online Boutique should be useful\
  \ and accessible to developers that are new to Kubernetes. ### 2. Preserve the simplicity\
  \ of demos New changes should not complicate the primary user journey showcased\
  \ in live demos and tutorials. Today, the primary user journey is as follows: 1.\
  \ Visit Online Boutique on a web browser. 2. Select an item from the homepage and\
  \ add the item to the cart. 3. The checkout form is pre-populated with placeholder\
  \ data (e.g. the shipping address). 4. The user checks out and completes the order.\
  \ ### 3. Preserve the simplicity of the GKE quickstart New changes should not add\
  \ additional complexity in the [main Online Boutique quickstart](https://github.com/GoogleCloudPlatform/microservices-demo#quickstart-gke).\
  \ In particular, new changes should not add extra required steps or additional required\
  \ tools in that quickstart. Ideally, extensions to Online Boutique's default functionality\
  \ (such as a new microservice or a new cloud service integration) should be added\
  \ as a [Kustomize Component](https://github.com/GoogleCloudPlatform/microservices-demo/tree/main/kustomize/components)\
  \ which users can optionally opt into."
- '# Online Boutique quickstart This tutorial shows you how to deploy **[Online Boutique](https://github.com/GoogleCloudPlatform/microservices-demo)**
  to a Kubernetes cluster. You''ll be able to run Online Boutique on: - a local **[minikube](https://minikube.sigs.k8s.io/docs/)**
  cluster, which comes built in to the Cloud Shell instance - a **[Google Kubernetes
  Engine](https://cloud.google.com/kubernetes-engine)** cluster using a new or existing
  [Google Cloud project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project)
  Let''s get started! ## Kubernetes cluster setup Set up a Kubernetes cluster using
  the instructions below for either **minikube** or **GKE**. ### Minikube instructions
  Minikube creates a local Kubernetes cluster on Cloud Shell. 1. Click <walkthrough-editor-spotlight
  spotlightId="minikube-status-bar">minikube</walkthrough-editor-spotlight> on the
  status bar located at the bottom of the editor window. 2. The command palette will
  prompt you to choose which minikube cluster to control. Select **minikube** and,
  in the next prompt, click **Start** if the cluster has not already been started.
  3. If prompted, authorize Cloud Shell to make a GCP API call with your credentials.
  *It may take a few minutes for minikube to finish starting.* Once minikube has started,
  you''re ready to move on to the next step. ### GKE instructions In order to create
  a GKE cluster, you''ll need to **[create a Google Cloud project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project)**
  or use an existing project. 1. Access the command palette by going to **View > Find
  Command**. 2. Run the command **"Cloud Code: Create GKE cluster"**. 3. Select your
  GCP project. 4. Apply the following configurations in the GKE wizard: > - Zone:
  us-central1-b > - Cluster name: onlineboutique > - Node count: 4 > - Machine type:
  e2-standard-2 5. Click **Create Cluster**. Once your cluster has been created successfully,
  you can move on to the next step. ## Run on Kubernetes Now you can run Online Boutique
  on your Kubernetes cluster! 1. Launch the <walkthrough-editor-spotlight spotlightId="cloud-code-status-bar">Cloud
  Code menu</walkthrough-editor-spotlight> from the status bar and select <walkthrough-editor-spotlight
  spotlightId="cloud-code-run-on-k8s">Run on Kubernetes</walkthrough-editor-spotlight>.
  2. If prompted to select a Skaffold Profile, select **[default]**. 3. Select **Yes**
  to confirm your current context. 4. If you''re using a GKE cluster, you''ll need
  to confirm your container image registry. 5. If prompted, authorize Cloud Shell
  to make a GCP API call with your credentials. Cloud Code uses configurations defined
  in <walkthrough-editor-open-file filePath="skaffold.yaml">skaffold.yaml</walkthrough-editor-open-file>
  to build and deploy the app. *It may take a few minutes for the deploy to complete.*
  6. Once the app is running, the local URLs will be displayed in the <walkthrough-editor-spotlight
  spotlightId="output">Output</walkthrough-editor-spotlight> terminal. 7. To access
  your Online Boutique frontend service, click on the <walkthrough-spotlight-pointer
  spotlightId="devshell-web-preview-button" target="cloudshell">Web Preview button</walkthrough-spotlight-pointer>
  in the upper right of the editor window. 8. Select **Change Port** and enter ''4503''
  as the port, then click **Change and Preview**. Your app will open in a new window.
  ## Stop the app To stop running the app: 1. Go to the <walkthrough-editor-spotlight
  spotlightId="activity-bar-debug">Debug view</walkthrough-editor-spotlight> 2. Click
  the **Stop** icon. 3. Select **Yes** to clean up deployed resources. You can start,
  stop, and debug apps from the Debug view. ### Clean up If you''ve deployed your
  app to a GKE cluster in your Google Cloud project, you''ll want to delete the cluster
  to avoid incurring charges. 1. Navigate to the <walkthrough-editor-spotlight spotlightId="activity-bar-cloud-k8s">Cloud
  Code - Kubernetes'
- 'the <walkthrough-editor-spotlight spotlightId="activity-bar-debug">Debug view</walkthrough-editor-spotlight>
  2. Click the **Stop** icon. 3. Select **Yes** to clean up deployed resources. You
  can start, stop, and debug apps from the Debug view. ### Clean up If you''ve deployed
  your app to a GKE cluster in your Google Cloud project, you''ll want to delete the
  cluster to avoid incurring charges. 1. Navigate to the <walkthrough-editor-spotlight
  spotlightId="activity-bar-cloud-k8s">Cloud Code - Kubernetes view</walkthrough-editor-spotlight>
  in the Activity bar. 2. Under the <walkthrough-editor-spotlight spotlightId="cloud-code-gke-explorer">Google
  Kubernetes Engine Explorer tab</walkthrough-editor-spotlight>, right-click on your
  cluster and select **Delete Cluster**. ## Conclusion <walkthrough-conclusion-trophy></walkthrough-conclusion-trophy>
  Congratulations! You''ve successfully deployed Online Boutique using Cloud Shell.
  <walkthrough-inline-feedback></walkthrough-inline-feedback> ##### What''s next?
  Try other deployment options for Online Boutique: - **Istio/Cloud Service Mesh**:
  <walkthrough-editor-open-file filePath="./kustomize/components/service-mesh-istio/README.md">See
  these instructions</walkthrough-editor-open-file>. Learn more about the [Cloud Shell](https://cloud.google.com/shell)
  IDE environment and the [Cloud Code](https://cloud.google.com/code) extension.'
- '# Releasing Online Boutique This document walks through the process of creating
  a new release of Online Boutique. ## Prerequisites for tagging a release 1. Choose
  the logical [next release tag](https://github.com/GoogleCloudPlatform/bank-of-anthos/releases),
  using [semantic versioning](https://semver.org/): `vX.Y.Z`. If this release includes
  significant feature changes, update the minor version (`Y`). Otherwise, for bug-fix
  releases or standard quarterly release, update the patch version `Z`). 2. Ensure
  that the following commands are in your `PATH`: - `gsed` (found in the `gnu-sed`
  Brew package for macOS, or by symlinking `sed` for Linux) - `gcloud` - `helm` 3.
  Make sure that your `gcloud` is authenticated: ```sh gcloud auth login gcloud auth
  configure-docker us-central1-docker.pkg.dev ``` ## Create and tag the new release
  Run the `make-release.sh` script found inside the `docs/releasing/` directory: ```sh
  # assuming you are inside the root path of the bank-of-anthos repository export
  TAG=vX.Y.Z # This is the new version (e.g. `v0.3.5`) export REPO_PREFIX=us-central1-docker.pkg.dev/google-samples/microservices-demo
  # This is the Docker repository for tagged images export PROJECT_ID=google-samples
  # This is the Google Cloud project for the release CI ./docs/releasing/make-release.sh
  ``` This script does the following: 1. Uses `make-docker-images.sh` to build and
  push a Docker image for each microservice to the previously specified repository.
  2. Uses `make-release-artifacts.sh` to regenerates (and update the image $TAGS)
  YAML file at `./release/kubernetes-manifests.yaml` and `./kustomize/base/`. 3. Runs
  `git tag` and pushes a new branch (e.g., `release/v0.3.5`) with the changes to `./release/kubernetes-manifests.yaml`.
  You can then browse the [Container Registry repository](https://pantheon.corp.google.com/gcr/images/google-samples/global/microservices-demo?project=google-samples)
  to make sure a Docker image was created for each microservice (with the new version
  tag). ## Create the PR Now that the release branch has been created, you can find
  it in the [list of branches](https://github.com/GoogleCloudPlatform/microservices-demo/branches)
  and create a pull request targeting `main` (the default branch). This process is
  going to trigger multiple CI checks as well as stage the release onto a temporary
  cluster. Once the PR has been approved and all checks are successfully passing,
  you can then merge the branch. Make sure to include the release draft (see next
  section) in the pull-request description for reviewers to see. Once reviewed and
  you''re ready to merge, make sure to not delete the release branch or the tags during
  that process. ## Add notes to the release Once the PR has been fully merged, you
  are ready to create a new release for the newly created [tag](https://github.com/GoogleCloudPlatform/microservices-demo/tags).
  - Click the breadcrumbs on the row of the latest tag that was created in the [tags](https://github.com/GoogleCloudPlatform/microservices-demo/tags)
  page - Select the `Create release` option The release notes should contain a brief
  description of the changes since the previous release (like bug fixed and new features).
  For inspiration, you can look at the list of [releases](https://github.com/GoogleCloudPlatform/microservices-demo/releases).
  > ***Note:*** No assets need to be uploaded. They are picked up automatically from
  the tagged revision ## Deploy on the production environment Once the release notes
  are published, you should then replace the version of the production environment
  to the newly published version. 1. Connect to the [online-boutique-release GKE cluster](https://pantheon.corp.google.com/kubernetes/clusters/details/us-central1-c/online-boutique-release/details?project=online-boutique-ci):
  ```sh gcloud container clusters get-credentials online-boutique-release \ --zone
  us-central1-c --project online-boutique-ci ``` 2. Deploy `release/kubernetes-manifests.yaml`
  to it: ```sh kubectl apply -f ./release/kubernetes-manifests.yaml'
- 'are picked up automatically from the tagged revision ## Deploy on the production
  environment Once the release notes are published, you should then replace the version
  of the production environment to the newly published version. 1. Connect to the
  [online-boutique-release GKE cluster](https://pantheon.corp.google.com/kubernetes/clusters/details/us-central1-c/online-boutique-release/details?project=online-boutique-ci):
  ```sh gcloud container clusters get-credentials online-boutique-release \ --zone
  us-central1-c --project online-boutique-ci ``` 2. Deploy `release/kubernetes-manifests.yaml`
  to it: ```sh kubectl apply -f ./release/kubernetes-manifests.yaml ``` 3. Remove
  unnecessary objects: ```sh kubectl delete service frontend-external kubectl delete
  deployment loadgenerator ``` 3. Make sure [cymbal-shops.retail.cymbal.dev](https://cymbal-shops.retail.cymbal.dev)
  works. ## Update major tags 1. Update the relevant major tag (for example, `v1`):
  ```sh export MAJOR_TAG=v0 # Edit this as needed (to v1/v2/v3/etc) git checkout release/${TAG}
  git pull git push --delete origin ${MAJOR_TAG} # Delete the remote tag (if it exists)
  git tag --delete ${MAJOR_TAG} # Delete the local tag (if it exists) git tag -a ${MAJOR_TAG}
  -m "Updating ${MAJOR_TAG} to its most recent release: ${TAG}" git push origin ${MAJOR_TAG}
  # Push the new tag to origin ``` ## Announce the new release internally Once the
  new release is out, you can now announce it via [g/online-boutique-announce](https://groups.google.com/a/google.com/g/online-boutique-announce).'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: v2 name:
  onlineboutique description: A Helm chart for Kubernetes for Online Boutique # A
  chart can be either an ''application'' or a ''library'' chart. # # Application charts
  are a collection of templates that can be packaged into versioned archives # to
  be deployed. # # Library charts provide useful utilities or functions for the chart
  developer. They''re included as # a dependency of application charts to inject those
  utilities and functions into the rendering # pipeline. Library charts do not define
  any templates and therefore cannot be deployed. type: application # This is the
  chart version. This version number should be incremented each time you make changes
  # to the chart and its templates, including the app version. # Versions are expected
  to follow Semantic Versioning (https://semver.org/) version: 0.10.3 # This is the
  version number of the application being deployed. This version number should be
  # incremented each time you make changes to the application. Versions are not expected
  to # follow Semantic Versioning. They should reflect the version the application
  is using. # It is recommended to use it with quotes. appVersion: "v0.10.3"'
- "# Helm chart for Online Boutique If you'd like to deploy Online Boutique via its\
  \ Helm chart, you could leverage the following instructions. **Warning:** Online\
  \ Boutique's Helm chart is currently experimental. If you have feedback or run into\
  \ issues, let us know inside [GitHub Issue #1319](https://github.com/GoogleCloudPlatform/microservices-demo/issues/1319)\
  \ or by creating a [new GitHub Issue](https://github.com/GoogleCloudPlatform/microservices-demo/issues/new/choose).\
  \ Deploy the default setup of Online Boutique: ```sh helm upgrade onlineboutique\
  \ oci://us-docker.pkg.dev/online-boutique-ci/charts/onlineboutique \\ --install\
  \ ``` Deploy advanced scenario of Online Boutique: ```sh helm upgrade onlineboutique\
  \ oci://us-docker.pkg.dev/online-boutique-ci/charts/onlineboutique \\ --install\
  \ \\ --create-namespace \\ --set images.repository=us-docker.pkg.dev/my-project/microservices-demo\
  \ \\ --set frontend.externalService=false \\ --set redis.create=false \\ --set cartservice.database.type=spanner\
  \ \\ --set cartservice.database.connectionString=projects/my-project/instances/onlineboutique/databases/carts\
  \ \\ --set serviceAccounts.create=true \\ --set authorizationPolicies.create=true\
  \ \\ --set networkPolicies.create=true \\ --set sidecars.create=true \\ --set frontend.virtualService.create=true\
  \ \\ --set 'serviceAccounts.annotations.iam\\.gke\\.io/gcp-service-account=spanner-db-user@my-project.iam.gserviceaccount.com'\
  \ \\ --set serviceAccounts.annotationsOnlyForCartservice=true \\ -n onlineboutique\
  \ ``` For the full list of configurations, see [values.yaml](./values.yaml). You\
  \ could also find advanced scenarios with these blogs below: - [Online Boutique\
  \ sample\u2019s Helm chart, to simplify the setup of advanced and secured scenarios\
  \ with Service Mesh and GitOps](https://medium.com/google-cloud/246119e46d53) -\
  \ [gRPC health probes with Kubernetes 1.24+](https://medium.com/google-cloud/b5bd26253a4c)\
  \ - [Use Google Cloud Spanner with the Online Boutique sample](https://medium.com/google-cloud/f7248e077339)"
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # Default values for
  onlineboutique. # This is a YAML-formatted file. # Declare variables to be passed
  into your templates. images: repository: us-central1-docker.pkg.dev/google-samples/microservices-demo
  # Overrides the image tag whose default is the chart appVersion. tag: "" serviceAccounts:
  # Specifies whether service accounts should be created. create: true # Annotations
  to add to the service accounts. annotations: {} # Annotations to add only for the
  cartservice app. This allows to follow the least privilege principle where only
  cartservice needs to connect to external database for example via Workload Identity.
  annotationsOnlyForCartservice: false networkPolicies: # Specifies if the NetworkPolicies
  are created or not. If true, one fine granular NetworkPolicy per app is created.
  create: false sidecars: # Specifies if the Sidecars are created or not. If true,
  one fine granular Sidecar per app is created. create: false authorizationPolicies:
  # Specifies if the AuthorizationPolicies are created or not. If true, one fine granular
  AuthorizationPolicy per app is created. create: false opentelemetryCollector: create:
  false name: opentelemetrycollector # Specifies the project id for the otel collector.
  If set as "PROJECT_ID" (default value), an initContainer will automatically retrieve
  the project id value from the metadata server. projectId: "PROJECT_ID" googleCloudOperations:
  profiler: false tracing: false metrics: false seccompProfile: enable: false type:
  RuntimeDefault securityContext: enable: true adService: create: true name: adservice
  resources: requests: cpu: 200m memory: 180Mi limits: cpu: 300m memory: 300Mi cartService:
  create: true name: cartservice resources: requests: cpu: 200m memory: 128Mi limits:
  cpu: 300m memory: 256Mi checkoutService: create: true name: checkoutservice resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi currencyService:
  create: true name: currencyservice resources: requests: cpu: 100m memory: 128Mi
  limits: cpu: 200m memory: 256Mi emailService: create: true name: emailservice resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi frontend: create:
  true name: frontend externalService: true cymbalBranding: false # One of: local,
  gcp, aws, azure, onprem, alibaba. When not set, defaults to "local" unless running
  in GKE, otherwise auto-sets to gcp. platform: local singleSharedSession: false virtualService:
  create: false hosts: - "*" gateway: name: asm-ingressgateway namespace: asm-ingress
  labelKey: asm labelValue: ingressgateway resources: requests: cpu: 100m memory:
  64Mi limits: cpu: 200m memory: 128Mi loadGenerator: create: true name: loadgenerator
  checkFrontendInitContainer: true resources: requests: cpu: 300m memory: 256Mi limits:
  cpu: 500m memory: 512Mi paymentService: create: true name: paymentservice resources:
  requests: cpu: 100m memory: 128Mi limits: cpu: 200m memory: 256Mi productCatalogService:
  create: true name: productcatalogservice # Specifies an extra latency to any request
  on productcatalogservice, by default no extra latency. extraLatency: "" resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi recommendationService:
  create:'
- 'checkFrontendInitContainer: true resources: requests: cpu: 300m memory: 256Mi limits:
  cpu: 500m memory: 512Mi paymentService: create: true name: paymentservice resources:
  requests: cpu: 100m memory: 128Mi limits: cpu: 200m memory: 256Mi productCatalogService:
  create: true name: productcatalogservice # Specifies an extra latency to any request
  on productcatalogservice, by default no extra latency. extraLatency: "" resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi recommendationService:
  create: true name: recommendationservice resources: requests: cpu: 100m memory:
  220Mi limits: cpu: 200m memory: 450Mi shippingService: create: true name: shippingservice
  resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi cartDatabase:
  # Specifies the type of the cartservice''s database, could be either redis or spanner.
  type: redis connectionString: "redis-cart:6379" inClusterRedis: create: true name:
  redis-cart # Uses the public redis image from Docker Hub, otherwise will use the
  images.repository. publicRepository: true externalRedisTlsOrigination: enable: false
  name: exernal-redis-tls-origination endpointAddress: "" endpointPort: "" certificate:
  "" # @TODO: This service is not currently available in Helm. # https://github.com/GoogleCloudPlatform/microservices-demo/tree/main/kustomize/components/shopping-assistant
  shoppingAssistantService: create: false name: shoppingassistantservice'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.opentelemetryCollector.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.opentelemetryCollector.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.opentelemetryCollector.name
  }} namespace: {{ .Release.Namespace }} spec: replicas: 1 selector: matchLabels:
  app: {{ .Values.opentelemetryCollector.name }} template: metadata: labels: app:
  {{ .Values.opentelemetryCollector.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.opentelemetryCollector.name }} {{- else }} serviceAccountName:
  default {{- end }} {{- if .Values.securityContext.enable }} securityContext: fsGroup:
  1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 {{- if .Values.seccompProfile.enable
  }} seccompProfile: type: {{ .Values.seccompProfile.type }} {{- end }} {{- end }}
  {{- if eq .Values.opentelemetryCollector.projectId "PROJECT_ID" }} initContainers:
  # Init container retrieves the current cloud project id from the metadata server
  # and inserts it into the collector config template # https://cloud.google.com/compute/docs/storing-retrieving-metadata
  - name: otel-gateway-init securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: busybox:latest@sha256:37f7b378a29ceb4c551b1b5582e27747b855bbfaa73fa11914fe0df028dc581f
  command: - ''/bin/sh'' - ''-c'' - | sed "s/PROJECT_ID/$(curl -H ''Metadata-Flavor:
  Google'' http://metadata.google.internal/computeMetadata/v1/project/project-id)/"
  /template/collector-gateway-config-template.yaml >> /conf/collector-gateway-config.yaml
  volumeMounts: - name: collector-gateway-config-template mountPath: /template - name:
  collector-gateway-config mountPath: /conf {{- end }} containers: # This gateway
  container will receive traces and metrics from each microservice # and forward it
  to GCP - name: otel-gateway securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true args: - --config=/conf/collector-gateway-config.yaml
  image: otel/opentelemetry-collector-contrib:0.122.1@sha256:0076e6c250bef16968e29e8f94177b87b5a851c79ce14b270e657f5f655b9e04
  volumeMounts: - name: collector-gateway-config mountPath: /conf volumes: # Simple
  ConfigMap volume with template file - name: collector-gateway-config-template configMap:
  items: - key: collector-gateway-config-template.yaml path: collector-gateway-config-template.yaml
  name: collector-gateway-config-template # Create a volume to store the expanded
  template (with correct cloud project ID) - name: collector-gateway-config emptyDir:
  {} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.opentelemetryCollector.name
  }} namespace: {{ .Release.Namespace }} spec: ports: - name: grpc-otlp port: 4317
  protocol: TCP targetPort: 4317 selector: app: {{ .Values.opentelemetryCollector.name
  }} type: ClusterIP --- apiVersion: v1 kind: ConfigMap metadata: name: collector-gateway-config-template
  namespace: {{ .Release.Namespace }} # Open Telemetry Collector config # https://opentelemetry.io/docs/collector/configuration/
  data: collector-gateway-config-template.yaml: | receivers: otlp: protocols: grpc:
  processors: exporters: googlecloud: project: {{ .Values.opentelemetryCollector.projectId
  | quote }} service: pipelines: traces: receivers: [otlp] # Receive otlp-formatted
  data from other collector instances processors: [] exporters: [googlecloud] # Export
  traces directly to Google Cloud metrics: receivers: [otlp] processors: [] exporters:
  [googlecloud] # Export metrics to Google Cloud {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.opentelemetryCollector.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.opentelemetryCollector.name
  }} policyTypes: - Ingress - Egress ingress: - from:'
- 'Receive otlp-formatted data from other collector instances processors: [] exporters:
  [googlecloud] # Export traces directly to Google Cloud metrics: receivers: [otlp]
  processors: [] exporters: [googlecloud] # Export metrics to Google Cloud {{- if
  .Values.networkPolicies.create }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy
  metadata: name: {{ .Values.opentelemetryCollector.name }} namespace: {{ .Release.Namespace
  }} spec: podSelector: matchLabels: app: {{ .Values.opentelemetryCollector.name }}
  policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels: app:
  {{ .Values.adService.name }} - podSelector: matchLabels: app: {{ .Values.cartService.name
  }} - podSelector: matchLabels: app: {{ .Values.checkoutService.name }} - podSelector:
  matchLabels: app: {{ .Values.currencyService.name }} - podSelector: matchLabels:
  app: {{ .Values.emailService.name }} - podSelector: matchLabels: app: {{ .Values.frontend.name
  }} - podSelector: matchLabels: app: {{ .Values.loadGenerator.name }} - podSelector:
  matchLabels: app: {{ .Values.paymentService.name }} - podSelector: matchLabels:
  app: {{ .Values.productCatalogService.name }} - podSelector: matchLabels: app: {{
  .Values.recommendationService.name }} - podSelector: matchLabels: app: {{ .Values.shippingService.name
  }} ports: - port: 4317 protocol: TCP egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.opentelemetryCollector.name }} namespace: {{ .Release.Namespace }} spec:
  workloadSelector: labels: app: {{ .Values.opentelemetryCollector.name }} egress:
  - hosts: - istio-system/* {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.opentelemetryCollector.name }} namespace: {{ .Release.Namespace
  }} spec: selector: matchLabels: app: {{ .Values.opentelemetryCollector.name }} rules:
  - from: - source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.adService.name }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.cartService.name }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{
  .Values.checkoutService.name }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{
  .Values.currencyService.name }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{
  .Values.emailService.name }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.loadGenerator.name
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.paymentService.name
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.productCatalogService.name
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.recommendationService.name
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.shippingService.name
  }} {{- else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }}
  to: - operation: ports: - "4317" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.emailService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.emailService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.emailService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.emailService.name
  }} spec: selector: matchLabels: app: {{ .Values.emailService.name }} template: metadata:
  labels: app: {{ .Values.emailService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.emailService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.emailService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 8080 env: - name: PORT value:
  "8080" {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR
  value: "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME
  value: "{{ .Values.emailService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} readinessProbe: periodSeconds:
  5 grpc: port: 8080 livenessProbe: periodSeconds: 5 grpc: port: 8080 resources: {{-
  toYaml .Values.emailService.resources | nindent 10 }} --- apiVersion: v1 kind: Service
  metadata: name: {{ .Values.emailService.name }} namespace: {{ .Release.Namespace
  }} labels: app: {{ .Values.emailService.name }} spec: type: ClusterIP selector:
  app: {{ .Values.emailService.name }} ports: - name: grpc port: 5000 targetPort:
  8080 {{- if .Values.networkPolicies.create }} --- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: {{ .Values.emailService.name }} namespace: {{
  .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.emailService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.checkoutService.name }} ports: - port: 8080 protocol: TCP egress:
  - {} {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.emailService.name }} namespace: {{ .Release.Namespace
  }} spec: workloadSelector: labels: app: {{ .Values.emailService.name }} egress:
  - hosts: - istio-system/* {{- if .Values.opentelemetryCollector.create }} - ./{{
  .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.emailService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.emailService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.checkoutService.name }}
  {{- else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to:
  - operation: paths: - /hipstershop.EmailService/SendOrderConfirmation'
- '}}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.emailService.name }} namespace: {{ .Release.Namespace }} spec:
  selector: matchLabels: app: {{ .Values.emailService.name }} rules: - from: - source:
  principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.checkoutService.name }} {{- else }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.EmailService/SendOrderConfirmation
  methods: - POST ports: - "8080" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.checkoutService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.checkoutService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.checkoutService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.checkoutService.name
  }} spec: selector: matchLabels: app: {{ .Values.checkoutService.name }} template:
  metadata: labels: app: {{ .Values.checkoutService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.checkoutService.name }} {{- else }} serviceAccountName:
  default {{- end }} {{- if .Values.securityContext.enable }} securityContext: fsGroup:
  1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 {{- if .Values.seccompProfile.enable
  }} seccompProfile: type: {{ .Values.seccompProfile.type }} {{- end }} {{- end }}
  containers: - name: server securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: {{ .Values.images.repository
  }}/{{ .Values.checkoutService.name }}:{{ .Values.images.tag | default .Chart.AppVersion
  }} ports: - containerPort: 5050 readinessProbe: grpc: port: 5050 livenessProbe:
  grpc: port: 5050 env: - name: PORT value: "5050" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "{{ .Values.productCatalogService.name }}:3550" - name: SHIPPING_SERVICE_ADDR
  value: "{{ .Values.shippingService.name }}:50051" - name: PAYMENT_SERVICE_ADDR value:
  "{{ .Values.paymentService.name }}:50051" - name: EMAIL_SERVICE_ADDR value: "{{
  .Values.emailService.name }}:5000" - name: CURRENCY_SERVICE_ADDR value: "{{ .Values.currencyService.name
  }}:7000" - name: CART_SERVICE_ADDR value: "{{ .Values.cartService.name }}:7070"
  {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR value:
  "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME value:
  "{{ .Values.checkoutService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if .Values.googleCloudOperations.profiler
  }} - name: ENABLE_PROFILER value: "1" {{- end }} resources: {{- toYaml .Values.checkoutService.resources
  | nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.checkoutService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.checkoutService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.checkoutService.name }} ports:
  - name: grpc port: 5050 targetPort: 5050 {{- if .Values.networkPolicies.create }}
  --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.checkoutService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.checkoutService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} ports: - port: 5050 protocol: TCP egress: - {}
  {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.checkoutService.name }} namespace: {{ .Release.Namespace
  }} spec: workloadSelector: labels: app: {{ .Values.checkoutService.name }} egress:
  - hosts: - istio-system/* - ./{{ .Values.cartService.name }}.{{ .Release.Namespace
  }}.svc.cluster.local - ./{{ .Values.currencyService.name }}.{{ .Release.Namespace
  }}.svc.cluster.local - ./{{ .Values.emailService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.paymentService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.productCatalogService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.shippingService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- if'
- '--- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{ .Values.checkoutService.name
  }} namespace: {{ .Release.Namespace }} spec: workloadSelector: labels: app: {{ .Values.checkoutService.name
  }} egress: - hosts: - istio-system/* - ./{{ .Values.cartService.name }}.{{ .Release.Namespace
  }}.svc.cluster.local - ./{{ .Values.currencyService.name }}.{{ .Release.Namespace
  }}.svc.cluster.local - ./{{ .Values.emailService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.paymentService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.productCatalogService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  - ./{{ .Values.shippingService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.checkoutService.name }} namespace: {{ .Release.Namespace }} spec:
  selector: matchLabels: app: {{ .Values.checkoutService.name }} rules: - from: -
  source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.frontend.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.CheckoutService/PlaceOrder
  methods: - POST ports: - "5050" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.recommendationService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.recommendationService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.recommendationService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.recommendationService.name
  }} spec: selector: matchLabels: app: {{ .Values.recommendationService.name }} template:
  metadata: labels: app: {{ .Values.recommendationService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.recommendationService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} containers: {{- end }} - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.recommendationService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 8080 readinessProbe: periodSeconds:
  5 grpc: port: 8080 livenessProbe: periodSeconds: 5 grpc: port: 8080 env: - name:
  PORT value: "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "{{ .Values.productCatalogService.name
  }}:3550" {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR
  value: "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME
  value: "{{ .Values.recommendationService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} resources: {{- toYaml .Values.recommendationService.resources
  | nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.recommendationService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.recommendationService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.recommendationService.name }}
  ports: - name: grpc port: 8080 targetPort: 8080 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.recommendationService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.recommendationService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} ports: - port: 8080 protocol: TCP egress: - {}
  {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.recommendationService.name }} namespace:
  {{ .Release.Namespace }} spec: workloadSelector: labels: app: {{ .Values.recommendationService.name
  }} egress: - hosts: - istio-system/* - ./{{ .Values.productCatalogService.name }}.{{
  .Release.Namespace }}.svc.cluster.local {{- if .Values.opentelemetryCollector.create
  }} - ./{{ .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.recommendationService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.recommendationService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name }} {{- else
  }}'
- '.Values.productCatalogService.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.recommendationService.name }} namespace: {{ .Release.Namespace
  }} spec: selector: matchLabels: app: {{ .Values.recommendationService.name }} rules:
  - from: - source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.frontend.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.RecommendationService/ListRecommendations
  methods: - POST ports: - "8080" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.networkPolicies.create
  }} apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: deny-all
  namespace: {{ .Release.Namespace }} spec: podSelector: {} policyTypes: - Ingress
  - Egress {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: deny-all namespace:
  {{ .Release.Namespace }} spec: {} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.frontend.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.frontend.name }} namespace: {{.Release.Namespace}} {{-
  if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.frontend.name }}
  namespace: {{ .Release.Namespace }} labels: app: {{ .Values.frontend.name }} spec:
  selector: matchLabels: app: {{ .Values.frontend.name }} template: metadata: labels:
  app: {{ .Values.frontend.name }} annotations: sidecar.istio.io/rewriteAppHTTPProbers:
  "true" spec: {{- if .Values.serviceAccounts.create }} serviceAccountName: {{ .Values.frontend.name
  }} {{- else }} serviceAccountName: default {{- end }} {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.frontend.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 8080 readinessProbe: initialDelaySeconds:
  10 httpGet: path: "/_healthz" port: 8080 httpHeaders: - name: "Cookie" value: "shop_session-id=x-readiness-probe"
  livenessProbe: initialDelaySeconds: 10 httpGet: path: "/_healthz" port: 8080 httpHeaders:
  - name: "Cookie" value: "shop_session-id=x-liveness-probe" env: - name: PORT value:
  "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "{{ .Values.productCatalogService.name
  }}:3550" - name: CURRENCY_SERVICE_ADDR value: "{{ .Values.currencyService.name }}:7000"
  - name: CART_SERVICE_ADDR value: "{{ .Values.cartService.name }}:7070" - name: RECOMMENDATION_SERVICE_ADDR
  value: "{{ .Values.recommendationService.name }}:8080" - name: SHIPPING_SERVICE_ADDR
  value: "{{ .Values.shippingService.name }}:50051" - name: CHECKOUT_SERVICE_ADDR
  value: "{{ .Values.checkoutService.name }}:5050" - name: AD_SERVICE_ADDR value:
  "{{ .Values.adService.name }}:9555" - name: SHOPPING_ASSISTANT_SERVICE_ADDR value:
  "{{ .Values.shoppingAssistantService.name }}:80" - name: ENV_PLATFORM value: {{
  .Values.frontend.platform | quote }} {{- if .Values.opentelemetryCollector.create
  }} - name: COLLECTOR_SERVICE_ADDR value: "{{ .Values.opentelemetryCollector.name
  }}:4317" - name: OTEL_SERVICE_NAME value: "{{ .Values.frontend.name }}" {{- end
  }} {{- if .Values.googleCloudOperations.tracing }} - name: ENABLE_TRACING value:
  "1" {{- end }} {{- if .Values.googleCloudOperations.profiler }} - name: ENABLE_PROFILER
  value: "1" {{- end }} - name: CYMBAL_BRANDING value: {{ .Values.frontend.cymbalBranding
  | quote }} - name: ENABLE_ASSISTANT value: {{ .Values.shoppingAssistantService.create
  | quote }} - name: ENABLE_SINGLE_SHARED_SESSION value: {{ .Values.frontend.singleSharedSession
  | quote }} resources: {{- toYaml .Values.frontend.resources | nindent 12 }} ---
  apiVersion: v1 kind: Service metadata: name: {{ .Values.frontend.name }} namespace:
  {{ .Release.Namespace }} labels: app: {{ .Values.frontend.name }} spec: type: ClusterIP
  selector: app: {{ .Values.frontend.name }} ports: - name: http port: 80 targetPort:
  8080 {{- if .Values.frontend.externalService }} --- apiVersion: v1 kind: Service
  metadata: name: {{ .Values.frontend.name }}-external namespace: {{ .Release.Namespace
  }} spec: type: LoadBalancer selector: app: {{ .Values.frontend.name }} ports: -
  name: http port: 80 targetPort: 8080 {{- end }} {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata:'
- '}} spec: type: ClusterIP selector: app: {{ .Values.frontend.name }} ports: - name:
  http port: 80 targetPort: 8080 {{- if .Values.frontend.externalService }} --- apiVersion:
  v1 kind: Service metadata: name: {{ .Values.frontend.name }}-external namespace:
  {{ .Release.Namespace }} spec: type: LoadBalancer selector: app: {{ .Values.frontend.name
  }} ports: - name: http port: 80 targetPort: 8080 {{- end }} {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.frontend.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.frontend.name
  }} policyTypes: - Ingress - Egress ingress: {{- if .Values.frontend.externalService
  }} - {} {{- else }} - from: - podSelector: matchLabels: app: {{ .Values.loadGenerator.name
  }} {{- if .Values.frontend.virtualService.create }} - namespaceSelector: matchLabels:
  kubernetes.io/metadata.name: {{ .Values.frontend.virtualService.gateway.namespace
  }} podSelector: matchLabels: {{ .Values.frontend.virtualService.gateway.labelKey
  }}: {{ .Values.frontend.virtualService.gateway.labelValue }} {{- end }} ports: -
  port: 8080 protocol: TCP {{- end }} egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.frontend.name }} namespace: {{ .Release.Namespace }} spec: workloadSelector:
  labels: app: {{ .Values.frontend.name }} egress: - hosts: - istio-system/* - ./{{
  .Values.adService.name }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.cartService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.checkoutService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.currencyService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.productCatalogService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.recommendationService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local - ./{{ .Values.shippingService.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- if .Values.opentelemetryCollector.create
  }} - ./{{ .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.frontend.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.frontend.name
  }} rules: {{- if .Values.frontend.externalService }} - to: {{- else }} - from: -
  source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.loadGenerator.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} {{- if .Values.frontend.virtualService.create
  }} - cluster.local/ns/{{ .Values.frontend.virtualService.gateway.namespace }}/sa/{{
  .Values.frontend.virtualService.gateway.name }} {{- end }} to: {{- end }} - operation:
  methods: - GET - POST ports: - "8080" {{- end }} {{- if .Values.frontend.virtualService.create
  }} --- apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata: name:
  {{ .Values.frontend.name }} namespace: {{ .Release.Namespace }} spec: {{- with .Values.frontend.virtualService.hosts
  }} hosts: {{- toYaml . | nindent 2 }} {{- end }} gateways: - {{ .Values.frontend.virtualService.gateway.namespace
  }}/{{ .Values.frontend.virtualService.gateway.name }} http: - route: - destination:
  host: {{ .Values.frontend.name }} port: number: 80 {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.paymentService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.paymentService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.paymentService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.paymentService.name
  }} spec: selector: matchLabels: app: {{ .Values.paymentService.name }} template:
  metadata: labels: app: {{ .Values.paymentService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.paymentService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.paymentService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 50051 env: - name: PORT value:
  "50051" {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR
  value: "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME
  value: "{{ .Values.paymentService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} readinessProbe: grpc: port: 50051
  livenessProbe: grpc: port: 50051 resources: {{- toYaml .Values.paymentService.resources
  | nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.paymentService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.paymentService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.paymentService.name }} ports:
  - name: grpc port: 50051 targetPort: 50051 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.paymentService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.paymentService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.checkoutService.name }} ports: - port: 50051 protocol: TCP egress:
  - {} {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.paymentService.name }} namespace: {{ .Release.Namespace
  }} spec: workloadSelector: labels: app: {{ .Values.paymentService.name }} egress:
  - hosts: - istio-system/* {{- if .Values.opentelemetryCollector.create }} - ./{{
  .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.paymentService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.paymentService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.checkoutService.name }}
  {{- else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to:
  - operation: paths: - /hipstershop.PaymentService/Charge methods: - POST ports:'
- '{{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion: security.istio.io/v1beta1
  kind: AuthorizationPolicy metadata: name: {{ .Values.paymentService.name }} namespace:
  {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.paymentService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.checkoutService.name }}
  {{- else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to:
  - operation: paths: - /hipstershop.PaymentService/Charge methods: - POST ports:
  - "50051" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.productCatalogService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.productCatalogService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.productCatalogService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.productCatalogService.name
  }} spec: selector: matchLabels: app: {{ .Values.productCatalogService.name }} template:
  metadata: labels: app: {{ .Values.productCatalogService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.productCatalogService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.productCatalogService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 3550 env: - name: PORT value:
  "3550" {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR
  value: "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME
  value: "{{ .Values.productCatalogService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} - name: EXTRA_LATENCY value: {{
  .Values.productCatalogService.extraLatency }} readinessProbe: grpc: port: 3550 livenessProbe:
  grpc: port: 3550 resources: {{- toYaml .Values.productCatalogService.resources |
  nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.productCatalogService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.productCatalogService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.productCatalogService.name }}
  ports: - name: grpc port: 3550 targetPort: 3550 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.productCatalogService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.productCatalogService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} - podSelector: matchLabels: app: {{ .Values.checkoutService.name
  }} - podSelector: matchLabels: app: {{ .Values.recommendationService.name }} ports:
  - port: 3550 protocol: TCP egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.productCatalogService.name }} namespace: {{ .Release.Namespace }} spec:
  workloadSelector: labels: app: {{ .Values.productCatalogService.name }} egress:
  - hosts: - istio-system/* {{- if .Values.opentelemetryCollector.create }} - ./{{
  .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.productCatalogService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.productCatalogService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name'
- '{{ .Values.productCatalogService.name }} egress: - hosts: - istio-system/* {{-
  if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.productCatalogService.name }} namespace: {{ .Release.Namespace
  }} spec: selector: matchLabels: app: {{ .Values.productCatalogService.name }} rules:
  - from: - source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.frontend.name }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.checkoutService.name }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.recommendationService.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.ProductCatalogService/GetProduct
  - /hipstershop.ProductCatalogService/ListProducts methods: - POST ports: - "3550"
  {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.cartService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.cartService.name }} namespace: {{.Release.Namespace}}
  {{- with .Values.serviceAccounts.annotations }} annotations: {{- toYaml . | nindent
  4 }} {{- end }} --- {{- end }} apiVersion: apps/v1 kind: Deployment metadata: name:
  {{ .Values.cartService.name }} namespace: {{ .Release.Namespace }} labels: app:
  {{ .Values.cartService.name }} spec: selector: matchLabels: app: {{ .Values.cartService.name
  }} template: metadata: {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable
  }} annotations: sidecar.istio.io/userVolumeMount: ''[{"name": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}", "mountPath": "/etc/certs", "readonly": true}]'' sidecar.istio.io/userVolume:
  ''[{"name": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}", "secret":
  {"secretName": "{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}"}}]''
  proxy.istio.io/config: ''{"holdApplicationUntilProxyStarts": true}'' {{- end }}
  labels: app: {{ .Values.cartService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.cartService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- end }} {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{
  .Values.seccompProfile.type }} {{- end }} containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: {{ .Values.images.repository }}/{{ .Values.cartService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 7070 env: {{- if eq .Values.cartDatabase.type
  "spanner" }} - name: SPANNER_CONNECTION_STRING {{- else }} - name: REDIS_ADDR {{-
  end }} value: {{ .Values.cartDatabase.connectionString | quote }} resources: {{-
  toYaml .Values.cartService.resources | nindent 10 }} readinessProbe: initialDelaySeconds:
  15 grpc: port: 7070 livenessProbe: initialDelaySeconds: 15 periodSeconds: 10 grpc:
  port: 7070 --- apiVersion: v1 kind: Service metadata: name: {{ .Values.cartService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.cartService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.cartService.name }} ports: -
  name: grpc port: 7070 targetPort: 7070 {{- if .Values.networkPolicies.create }}
  --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.cartService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.cartService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} - podSelector: matchLabels: app: {{ .Values.checkoutService.name
  }} ports: - port: 7070 protocol: TCP egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.cartService.name }} namespace: {{ .Release.Namespace }} spec: workloadSelector:
  labels: app: {{ .Values.cartService.name }} egress: - hosts: - istio-system/* {{-
  if eq .Values.cartDatabase.type "redis" }} {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable
  }} - ./{{ .Values.cartDatabase.externalRedisTlsOrigination.name }}.{{ .Release.Namespace
  }} {{- else }} - ./{{ .Values.cartDatabase.inClusterRedis.name }}.{{ .Release.Namespace
  }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.opentelemetryCollector.create
  }} - ./{{ .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.cartService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app:'
- '}} {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable }} - ./{{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}.{{ .Release.Namespace }} {{- else }} - ./{{ .Values.cartDatabase.inClusterRedis.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.opentelemetryCollector.create
  }} - ./{{ .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.cartService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.cartService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.checkoutService.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.CartService/AddItem
  - /hipstershop.CartService/GetCart - /hipstershop.CartService/EmptyCart methods:
  - POST ports: - "7070" {{- end }} {{- if .Values.cartDatabase.inClusterRedis.create
  }} --- {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.cartDatabase.inClusterRedis.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.cartDatabase.inClusterRedis.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} template: metadata: labels: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} spec: {{- if .Values.serviceAccounts.create }} serviceAccountName: {{ .Values.cartDatabase.inClusterRedis.name
  }} {{- else }} serviceAccountName: default {{- end }} {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: redis securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true {{-
  if .Values.cartDatabase.inClusterRedis.publicRepository }} image: redis:alpine@sha256:02419de7eddf55aa5bcf49efb74e88fa8d931b4d77c07eff8a6b2144472b6952
  {{- else }} image: {{ .Values.images.repository }}/redis:alpine {{- end }} ports:
  - containerPort: 6379 readinessProbe: periodSeconds: 5 tcpSocket: port: 6379 livenessProbe:
  periodSeconds: 5 tcpSocket: port: 6379 volumeMounts: - mountPath: /data name: redis-data
  resources: limits: memory: 256Mi cpu: 125m requests: cpu: 70m memory: 200Mi volumes:
  - name: redis-data emptyDir: {} --- apiVersion: v1 kind: Service metadata: name:
  {{ .Values.cartDatabase.inClusterRedis.name }} namespace: {{ .Release.Namespace
  }} spec: type: ClusterIP selector: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} ports: - name: tcp-redis port: 6379 targetPort: 6379 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.cartDatabase.inClusterRedis.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.cartService.name }} ports: - port: 6379 protocol: TCP egress: -
  {} {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.cartDatabase.inClusterRedis.name }} namespace:
  {{ .Release.Namespace }} spec: workloadSelector: labels: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} egress: - hosts: - istio-system/* {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.cartDatabase.inClusterRedis.name }} namespace: {{ .Release.Namespace
  }} spec: selector: matchLabels: app: {{ .Values.cartDatabase.inClusterRedis.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.cartService.name }} {{-
  else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to: -
  operation: ports: - "6379" {{- end }} {{- end }} {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable
  }} --- apiVersion: v1 data: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}.pem: {{ .Values.cartDatabase.externalRedisTlsOrigination.certificate | b64enc
  | quote }} kind: Secret metadata: name: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }} namespace: {{'
- '- from: - source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.cartService.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: ports: - "6379" {{-
  end }} {{- end }} {{- if .Values.cartDatabase.externalRedisTlsOrigination.enable
  }} --- apiVersion: v1 data: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}.pem: {{ .Values.cartDatabase.externalRedisTlsOrigination.certificate | b64enc
  | quote }} kind: Secret metadata: name: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }} namespace: {{ .Release.Namespace }} --- apiVersion: networking.istio.io/v1beta1
  kind: DestinationRule metadata: name: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }} namespace: {{ .Release.Namespace }} spec: exportTo: - ''.'' host: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}.{{ .Release.Namespace }} trafficPolicy: tls: mode: SIMPLE caCertificates: /etc/certs/{{
  .Values.cartDatabase.externalRedisTlsOrigination.name }}.pem --- apiVersion: networking.istio.io/v1beta1
  kind: ServiceEntry metadata: name: {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }} namespace: {{ .Release.Namespace }} spec: hosts: - {{ .Values.cartDatabase.externalRedisTlsOrigination.name
  }}.{{ .Release.Namespace }} addresses: - {{ .Values.cartDatabase.externalRedisTlsOrigination.endpointAddress
  }}/32 endpoints: - address: {{ .Values.cartDatabase.externalRedisTlsOrigination.endpointAddress
  }} location: MESH_EXTERNAL resolution: STATIC ports: - number: {{ .Values.cartDatabase.externalRedisTlsOrigination.endpointPort
  }} name: tcp-redis protocol: TCP {{- end }} {{- end }}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.loadGenerator.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.loadGenerator.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.loadGenerator.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.loadGenerator.name
  }} spec: selector: matchLabels: app: {{ .Values.loadGenerator.name }} replicas:
  1 template: metadata: labels: app: {{ .Values.loadGenerator.name }} annotations:
  sidecar.istio.io/rewriteAppHTTPProbers: "true" spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.loadGenerator.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 restartPolicy: Always {{- if
  .Values.securityContext.enable }} securityContext: fsGroup: 1000 runAsGroup: 1000
  runAsNonRoot: true runAsUser: 1000 {{- if .Values.seccompProfile.enable }} seccompProfile:
  type: {{ .Values.seccompProfile.type }} {{- end }} {{- end }} {{- if .Values.loadGenerator.checkFrontendInitContainer
  }} initContainers: - command: - /bin/sh - -exc - | MAX_RETRIES=12 RETRY_INTERVAL=10
  for i in $(seq 1 $MAX_RETRIES); do echo "Attempt $i: Pinging frontend: ${FRONTEND_ADDR}..."
  STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk ''/^ HTTP/{print
  $2}'') if [ $STATUSCODE -eq 200 ]; then echo "Frontend is reachable." exit 0 fi
  echo "Error: Could not reach frontend - Status code: ${STATUSCODE}" sleep $RETRY_INTERVAL
  done echo "Failed to reach frontend after $MAX_RETRIES attempts." exit 1 name: frontend-check
  securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged:
  false readOnlyRootFilesystem: true image: busybox:latest@sha256:37f7b378a29ceb4c551b1b5582e27747b855bbfaa73fa11914fe0df028dc581f
  env: - name: FRONTEND_ADDR value: "{{ .Values.frontend.name }}:80" {{- end }} containers:
  - name: main securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: {{ .Values.images.repository
  }}/{{ .Values.loadGenerator.name }}:{{ .Values.images.tag | default .Chart.AppVersion
  }} env: - name: FRONTEND_ADDR value: "{{ .Values.frontend.name }}:80" - name: USERS
  value: "10" - name: RATE value: "1" resources: {{- toYaml .Values.loadGenerator.resources
  | nindent 10 }} {{- if .Values.networkPolicies.create }} --- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: {{ .Values.loadGenerator.name }} namespace:
  {{ .Release.Namespace }} labels: app: {{ .Values.loadGenerator.name }} spec: podSelector:
  matchLabels: app: {{ .Values.loadGenerator.name }} policyTypes: - Egress egress:
  - {} {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.loadGenerator.name }} namespace: {{ .Release.Namespace
  }} spec: workloadSelector: labels: app: {{ .Values.loadGenerator.name }} egress:
  - hosts: - istio-system/* - ./{{ .Values.frontend.name }}.{{ .Release.Namespace
  }}.svc.cluster.local {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- end }}'
- '- ./{{ .Values.frontend.name }}.{{ .Release.Namespace }}.svc.cluster.local {{-
  if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.currencyService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.currencyService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.currencyService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.currencyService.name
  }} spec: selector: matchLabels: app: {{ .Values.currencyService.name }} template:
  metadata: labels: app: {{ .Values.currencyService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.currencyService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.currencyService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - name: grpc containerPort: 7000 env: - name:
  PORT value: "7000" {{- if .Values.opentelemetryCollector.create }} - name: COLLECTOR_SERVICE_ADDR
  value: "{{ .Values.opentelemetryCollector.name }}:4317" - name: OTEL_SERVICE_NAME
  value: "{{ .Values.currencyService.name }}" {{- end }} {{- if .Values.googleCloudOperations.tracing
  }} - name: ENABLE_TRACING value: "1" {{- end }} {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} readinessProbe: grpc: port: 7000
  livenessProbe: grpc: port: 7000 resources: {{- toYaml .Values.currencyService.resources
  | nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.currencyService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.currencyService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.currencyService.name }} ports:
  - name: grpc port: 7000 targetPort: 7000 {{- if .Values.networkPolicies.create }}
  --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.currencyService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.currencyService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} - podSelector: matchLabels: app: {{ .Values.checkoutService.name
  }} ports: - port: 7000 protocol: TCP egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.currencyService.name }} namespace: {{ .Release.Namespace }} spec: workloadSelector:
  labels: app: {{ .Values.currencyService.name }} egress: - hosts: - istio-system/*
  {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.currencyService.name }} namespace: {{ .Release.Namespace }} spec:
  selector: matchLabels: app: {{ .Values.currencyService.name }} rules: - from: -
  source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.frontend.name }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.checkoutService.name }} {{- else }} - cluster.local/ns/{{'
- '- ./{{ .Values.opentelemetryCollector.name }}.{{ .Release.Namespace }}.svc.cluster.local
  {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create }} --- apiVersion:
  security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: {{ .Values.currencyService.name
  }} namespace: {{ .Release.Namespace }} spec: selector: matchLabels: app: {{ .Values.currencyService.name
  }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create }}
  - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.checkoutService.name }} {{- else }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.CurrencyService/Convert
  - /hipstershop.CurrencyService/GetSupportedCurrencies methods: - POST ports: - "7000"
  {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.shippingService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.shippingService.name }} namespace: {{.Release.Namespace}}
  {{- if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.shippingService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.shippingService.name
  }} spec: selector: matchLabels: app: {{ .Values.shippingService.name }} template:
  metadata: labels: app: {{ .Values.shippingService.name }} spec: {{- if .Values.serviceAccounts.create
  }} serviceAccountName: {{ .Values.shippingService.name }} {{- else }} serviceAccountName:
  default {{- end }} {{- if .Values.securityContext.enable }} securityContext: fsGroup:
  1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 {{- if .Values.seccompProfile.enable
  }} seccompProfile: type: {{ .Values.seccompProfile.type }} {{- end }} {{- end }}
  containers: - name: server securityContext: allowPrivilegeEscalation: false capabilities:
  drop: - ALL privileged: false readOnlyRootFilesystem: true image: {{ .Values.images.repository
  }}/{{ .Values.shippingService.name }}:{{ .Values.images.tag | default .Chart.AppVersion
  }} ports: - containerPort: 50051 env: - name: PORT value: "50051" {{- if not .Values.googleCloudOperations.profiler
  }} - name: DISABLE_PROFILER value: "1" {{- end }} readinessProbe: periodSeconds:
  5 grpc: port: 50051 livenessProbe: grpc: port: 50051 resources: {{- toYaml .Values.shippingService.resources
  | nindent 10 }} --- apiVersion: v1 kind: Service metadata: name: {{ .Values.shippingService.name
  }} namespace: {{ .Release.Namespace }} labels: app: {{ .Values.shippingService.name
  }} spec: type: ClusterIP selector: app: {{ .Values.shippingService.name }} ports:
  - name: grpc port: 50051 targetPort: 50051 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.shippingService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.shippingService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} - podSelector: matchLabels: app: {{ .Values.checkoutService.name
  }} ports: - port: 50051 protocol: TCP egress: - {} {{- end }} {{- if .Values.sidecars.create
  }} --- apiVersion: networking.istio.io/v1beta1 kind: Sidecar metadata: name: {{
  .Values.shippingService.name }} namespace: {{ .Release.Namespace }} spec: workloadSelector:
  labels: app: {{ .Values.shippingService.name }} egress: - hosts: - istio-system/*
  {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.shippingService.name }} namespace: {{ .Release.Namespace }} spec:
  selector: matchLabels: app: {{ .Values.shippingService.name }} rules: - from: -
  source: principals: {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{
  .Release.Namespace }}/sa/{{ .Values.frontend.name }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.checkoutService.name }} {{- else }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.ShippingService/GetQuote
  - /hipstershop.ShippingService/ShipOrder methods: - POST ports: - "50051" {{- end
  }} {{- end }}'
- '.Values.shippingService.name }} rules: - from: - source: principals: {{- if .Values.serviceAccounts.create
  }} - cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name }} -
  cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.checkoutService.name }}
  {{- else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to:
  - operation: paths: - /hipstershop.ShippingService/GetQuote - /hipstershop.ShippingService/ShipOrder
  methods: - POST ports: - "50051" {{- end }} {{- end }}'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. {{- if .Values.adService.create
  }} {{- if .Values.serviceAccounts.create }} apiVersion: v1 kind: ServiceAccount
  metadata: name: {{ .Values.adService.name }} namespace: {{.Release.Namespace}} {{-
  if not .Values.serviceAccounts.annotationsOnlyForCartservice }} {{- with .Values.serviceAccounts.annotations
  }} annotations: {{- toYaml . | nindent 4 }} {{- end }} {{- end }} --- {{- end }}
  apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.adService.name }}
  namespace: {{ .Release.Namespace }} labels: app: {{ .Values.adService.name }} spec:
  selector: matchLabels: app: {{ .Values.adService.name }} template: metadata: labels:
  app: {{ .Values.adService.name }} spec: {{- if .Values.serviceAccounts.create }}
  serviceAccountName: {{ .Values.adService.name }} {{- else }} serviceAccountName:
  default {{- end }} terminationGracePeriodSeconds: 5 {{- if .Values.securityContext.enable
  }} securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 {{- if .Values.seccompProfile.enable }} seccompProfile: type: {{ .Values.seccompProfile.type
  }} {{- end }} {{- end }} containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  {{ .Values.images.repository }}/{{ .Values.adService.name }}:{{ .Values.images.tag
  | default .Chart.AppVersion }} ports: - containerPort: 9555 env: - name: PORT value:
  "9555" resources: {{- toYaml .Values.adService.resources | nindent 10 }} readinessProbe:
  initialDelaySeconds: 20 periodSeconds: 15 grpc: port: 9555 livenessProbe: initialDelaySeconds:
  20 periodSeconds: 15 grpc: port: 9555 --- apiVersion: v1 kind: Service metadata:
  name: {{ .Values.adService.name }} namespace: {{ .Release.Namespace }} labels: app:
  {{ .Values.adService.name }} spec: type: ClusterIP selector: app: {{ .Values.adService.name
  }} ports: - name: grpc port: 9555 targetPort: 9555 {{- if .Values.networkPolicies.create
  }} --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: {{ .Values.adService.name
  }} namespace: {{ .Release.Namespace }} spec: podSelector: matchLabels: app: {{ .Values.adService.name
  }} policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: {{ .Values.frontend.name }} ports: - port: 9555 protocol: TCP egress: - {}
  {{- end }} {{- if .Values.sidecars.create }} --- apiVersion: networking.istio.io/v1beta1
  kind: Sidecar metadata: name: {{ .Values.adService.name }} namespace: {{ .Release.Namespace
  }} spec: workloadSelector: labels: app: {{ .Values.adService.name }} egress: - hosts:
  - istio-system/* {{- if .Values.opentelemetryCollector.create }} - ./{{ .Values.opentelemetryCollector.name
  }}.{{ .Release.Namespace }}.svc.cluster.local {{- end }} {{- end }} {{- if .Values.authorizationPolicies.create
  }} --- apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata:
  name: {{ .Values.adService.name }} namespace: {{ .Release.Namespace }} spec: selector:
  matchLabels: app: {{ .Values.adService.name }} rules: - from: - source: principals:
  {{- if .Values.serviceAccounts.create }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/{{ .Values.frontend.name }} {{- else }} - cluster.local/ns/{{ .Release.Namespace
  }}/sa/default {{- end }} to: - operation: paths: - /hipstershop.AdService/GetAds
  methods: - POST ports: - "9555" {{- end }} {{- end }}'
- '- cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Values.frontend.name }} {{-
  else }} - cluster.local/ns/{{ .Release.Namespace }}/sa/default {{- end }} to: -
  operation: paths: - /hipstershop.AdService/GetAds methods: - POST ports: - "9555"
  {{- end }} {{- end }}'
- '# Contributor Code of Conduct As contributors and maintainers of this project,
  and in the interest of fostering an open and welcoming community, we pledge to respect
  all people who contribute through reporting issues, posting feature requests, updating
  documentation, submitting pull requests or patches, and other activities. We are
  committed to making participation in this project a harassment-free experience for
  everyone, regardless of level of experience, gender, gender identity and expression,
  sexual orientation, disability, personal appearance, body size, race, ethnicity,
  age, religion, or nationality. Examples of unacceptable behavior by participants
  include: * The use of sexualized language or imagery * Personal attacks * Trolling
  or insulting/derogatory comments * Public or private harassment * Publishing other''s
  private information, such as physical or electronic addresses, without explicit
  permission * Other unethical or unprofessional conduct. Project maintainers have
  the right and responsibility to remove, edit, or reject comments, commits, code,
  wiki edits, issues, and other contributions that are not aligned to this Code of
  Conduct. By adopting this Code of Conduct, project maintainers commit themselves
  to fairly and consistently applying these principles to every aspect of managing
  this project. Project maintainers who do not follow or enforce the Code of Conduct
  may be permanently removed from the project team. This code of conduct applies both
  within project spaces and in public spaces when an individual is representing the
  project or its community. Instances of abusive, harassing, or otherwise unacceptable
  behavior may be reported by opening an issue or contacting one or more of the project
  maintainers. This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org),
  version 1.2.0, available at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # This file configures
  a GitHub Bot called "License Header Lint GCF": https://github.com/apps/license-header-lint-gcf
  # The bot runs a GitHub check called "header-check" (inside pull-requests) that
  warns us about invalid/missing license headers. # The schema for this configutation
  file is documented at https://github.com/googleapis/repo-automation-bots/tree/main/packages/header-checker-lint#header-checker-lint.
  allowedCopyrightHolders: - ''Google LLC'' allowedLicenses: - ''Apache-2.0'' # If
  you want to ignore certain files/folders, use ignoreFiles. # ignoreFiles: # - ''**/requirements.txt''
  # If you want to ignore checking the license year, use ignoreLicenseYear. # ignoreLicenseYear:
  true # Useful when migrating in code licensed at previous years. sourceFileExtensions:
  - ''cs'' - ''css'' - ''Dockerfile'' - ''dockerignore'' - ''gitignore'' - ''go''
  - ''html'' - ''java'' - ''js'' - ''proto'' - ''py'' - ''sh'' - ''tf'' - ''yaml''
  - ''yml'''
- '# Copyright 2021 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License.'
- '### Background <!-- What was happening before this PR, and the problem(s) it solves
  --> ### Fixes <!-- Link the issue(s) this PR fixes--> ### Change Summary <!-- Short
  summary of the changes submitted --> ### Additional Notes <!-- Any remaining concerns
  --> ### Testing Procedure <!-- If applicable, write how to test for reviewers-->
  ### Related PRs or Issues <!-- Dependent PRs, or any relevant linked issues -->'
- '# How to Contribute Thank you so much for your interest in contributing to Online
  Boutique. Before contributing, you must: * Sign the [Contributor License Agreement
  (CLA)](#contributor-license-agreement). * Follow the [Google Open Source Community
  Guidelines](https://opensource.google.com/conduct/). * Follow the [Contribution
  Process](#contribution-process). ## Contributor License Agreement Contributions
  to Online Boutique must be accompanied by a Contributor License Agreement (CLA).
  You (or your employer) retain the copyright to your contribution. The CLA gives
  us permission to use and redistribute your contributions as part of the project.
  Head over to <https://cla.developers.google.com/> to see your current agreements
  on file or to sign a new one. You generally only need to submit a CLA once, so if
  you''ve already submitted one (even if it was for a different project), you probably
  don''t need to do it again. ## Contribution Process Here''s the process for making
  a change to this repository: 1. Review Online Boutique''s [purpose](/docs/purpose.md)
  and [product requirements](/docs/product-requirements.md). 1. If your proposed changes
  **do not align** with the purpose and product requirements of Online Boutique, you
  may be asked to instead maintain your own fork of this repository. 1. For **small
  changes** (such as a bug fixes or spelling corrections): 1. Fork this repository
  and submit a [pull request](https://help.github.com/articles/about-pull-requests/).
  1. Wait for a maintainer of this repository to review your change. 1. For **bigger
  changes**: 1. Create a [GitHub issue](https://github.com/GoogleCloudPlatform/microservices-demo/issues/new/choose)
  describing the change **before** working on the implementation. This is important
  to avoid potentially having to discard your development efforts. 1. Wait for a maintainer
  of this repository to review your GitHub issue. For significantly complex proposals,
  you may be asked to start a Google Doc to discuss design decisions. If you have
  any questions, please [create a GitHub issue](https://github.com/GoogleCloudPlatform/microservices-demo/issues/new/choose).'
- '# Security Policy To report a security issue, please use [g.co/vulnz](https://g.co/vulnz).
  The Google Security Team will respond within 5 working days of your report on g.co/vulnz.
  We use g.co/vulnz for our intake, and do coordination and disclosure here using
  GitHub Security Advisory to privately discuss and fix the issue.'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # https://github.com/googleapis/repo-automation-bots/tree/main/packages/auto-approve
  processes: - "PythonDependency" - "PythonSampleAppDependency" - "JavaDependency"
  - "JavaSampleAppDependency" - "GoDependency" - "NodeDependency" - "DockerDependency"'
- 'This folder contains the Terraform for some of the infrastructure used by the CICD
  (continuous integration and continuous delivery/continuous deployment) of this repository.
  ## Update this Terraform To make changes to this Terraform, follow these steps:
  1. Make sure you have access to the `online-boutique-ci` Google Cloud project. 1.
  Move into this folder: `cd .github/terraform` 1. Set the PROJECT_ID environment
  variable: `export PROJECT_ID=online-boutique-ci` 1. Prepare Terraform and download
  the necessary Terraform dependencies (such as the "hashicorp/google" Terraform provider):
  `terraform init` 1. Apply the Terraform: `terraform apply -var project_id=${PROJECT_ID}`
  * Ideally, you would see `Apply complete! Resources: 0 added, 0 changed, 0 destroyed.`
  in the output. 1. Make your desired changes to the Terraform code. 1. Apply the
  Terraform: `terraform apply -var project_id=${PROJECT_ID}` * This time, Terraform
  will prompt you confirm your changes before applying them.'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: cloud.google.com/v1
  kind: BackendConfig metadata: name: frontend-backend-config spec: securityPolicy:
  name: online-boutique-security-policy'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.gke.io/v1beta1
  kind: FrontendConfig metadata: name: frontend-frontend-config spec: sslPolicy: online-boutique-ssl-policy
  redirectToHttps: enabled: true responseCodeName: MOVED_PERMANENTLY_DEFAULT'
- '# cymbal-shops.retail.cymbal.dev manifests This directory contains extra deploy
  manifests for configuring Online Boutique solution on GKE for cymbal-shops.retail.cymbal.dev.
  _Note: before moving forward, the Online Boutique apps should already be deployed
  [on the online-boutique-release GKE cluster](/docs/releasing#10-deploy-releasekubernetes-manifestsyaml-to-our-online-boutique-release-gke-cluster)._
  ## Public static IP address Create the static public IP address: ``` STATIC_IP_NAME=online-boutique-ip
  # name hard-coded in: frontend-ingress.yaml gcloud compute addresses create $STATIC_IP_NAME
  --global ``` When ready to do so, you could grab this public IP address and update
  your DNS: ``` gcloud compute addresses describe $STATIC_IP_NAME \ --global \ --format
  "value(address)" ``` ## Cloud Armor Set up Cloud Armor: ``` SECURITY_POLICY_NAME=online-boutique-security-policy
  # Name hard-coded in: backendconfig.yaml gcloud compute security-policies create
  $SECURITY_POLICY_NAME \ --description "Block various attacks" gcloud compute security-policies
  rules create 1000 \ --security-policy $SECURITY_POLICY_NAME \ --expression "evaluatePreconfiguredExpr(''xss-stable'')"
  \ --action "deny-403" \ --description "XSS attack filtering" gcloud compute security-policies
  rules create 12345 \ --security-policy $SECURITY_POLICY_NAME \ --expression "evaluatePreconfiguredExpr(''cve-canary'')"
  \ --action "deny-403" \ --description "CVE-2021-44228 and CVE-2021-45046" gcloud
  compute security-policies update $SECURITY_POLICY_NAME \ --enable-layer7-ddos-defense
  gcloud compute security-policies update $SECURITY_POLICY_NAME \ --log-level=VERBOSE
  ``` ## SSL Policy Set up an SSL policy in order to later set up a redirect from
  HTTP to HTTPs: ``` SSL_POLICY_NAME=online-boutique-ssl-policy # Name hard-coded
  in: frontendconfig.yaml gcloud compute ssl-policies create $SSL_POLICY_NAME \ --profile
  COMPATIBLE \ --min-tls-version 1.0 ``` ## Deploy Kubernetes manifests Deploy the
  Kubernetes manifests in this current folder: ``` kubectl apply -f . ``` Wait for
  the `ManagedCertificate` to be provisioned. This usually takes about 30 minutes.
  ``` kubectl get managedcertificates ``` Remove the default `LoadBalancer` `Service`
  not used at this point: ``` kubectl delete service frontend-external ``` Remove
  the `loadgenerator` `Deployment` not used at this point: ``` kubectl delete deployment
  loadgenerator ```'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.gke.io/v1
  kind: ManagedCertificate metadata: name: online-boutique-certificate spec: domains:
  - cymbal-shops.retail.cymbal.dev'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: Ingress metadata: name: frontend-ingress annotations: kubernetes.io/ingress.global-static-ip-name:
  online-boutique-ip networking.gke.io/managed-certificates: online-boutique-certificate
  networking.gke.io/v1beta1.FrontendConfig: frontend-frontend-config spec: defaultBackend:
  service: name: frontend port: number: 80 rules: - http: paths: - path: /* pathType:
  ImplementationSpecific backend: service: name: frontend port: number: 80'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: v1 kind:
  Service metadata: name: frontend annotations: cloud.google.com/neg: ''{"ingress":
  true}'' cloud.google.com/backend-config: ''{"default": "frontend-backend-config"}''
  spec: type: ClusterIP selector: app: frontend ports: - name: http port: 80 targetPort:
  8080'
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: terraform-validate-ci
  on: push: branches: - main paths: - ''terraform/**'' - ''.github/workflows/terraform-validate-ci.yaml''
  pull_request: paths: - ''terraform/**'' - ''.github/workflows/terraform-validate-ci.yaml''
  jobs: terraform-validate-ci: runs-on: ubuntu-24.04 steps: - uses: actions/checkout@v4
  - uses: hashicorp/setup-terraform@v3 - name: terraform init & validate run: | cd
  terraform/ terraform init -backend=false terraform validate'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: helm-chart-ci on:
  push: branches: - main paths: - ''helm-chart/**'' - ''.github/workflows/helm-chart-ci.yaml''
  pull_request: paths: - ''helm-chart/**'' - ''.github/workflows/helm-chart-ci.yaml''
  jobs: helm-chart-ci: runs-on: ubuntu-24.04 steps: - uses: actions/checkout@v4 -
  name: helm lint run: | cd helm-chart/ helm lint --strict - name: helm template default
  run: | cd helm-chart/ helm template . > helm-template.yaml cat helm-template.yaml
  kustomize create --resources helm-template.yaml kustomize build . - name: helm template
  grpc health probes run: | # Test related to https://medium.com/google-cloud/b5bd26253a4c
  cd helm-chart/ SPANNER_CONNECTION_STRING=projects/PROJECT_ID/instances/SPANNER_INSTANCE_NAME/databases/SPANNER_DATABASE_NAME
  helm template . \ --set nativeGrpcHealthCheck=true \ -n onlineboutique \ > helm-template.yaml
  cat helm-template.yaml kustomize build . - name: helm template spanner run: | #
  Test related to https://medium.com/google-cloud/f7248e077339 cd helm-chart/ SPANNER_CONNECTION_STRING=projects/PROJECT_ID/instances/SPANNER_INSTANCE_NAME/databases/SPANNER_DATABASE_NAME
  SPANNER_DB_USER_GSA_ID=spanner-db-user@my-project.iam.gserviceaccount.com helm template
  . \ --set cartDatabase.inClusterRedis.create=false \ --set cartDatabase.type=spanner
  \ --set cartDatabase.connectionString=${SPANNER_CONNECTION_STRING} \ --set serviceAccounts.create=true
  \ --set serviceAccounts.annotationsOnlyForCartservice=true \ --set "serviceAccounts.annotations.iam\.gke\.io/gcp-service-account=${SPANNER_DB_USER_GSA_ID}"
  \ -n onlineboutique \ > helm-template.yaml cat helm-template.yaml kustomize build
  . - name: helm template asm run: | # Test related to https://medium.com/google-cloud/246119e46d53
  cd helm-chart/ helm template . \ --set networkPolicies.create=true \ --set sidecars.create=true
  \ --set serviceAccounts.create=true \ --set authorizationPolicies.create=true \
  --set frontend.externalService=false \ --set frontend.virtualService.create=true
  \ --set frontend.virtualService.gateway.name=asm-ingressgateway \ --set frontend.virtualService.gateway.namespace=asm-ingress
  \ --set frontend.virtualService.gateway.labelKey=asm \ --set frontend.virtualService.gateway.labelValue=ingressgateway
  \ -n onlineboutique \ > helm-template.yaml cat helm-template.yaml kustomize build
  . - name: helm template memorystore istio tls origination run: | # Test related
  to https://medium.com/google-cloud/64b71969318d cd helm-chart/ REDIS_IP=0.0.0.0
  REDIS_PORT=7378 REDIS_CERT=dsjfgkldsjflkdsjflksdajfkldsjkfljsdaklfjaskjfakdsjfaklsdjflskadjfklasjfkls
  helm template . \ --set cartDatabase.inClusterRedis.create=false \ --set cartDatabase.connectionString=${REDIS_IP}:${REDIS_PORT}
  \ --set cartDatabase.externalRedisTlsOrigination.enable=true \ --set cartDatabase.externalRedisTlsOrigination.certificate="${REDIS_CERT}"
  \ --set cartDatabase.externalRedisTlsOrigination.endpointAddress=${REDIS_IP} \ --set
  cartDatabase.externalRedisTlsOrigination.endpointPort=${REDIS_PORT} \ -n onlineboutique
  \ > helm-template.yaml cat helm-template.yaml kustomize build .'
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: "Continuous Integration
  - Pull Request" on: pull_request: branches: - main paths-ignore: - ''**/README.md''
  - ''kustomize/**'' - ''.github/workflows/kustomize-build-ci.yaml'' - ''terraform/**''
  - ''.github/workflows/terraform-validate-ci.yaml'' - ''helm-chart/**'' - ''.github/workflows/helm-chart-ci.yaml''
  # Ensure this workflow only runs for the most recent commit of a pull-request concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref
  }} cancel-in-progress: true jobs: code-tests: runs-on: [self-hosted, is-enabled]
  steps: - uses: actions/checkout@v4 - uses: actions/setup-dotnet@v4 env: DOTNET_INSTALL_DIR:
  "./.dotnet" with: dotnet-version: ''9.0'' - uses: actions/setup-go@v5 with: go-version:
  ''1.24'' - name: Go Unit Tests timeout-minutes: 10 run: | for GO_PACKAGE in "shippingservice"
  "productcatalogservice" "frontend/validator"; do echo "Testing $GO_PACKAGE..." pushd
  src/$GO_PACKAGE go test popd done - name: C# Unit Tests timeout-minutes: 10 run:
  | dotnet test src/cartservice/ deployment-tests: runs-on: [self-hosted, is-enabled]
  needs: code-tests strategy: matrix: profile: ["local-code"] fail-fast: true steps:
  - uses: actions/checkout@v4 with: ref: ${{github.event.pull_request.head.sha}} -
  name: Build + Deploy PR images to GKE timeout-minutes: 20 run: | NAMESPACE="pr${PR_NUMBER}"
  echo "::set-env name=NAMESPACE::$NAMESPACE" yes | gcloud auth configure-docker us-docker.pkg.dev
  gcloud container clusters get-credentials $PR_CLUSTER --region $REGION --project
  $PROJECT_ID cat <<EOF | kubectl apply -f - apiVersion: v1 kind: Namespace metadata:
  name: $NAMESPACE EOF echo Deploying application skaffold config set --global local-cluster
  false skaffold run --default-repo=us-docker.pkg.dev/$PROJECT_ID/refs/pull/$PR_NUMBER
  --tag=$PR_NUMBER --namespace=$NAMESPACE -p network-policies env: ACTIONS_ALLOW_UNSECURE_COMMANDS:
  true PR_NUMBER: ${{ github.event.pull_request.number }} PROJECT_ID: "online-boutique-ci"
  PR_CLUSTER: "prs-gke-cluster" REGION: "us-central1" - name: Wait For Pods timeout-minutes:
  20 run: | set -x kubectl config set-context --current --namespace=$NAMESPACE kubectl
  wait --for=condition=available --timeout=1000s deployment/redis-cart kubectl wait
  --for=condition=available --timeout=1000s deployment/adservice kubectl wait --for=condition=available
  --timeout=1000s deployment/cartservice kubectl wait --for=condition=available --timeout=1000s
  deployment/checkoutservice kubectl wait --for=condition=available --timeout=1000s
  deployment/currencyservice kubectl wait --for=condition=available --timeout=1000s
  deployment/emailservice kubectl wait --for=condition=available --timeout=1000s deployment/frontend
  kubectl wait --for=condition=available --timeout=1000s deployment/loadgenerator
  kubectl wait --for=condition=available --timeout=1000s deployment/paymentservice
  kubectl wait --for=condition=available --timeout=1000s deployment/productcatalogservice
  kubectl wait --for=condition=available --timeout=1000s deployment/recommendationservice
  kubectl wait --for=condition=available --timeout=1000s deployment/shippingservice
  - name: Query EXTERNAL_IP for staging timeout-minutes: 5 run: | set -x NAMESPACE="pr${PR_NUMBER}"
  get_externalIP() { kubectl get service frontend-external --namespace $NAMESPACE
  -o jsonpath=''{.status.loadBalancer.ingress[0].ip}'' } until [[ -n "$(get_externalIP)"
  ]]; do echo "Querying for external IP for frontend-external on namespace: $NAMESPACE{}"
  sleep 3 done EXTERNAL_IP=$(get_externalIP) echo "::set-env name=EXTERNAL_IP::$EXTERNAL_IP"
  env: ACTIONS_ALLOW_UNSECURE_COMMANDS: true PR_NUMBER: ${{ github.event.pull_request.number
  }} - name: Smoke Test timeout-minutes: 5 run: | set -x # start fresh loadgenerator
  pod kubectl delete pod -l app=loadgenerator # wait for requests to come in REQUEST_COUNT="0"
  while [[ "$REQUEST_COUNT" -lt "50" ]]; do sleep 5 REQUEST_COUNT=$(kubectl logs -l
  app=loadgenerator | grep Aggregated | awk ''{print $2}'') done # ensure there are
  no errors hitting endpoints ERROR_COUNT=$(kubectl logs -l app=loadgenerator | grep
  Aggregated | awk ''{print $3}'' | sed "s/[(][^)]*[)]//g") if [[ "$ERROR_COUNT" -gt
  "0" ]]; then exit 1'
- "delete pod -l app=loadgenerator # wait for requests to come in REQUEST_COUNT=\"\
  0\" while [[ \"$REQUEST_COUNT\" -lt \"50\" ]]; do sleep 5 REQUEST_COUNT=$(kubectl\
  \ logs -l app=loadgenerator | grep Aggregated | awk '{print $2}') done # ensure\
  \ there are no errors hitting endpoints ERROR_COUNT=$(kubectl logs -l app=loadgenerator\
  \ | grep Aggregated | awk '{print $3}' | sed \"s/[(][^)]*[)]//g\") if [[ \"$ERROR_COUNT\"\
  \ -gt \"0\" ]]; then exit 1 fi - name: Comment EXTERNAL_IP timeout-minutes: 5 env:\
  \ COMMENTS_URL: ${{ github.event.pull_request.comments_url }} GITHUB_TOKEN: ${{\
  \ secrets.GITHUB_TOKEN }} run: | curl \\ -X POST \\ $COMMENTS_URL \\ -H \"Content-Type:\
  \ application/json\" \\ -H \"Authorization: token $GITHUB_TOKEN\" \\ --data '{ \"\
  body\": \"\U0001F6B2 PR staged at '\"http://${EXTERNAL_IP}\"'\"}' sleep 60"
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: kustomize-build-ci
  on: push: branches: - main paths: - ''kustomize/**'' - ''.github/workflows/kustomize-build-ci.yaml''
  pull_request: paths: - ''kustomize/**'' - ''.github/workflows/kustomize-build-ci.yaml''
  jobs: kustomize-build-ci: runs-on: ubuntu-24.04 steps: - uses: actions/checkout@v4
  - name: kustomize build base run: | cd kustomize/ kubectl kustomize . # Build the
  different combinations of Kustomize components found in kustomize/tests. - name:
  kustomize build tests run: | cd kustomize/tests KUSTOMIZE_TESTS_SUBFOLDERS=$(ls
  -d */) for test in $KUSTOMIZE_TESTS_SUBFOLDERS; do echo "## kustomize build for
  " + $test kustomize build $test done'
- '# GitHub Actions Workflows This page describes the CI/CD workflows for the Online
  Boutique app, which run in [Github Actions](https://github.com/GoogleCloudPlatform/microservices-demo/actions).
  ## Infrastructure The CI/CD pipelines for Online Boutique run in Github Actions,
  using a pool of two [self-hosted runners]((https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-self-hosted-runners)).
  These runners are GCE instances (virtual machines) that, for every open Pull Request
  in the repo, run the code test pipeline, deploy test pipeline, and (on main) deploy
  the latest version of the app to [cymbal-shops.retail.cymbal.dev](https://cymbal-shops.retail.cymbal.dev)
  We also host a test GKE cluster, which is where the deploy tests run. Every PR has
  its own namespace in the cluster. ## Workflows **Note**: In order for the current
  CI/CD setup to work on your pull request, you must branch directly off the repo
  (no forks). This is because the Github secrets necessary for these tests aren''t
  copied over when you fork. ### Code Tests - [ci-pr.yaml](ci-pr.yaml) These tests
  run on every commit for every open PR, as well as any commit to main / any release
  branch. Currently, this workflow runs only Go unit tests. ### Deploy Tests- [ci-pr.yaml](ci-pr.yaml)
  These tests run on every commit for every open PR, as well as any commit to main
  / any release branch. This workflow: 1. Creates a dedicated GKE namespace for that
  PR, if it doesn''t already exist, in the PR GKE cluster. 2. Uses `skaffold run`
  to build and push the images specific to that PR commit. Then skaffold deploys those
  images, via `kubernetes-manifests`, to the PR namespace in the test cluster. 3.
  Tests to make sure all the pods start up and become ready. 4. Gets the LoadBalancer
  IP for the frontend service. 5. Comments that IP in the pull request, for staging.
  ### Push and Deploy Latest - [push-deploy](push-deploy.yml) This is the Continuous
  Deployment workflow, and it runs on every commit to the main branch. This workflow:
  1. Builds the container images for every service, tagging as `latest`. 2. Pushes
  those images to Google Container Registry. Note that this workflow does not update
  the image tags used in `release/kubernetes-manifests.yaml` - these release manifests
  are tied to a stable `v0.x.x` release. ### Cleanup - [cleanup.yaml](cleanup.yaml)
  This workflow runs when a PR closes, regardless of whether it was merged into main.
  This workflow deletes the PR-specific GKE namespace in the test cluster. ## Appendix
  - Creating a new Actions runner Should one of the two self-hosted Github Actions
  runners (GCE instances) fail, or you want to add more runner capacity, this is how
  to provision a new runner. Note that you need IAM access to the admin Online Boutique
  GCP project in order to do this. 1. Create a GCE instance. - VM should be at least
  n1-standard-4 with 50GB persistent disk - VM should use custom service account with
  permissions to: access a GKE cluster, create GCS storage buckets, and push to GCR.
  2. SSH into new VM through the Google Cloud Console. 3. Install project-specific
  dependencies, including go, docker, skaffold, and kubectl: ``` wget -O - https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/.github/workflows/install-dependencies.sh
  | bash ``` The instance will restart when the script completes in order to finish
  the'
- 'disk - VM should use custom service account with permissions to: access a GKE cluster,
  create GCS storage buckets, and push to GCR. 2. SSH into new VM through the Google
  Cloud Console. 3. Install project-specific dependencies, including go, docker, skaffold,
  and kubectl: ``` wget -O - https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/.github/workflows/install-dependencies.sh
  | bash ``` The instance will restart when the script completes in order to finish
  the Docker install. 4. SSH back into the VM. 5. Follow the instructions to add a
  new runner on the [Actions Settings page](https://github.com/GoogleCloudPlatform/microservices-demo/settings/actions)
  to authenticate the new runner 6. Start GitHub Actions as a background service:
  ``` sudo ~/actions-runner/svc.sh install ; sudo ~/actions-runner/svc.sh start ```'
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: "Continuous Integration
  - Main/Release" on: push: # run on pushes to main or release/* branches: - main
  - release/* paths-ignore: - ''**/README.md'' - ''kustomize/**'' - ''.github/workflows/kustomize-build-ci.yaml''
  - ''terraform/**'' - ''.github/workflows/terraform-validate-ci.yaml'' - ''helm-chart/**''
  - ''.github/workflows/helm-chart-ci.yaml'' jobs: code-tests: runs-on: [self-hosted,
  is-enabled] steps: - uses: actions/checkout@v4 - uses: actions/setup-dotnet@v4 env:
  DOTNET_INSTALL_DIR: "./.dotnet" with: dotnet-version: ''9.0'' - uses: actions/setup-go@v5
  with: go-version: ''1.24'' - name: Go Unit Tests timeout-minutes: 10 run: | for
  SERVICE in "shippingservice" "productcatalogservice"; do echo "testing $SERVICE..."
  pushd src/$SERVICE go test popd done - name: C# Unit Tests timeout-minutes: 10 run:
  | dotnet test src/cartservice/ deployment-tests: runs-on: [self-hosted, is-enabled]
  needs: code-tests strategy: matrix: profile: ["local-code"] fail-fast: true steps:
  - uses: actions/checkout@v4 - name: Build + Deploy PR images to GKE timeout-minutes:
  20 run: | PR_NUMBER=$(echo $GITHUB_REF | awk ''BEGIN { FS = "/" } ; { print $3 }'')
  NAMESPACE="pr${PR_NUMBER}" echo "::set-env name=NAMESPACE::$NAMESPACE" echo "::set-env
  name=PR_NUMBER::$PR_NUMBER" yes | gcloud auth configure-docker us-docker.pkg.dev
  gcloud container clusters get-credentials $PR_CLUSTER --region $REGION --project
  $PROJECT_ID cat <<EOF | kubectl apply -f - apiVersion: v1 kind: Namespace metadata:
  name: $NAMESPACE EOF echo Deploying application skaffold config set --global local-cluster
  false skaffold run --default-repo=us-docker.pkg.dev/$PROJECT_ID/$GITHUB_REF --tag=$GITHUB_SHA
  --namespace=$NAMESPACE -p network-policies env: ACTIONS_ALLOW_UNSECURE_COMMANDS:
  true PROJECT_ID: "online-boutique-ci" PR_CLUSTER: "prs-gke-cluster" REGION: "us-central1"
  - name: Wait For Pods timeout-minutes: 20 run: | set -x kubectl config set-context
  --current --namespace=$NAMESPACE kubectl wait --for=condition=available --timeout=1000s
  deployment/redis-cart kubectl wait --for=condition=available --timeout=1000s deployment/adservice
  kubectl wait --for=condition=available --timeout=1000s deployment/cartservice kubectl
  wait --for=condition=available --timeout=1000s deployment/checkoutservice kubectl
  wait --for=condition=available --timeout=1000s deployment/currencyservice kubectl
  wait --for=condition=available --timeout=1000s deployment/emailservice kubectl wait
  --for=condition=available --timeout=1000s deployment/frontend kubectl wait --for=condition=available
  --timeout=1000s deployment/loadgenerator kubectl wait --for=condition=available
  --timeout=1000s deployment/paymentservice kubectl wait --for=condition=available
  --timeout=1000s deployment/productcatalogservice kubectl wait --for=condition=available
  --timeout=1000s deployment/recommendationservice kubectl wait --for=condition=available
  --timeout=1000s deployment/shippingservice - name: Smoke Test timeout-minutes: 5
  run: | set -x # start fresh loadgenerator pod kubectl delete pod -l app=loadgenerator
  # wait for requests to come in REQUEST_COUNT="0" while [[ "$REQUEST_COUNT" -lt "50"
  ]]; do sleep 5 REQUEST_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated
  | awk ''{print $2}'') done # ensure there are no errors hitting endpoints ERROR_COUNT=$(kubectl
  logs -l app=loadgenerator | grep Aggregated | awk ''{print $3}'' | sed "s/[(][^)]*[)]//g")
  if [[ "$ERROR_COUNT" -gt "0" ]]; then exit 1 fi'
- ']]; then exit 1 fi'
- '# Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: "Clean up deployment"
  on: pull_request: # run on pull requests targeting main branches: - main types:
  closed paths-ignore: - ''**/README.md'' - ''kustomize/**'' - ''.github/workflows/kustomize-build-ci.yaml''
  - ''terraform/**'' - ''.github/workflows/terraform-validate-ci.yaml'' jobs: cleanup-namespace:
  runs-on: [self-hosted, is-enabled] steps: - name: Delete PR namespace in staging
  cluster if: ${{ always() }} timeout-minutes: 20 run: | gcloud container clusters
  get-credentials $PR_CLUSTER \ --region $REGION --project $PROJECT_ID NAMESPACE="pr${PR_NUMBER}"
  kubectl delete namespace $NAMESPACE env: PROJECT_ID: "online-boutique-ci" PR_CLUSTER:
  "prs-gke-cluster" REGION: "us-central1" PR_NUMBER: ${{ github.event.number }}'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. name: kubevious-manifests-ci
  on: push: branches: - main paths: - ''helm-chart/**'' - ''kustomize/**'' - ''.github/workflows/kubevious-manifests-ci.yaml''
  pull_request: paths: - ''helm-chart/**'' - ''kustomize/**'' - ''.github/workflows/kubevious-manifests-ci.yaml''
  permissions: contents: read jobs: kubevious-manifests-ci: runs-on: ubuntu-24.04
  timeout-minutes: 1 steps: - uses: actions/checkout@v4 - name: Validate kubernetes-manifests
  id: kubernetes-manifests-validation uses: kubevious/cli@v1.0.62 with: manifests:
  kubernetes-manifests skip_rules: container-latest-image - name: Validate helm-chart
  id: helm-chart-validation uses: kubevious/cli@v1.0.62 with: manifests: helm-chart
  - name: Validate kustomize id: kustomize-validation uses: kubevious/cli@v1.0.62
  with: manifests: kustomize skip_rules: container-latest-image'
- '--- name: Feature request about: Suggest an idea for this project title: '''' labels:
  '''' assignees: '''' --- ### Describe request or inquiry <!-- Add any other context
  about the problem or helpful links here! --> ### What purpose/environment will this
  feature serve? <!-- Add reasoning -->'
- '--- name: Bug report about: Create a report to help us improve title: '''' labels:
  '''' assignees: '''' --- ### Describe the bug <!-- A clear and concise description
  of what the bug is. --> ### To Reproduce <!-- Steps to reproduce the behavior: -->
  <!-- 1. Built image ''...'' --> <!-- 2. Ran command ''....'' --> <!-- 3. See error
  --> ### Logs <!-- Add logs to help explain your problem --> ### Screenshots <!--
  If applicable, add screenshots to help explain your problem --> ### Environment
  <!-- - OS: [e.g. MacOS Big Sur v11.6] --> <!-- - Kubernetes distribution, version:
  [e.g. minikube, GKE (Standard or Autopilot), EKS, AWS ... ] --> <!-- - Any relevant
  tool version: [e.g. Docker v20.10.8] --> ### Additional context <!-- Add any other
  context about the problem here --> ### Exposure <!-- Is the bug intermittent, persistent?
  Is it widespread, local? -->'
- '--- name: Other about: Have a question or need clarification? title: '''' labels:
  '''' assignees: '''' --- ### Write down your inquiry <!-- Write your question/inquiry
  here and any addition context -->'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: # - components/cymbal-branding
  # - components/google-cloud-operations # - components/memorystore # - components/network-policies
  # - components/non-public-frontend # - components/service-accounts # - components/alloydb
  # - components/single-shared-session # - components/spanner # - components/service-mesh-istio
  # - components/without-loadgenerator # These must be run last and in this order
  # - components/container-images-tag # - components/container-images-tag-suffix #
  - components/container-images-registry'
- "# Use Online Boutique with Kustomize This page contains instructions on deploying\
  \ variations of the [Online Boutique](https://github.com/GoogleCloudPlatform/microservices-demo)\
  \ sample application using [Kustomize](https://kustomize.io/). Each variations is\
  \ designed as a [**Kustomize component**](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/components.md),\
  \ so multiple variations can be composed together in the deployment. ## What is\
  \ Kustomize? Kustomize is a Kubernetes configuration management tool that allows\
  \ users to customize their manifest configurations without duplication. Its commands\
  \ are built into `kubectl` as `apply -k`. More information on Kustomize can be found\
  \ on the [official Kustomize website](https://kustomize.io/). ## Prerequisites Optionally,\
  \ [install the `kustomize` binary](https://kubectl.docs.kubernetes.io/installation/)\
  \ to avoid manually editing a `kustomization.yaml` file. Online Boutique's instructions\
  \ will often use `kustomize edit` (like `kustomize edit add component components/some-component`),\
  \ but you can skip these commands and instead add components manually to the [`/kustomize/kustomization.yaml`\
  \ file](/kustomize/kustomization.yaml). You need to have a Kubernetes cluster where\
  \ you will deploy the Online Boutique's Kubernetes manifests. To set up a GKE (Google\
  \ Kubernetes Engine) cluster, you can follow the instruction in the [root `/README.md`](/).\
  \ ## Deploy Online Boutique with Kustomize 1. From the root folder of this repository,\
  \ navigate to the `kustomize/` directory. ```bash cd kustomize/ ``` 1. See what\
  \ the default Kustomize configuration defined by `kustomize/kustomization.yaml`\
  \ will generate (without actually deploying them yet). ```bash kubectl kustomize\
  \ . ``` 1. Apply the default Kustomize configuration (`kustomize/kustomization.yaml`).\
  \ ```bash kubectl apply -k . ``` 1. Wait for all Pods to show `STATUS` of `Running`.\
  \ ```bash kubectl get pods ``` The output should be similar to the following: ```terminal\
  \ NAME READY STATUS RESTARTS AGE adservice-76bdd69666-ckc5j 1/1 Running 0 2m58s\
  \ cartservice-66d497c6b7-dp5jr 1/1 Running 0 2m59s checkoutservice-666c784bd6-4jd22\
  \ 1/1 Running 0 3m1s currencyservice-5d5d496984-4jmd7 1/1 Running 0 2m59s emailservice-667457d9d6-75jcq\
  \ 1/1 Running 0 3m2s frontend-6b8d69b9fb-wjqdg 1/1 Running 0 3m1s loadgenerator-665b5cd444-gwqdq\
  \ 1/1 Running 0 3m paymentservice-68596d6dd6-bf6bv 1/1 Running 0 3m productcatalogservice-557d474574-888kr\
  \ 1/1 Running 0 3m recommendationservice-69c56b74d4-7z8r5 1/1 Running 0 3m1s shippingservice-6ccc89f8fd-v686r\
  \ 1/1 Running 0 2m58s ``` _Note: It may take 2-3 minutes before the changes are\
  \ reflected on the deployment._ 1. Access the web frontend in a browser using the\
  \ frontend's `EXTERNAL_IP`. ```bash kubectl get service frontend-external | awk\
  \ '{print $4}' ``` Note: you may see `<pending>` while GCP provisions the load balancer.\
  \ If this happens, wait a few minutes and re-run the command. ## Deploy Online Boutique\
  \ variations with Kustomize Here is the list of the variations available as Kustomize\
  \ components that you could leverage: - [**Change to the Cymbal Shops Branding**](components/cymbal-branding)\
  \ - Changes all Online Boutique-related branding to Google Cloud's fictitious company\
  \ \u2014 Cymbal Shops. The code adds/enables an environment variable `CYMBAL_BRANDING`\
  \ in the `frontend` service. - [**Integrate with Google Cloud Operations**](components/google-cloud-operations)\
  \ - Enables Monitoring (Stats), Tracing, and Profiler for various services within\
  \ Online Boutique. The code adds the appropriare environment variables (`ENABLE_STATS`,\
  \ `ENABLE_TRACING`, `DISABLE_PROFILER`) for each YAML config file. - [**Integrate\
  \ with Memorystore (Redis)**](components/memorystore) - The default Online Boutique\
  \ deployment uses the in-cluster `redis` database for storing the contents of its\
  \ shopping cart. The Memorystore deployment variation overrides the default database\
  \ with its own Memorystore (Redis) database. These changes directly affect `cartservice`.\
  \ - [**Integrate with Spanner**](components/spanner) - The default Online Boutique\
  \ deployment uses the in-cluster `redis` database for storing the contents of its\
  \ shopping"
- '[**Integrate with Memorystore (Redis)**](components/memorystore) - The default
  Online Boutique deployment uses the in-cluster `redis` database for storing the
  contents of its shopping cart. The Memorystore deployment variation overrides the
  default database with its own Memorystore (Redis) database. These changes directly
  affect `cartservice`. - [**Integrate with Spanner**](components/spanner) - The default
  Online Boutique deployment uses the in-cluster `redis` database for storing the
  contents of its shopping cart. The Spanner deployment variation overrides the default
  database with its own Spanner database. These changes directly affect `cartservice`.
  - [**Integrate with AlloyDB**](components/alloydb) - The default Online Boutique
  deployment uses the in-cluster `redis` database for storing the contents of its
  shopping cart. The AlloyDB deployment variation overrides the default database with
  its own AlloyDB database. These changes directly affect `cartservice`. - [**Secure
  with Network Policies**](components/network-policies) - Deploy fine granular `NetworkPolicies`
  for Online Boutique. - [**Update the registry name of the container images**](components/container-images-registry)
  - [**Update the image tag of the container images**](components/container-images-tag)
  - [**Add an image tag suffix to the container images**](components/container-images-tag-suffix)
  - [**Do not expose the `frontend` publicly**](components/non-public-frontend) -
  [**Set the `frontend` to manage only one single shared session**](components/single-shared-session)
  - [**Configure `Istio` service mesh resources**](components/service-mesh-istio)
  ### Select variations To customize Online Boutique with its variations, you need
  to update the default `kustomize/kustomization.yaml` file. You could do that manually,
  use `sed`, or use the `kustomize edit` command like illustrated below. #### Use
  `kustomize edit` to select variations Here is an example with the [**Cymbal Shops
  Branding**](components/cymbal-branding) variation, from the `kustomize/` folder,
  run the command below: ```bash kustomize edit add component components/cymbal-branding
  ``` You could now combine it with other variations, like for example with the [**Google
  Cloud Operations**](components/google-cloud-operations) variation: ```bash kustomize
  edit add component components/google-cloud-operations ``` ### Deploy selected variations
  Like explained earlier, you can locally render these manifests by running `kubectl
  kustomize .` as well as deploying them by running `kubectl apply -k .`. So for example,
  the associated `kustomization.yaml` could look like: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/cymbal-branding -
  components/google-cloud-operations ``` ### Use remote Kustomize targets Kustomize
  allows you to reference public remote resources so the `kustomization.yaml` could
  look like: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization
  resources: - github.com/GoogleCloudPlatform/microservices-demo/kustomize/base components:
  - github.com/GoogleCloudPlatform/microservices-demo/kustomize/components/cymbal-branding
  - github.com/GoogleCloudPlatform/microservices-demo/kustomize/components/google-cloud-operations
  ``` Learn more about [Kustomize remote targets](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/remoteBuild.md).'
- This directory contains a list of scenarios (different combinations of Kustomize
  Components) used for testing. See [/.github/workflows/kustomize-build-ci.yaml](../../.github/workflows/kustomize-build-ci.yaml).
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - ../../base components: - ../../components/cymbal-branding
  - ../../components/google-cloud-operations - ../../components/network-policies -
  ../../components/memorystore'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - ../../base components: - ../../components/cymbal-branding
  - ../../components/google-cloud-operations - ../../components/network-policies -
  ../../components/spanner'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - ../../base components: - ../../components/cymbal-branding
  - ../../components/google-cloud-operations - ../../components/network-policies -
  ../../components/service-mesh-istio'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: - target: kind: Deployment name: frontend patch: |- - op:
  add path: /spec/template/spec/containers/0/env/- value: name: BASE_URL value: /online-boutique
  - op: replace path: /spec/template/spec/containers/0/livenessProbe/httpGet/path
  value: /online-boutique/_healthz - op: replace path: /spec/template/spec/containers/0/readinessProbe/httpGet/path
  value: /online-boutique/_healthz'
- '# Customize the Base URL for Online Boutique This component allows you to change
  the base URL for the Online Boutique application. By default, the application uses
  the root path ("/") as its base URL. This customization sets the base URL to "/online-boutique"
  and updates the health check paths accordingly. ## What it does 1. Sets the `BASE_URL`
  environment variable to "/online-boutique" for the frontend deployment. 2. Updates
  the liveness probe path to "/online-boutique/_healthz". 3. Updates the readiness
  probe path to "/online-boutique/_healthz". ## How to use To apply this customization,
  you can use Kustomize to include this component in your deployment. From the `kustomize/`
  folder at the root level of this repository, execute this command: ```bash kustomize
  edit add component components/custom-base-url ``` This will update the `kustomize/kustomization.yaml`
  file, which could look similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/custom-base-url ```
  ## Render and Deploy You can locally render these manifests by running: ```bash
  kubectl kustomize . ``` To deploy the customized application, run: ```bash kubectl
  apply -k . ``` ## Customizing the Base URL If you want to use a different base URL,
  you can modify the `value` fields in the kustomization.yaml file. Make sure to update
  all three occurrences: 1. The `BASE_URL` environment variable 2. The liveness probe
  path 3. The readiness probe path For example, to change the base URL to "/shop",
  you would modify the values as follows: ```yaml value: /shop value: /shop/_healthz
  value: /shop/_healthz ``` Note: After changing the base URL, make sure to update
  any internal links or references within your application to use the new base URL.'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component images: - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/adservice
  newName: CONTAINER_IMAGES_REGISTRY/adservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/cartservice
  newName: CONTAINER_IMAGES_REGISTRY/cartservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/checkoutservice
  newName: CONTAINER_IMAGES_REGISTRY/checkoutservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/currencyservice
  newName: CONTAINER_IMAGES_REGISTRY/currencyservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/emailservice
  newName: CONTAINER_IMAGES_REGISTRY/emailservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend
  newName: CONTAINER_IMAGES_REGISTRY/frontend - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator
  newName: CONTAINER_IMAGES_REGISTRY/loadgenerator - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/paymentservice
  newName: CONTAINER_IMAGES_REGISTRY/paymentservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/productcatalogservice
  newName: CONTAINER_IMAGES_REGISTRY/productcatalogservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice
  newName: CONTAINER_IMAGES_REGISTRY/recommendationservice - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/shippingservice
  newName: CONTAINER_IMAGES_REGISTRY/shippingservice - name: redis newName: CONTAINER_IMAGES_REGISTRY/redis'
- '# Update the container registry of the Online Boutique apps By default, Online
  Boutique''s services'' container images are pulled from a public container registry
  (`us-central1-docker.pkg.dev/google-samples/microservices-demo`). One best practice
  is to have these container images in your own private container registry. The Kustomize
  variation in this folder can help with using your own private container registry.
  ## Change the default container registry via Kustomize To automate the deployment
  of Online Boutique integrated with your own container registry, you can leverage
  the following variation with [Kustomize](../..). From the `kustomize/` folder at
  the root level of this repository, execute this command: ```bash REGISTRY=my-registry
  # Example: us-central1-docker.pkg.dev/my-project/my-directory sed -i "s|CONTAINER_IMAGES_REGISTRY|${REGISTRY}|g"
  components/container-images-registry/kustomization.yaml kustomize edit add component
  components/container-images-registry ``` _Note: this Kustomize component will update
  the container registry in the `image:` field in all `Deployments`._ This will update
  the `kustomize/kustomization.yaml` file which could be similar to: ```yaml apiVersion:
  kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - base components:
  - components/container-images-registry ``` You can (optionally) locally render these
  manifests by running `kubectl kustomize .`. You can deploy them by running `kubectl
  apply -k .`.'
- 'apiVersion: apps/v1 kind: Deployment metadata: name: loadgenerator $patch: delete'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: - path: delete-loadgenerator.patch.yaml'
- '# Exclude the loadgenerator By default, when you deploy Online Boutique, its [loadgenerator](/src/loadgenerator/)
  will also be deployed. You can use this Kustomize component to exclude the loadgenerator.
  Note: This Kustomize component has not been tested with [other Kustomize Components](/kustomize/components/)
  that rely on the loadgenerator. ## Use this component From the `kustomize/` folder
  at the root level of this repository, execute this command: ```bash kustomize edit
  add component components/without-loadgenerator ``` This will update the `kustomize/kustomization.yaml`
  file which could be similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/without-loadgenerator
  ``` You can then deploy Online Boutique and this component to your cluster using
  `kubectl apply -k .`. If you just want to render the YAML manifest (without deploying
  to your cluster), run `kubectl kustomize .`. Learn more about Online Boutique''s
  kustomize components at [/kustomize](/kustomize#readme).'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: - patch: |- apiVersion: apps/v1 kind: Deployment metadata:
  name: frontend spec: template: spec: containers: - name: server env: - name: CYMBAL_BRANDING
  value: "true"'
- '# Change the Online Boutique theme to the Cymbal Shops Branding By default, when
  you deploy this sample app, the "Online Boutique" branding (logo and wording) will
  be used. But you may want to use Google Cloud''s fictitious company, _Cymbal Shops_,
  instead. To use "Cymbal Shops" branding, set the `CYMBAL_BRANDING` environment variable
  to `"true"` in the the Kubernetes manifest (`.yaml`) for the `frontend` Deployment.
  ```yaml apiVersion: apps/v1 kind: Deployment metadata: name: frontend spec: ...
  template: ... spec: ... containers: ... env: ... - name: CYMBAL_BRANDING value:
  "true" ``` ## Deploy Online Boutique with the Cymbal Shops branding via Kustomize
  To automate the deployment of Online Boutique with the Cymbal Shops branding you
  can leverage the following variation with [Kustomize](../..). From the `kustomize/`
  folder at the root level of this repository, execute this command: ```bash kustomize
  edit add component components/cymbal-branding ``` This will update the `kustomize/kustomization.yaml`
  file which could be similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/cymbal-branding ```
  You can locally render these manifests by running `kubectl kustomize .` as well
  as deploying them by running `kubectl apply -k .`.'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: # cartservice - replace REDIS_ADDR to target new Memorystore
  (redis) instance - patch: |- apiVersion: apps/v1 kind: Deployment metadata: name:
  cartservice spec: template: spec: containers: - name: server env: - name: REDIS_ADDR
  value: "REDIS_CONNECTION_STRING" # redis - remove the redis-cart Deployment - patch:
  |- apiVersion: apps/v1 kind: Deployment metadata: name: redis-cart $patch: delete
  # redis - remove the redis-cart Service - patch: |- apiVersion: v1 kind: Service
  metadata: name: redis-cart $patch: delete'
- '# Integrate Online Boutique with Memorystore (Redis) By default the `cartservice`
  app is serializing the data in an in-cluster Redis database. Using a database outside
  your GKE cluster could bring more resiliency and more security with a managed service
  like Google Cloud Memorystore (Redis). ![Architecture diagram with Memorystore](/docs/img/memorystore.png)
  ## Provision a Memorystore (Redis) instance Important notes: - You can connect to
  a Memorystore (Redis) instance from GKE clusters that are in the same region and
  use the same network as your instance. - You cannot connect to a Memorystore (Redis)
  instance from a GKE cluster without VPC-native/IP aliasing enabled. To provision
  a Memorystore (Redis) instance you can follow the following instructions: ```bash
  ZONE="<your-GCP-zone>" REGION="<your-GCP-region>" gcloud services enable redis.googleapis.com
  gcloud redis instances create redis-cart \ --size=1 \ --region=${REGION} \ --zone=${ZONE}
  \ --redis-version=redis_7_0 ``` _Note: You can also find in this repository the
  Terraform script to provision the Memorystore (Redis) instance alongside the GKE
  cluster, more information [here](/terraform)._ ## Deploy Online Boutique connected
  to a Memorystore (Redis) instance To automate the deployment of Online Boutique
  integrated with Memorystore (Redis) you can leverage the following variation with
  [Kustomize](../..). From the `kustomize/` folder at the root level of this repository,
  execute this command: ```bash kustomize edit add component components/memorystore
  ``` _Note: this Kustomize component will also remove the `redis-cart` `Deployment`
  and `Service` not used anymore._ This will update the `kustomize/kustomization.yaml`
  file which could be similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/memorystore ``` Update
  current Kustomize manifest to target this Memorystore (Redis) instance. ```bash
  REDIS_IP=$(gcloud redis instances describe redis-cart --region=${REGION} --format=''get(host)'')
  REDIS_PORT=$(gcloud redis instances describe redis-cart --region=${REGION} --format=''get(port)'')
  sed -i "s/REDIS_CONNECTION_STRING/${REDIS_IP}:${REDIS_PORT}/g" components/memorystore/kustomization.yaml
  ``` You can locally render these manifests by running `kubectl kustomize .` as well
  as deploying them by running `kubectl apply -k .`. ## Resources - [Connecting to
  a Redis instance from a Google Kubernetes Engine cluster](https://cloud.google.com/memorystore/docs/redis/connect-redis-instance-gke)
  - [Seamlessly encrypt traffic from any apps in your Mesh to Memorystore (Redis)](https://medium.com/google-cloud/64b71969318d)'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: # frontend - ENABLE_SINGLE_SHARED_SESSION - patch: |- apiVersion:
  apps/v1 kind: Deployment metadata: name: frontend spec: template: spec: containers:
  - name: server env: - name: ENABLE_SINGLE_SHARED_SESSION value: "true"'
- '# Manage a single shared session for the Online Boutique apps By default, when
  you deploy this sample app, the Online Boutique''s `frontend` generates a `shop_session-id`
  cookie per browser session. But you may want to share one unique `shop_session-id`
  cookie across all browser sessions. This is useful for multi-cluster environments.
  ## Deploy Online Boutique to generate a single shared session To automate the deployment
  of Online Boutique to manage a single shared session you can leverage the following
  variation with [Kustomize](../..). From the `kustomize/` folder at the root level
  of this repository, execute this command: ```bash kustomize edit add component components/single-shared-session
  ``` This will update the `kustomize/kustomization.yaml` file which could be similar
  to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources:
  - base components: - components/single-shared-session ``` You can locally render
  these manifests by running `kubectl kustomize .` as well as deploying them by running
  `kubectl apply -k .`.'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: paymentservice spec: podSelector: matchLabels:
  app: paymentservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: checkoutservice ports: - port: 50051 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: currencyservice spec: podSelector: matchLabels:
  app: currencyservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend - podSelector: matchLabels: app: checkoutservice ports:
  - port: 7000 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: adservice spec: podSelector: matchLabels: app:
  adservice policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: frontend ports: - port: 9555 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: redis-cart spec: podSelector: matchLabels: app:
  redis-cart policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels:
  app: cartservice ports: - port: 6379 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: deny-all spec: podSelector: {} policyTypes:
  - Ingress - Egress'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: shippingservice spec: podSelector: matchLabels:
  app: shippingservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend - podSelector: matchLabels: app: checkoutservice ports:
  - port: 50051 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: frontend spec: podSelector: matchLabels: app:
  frontend policyTypes: - Ingress - Egress ingress: - {} egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component resources: - network-policy-deny-all.yaml - network-policy-adservice.yaml
  - network-policy-cartservice.yaml - network-policy-checkoutservice.yaml - network-policy-currencyservice.yaml
  - network-policy-emailservice.yaml - network-policy-frontend.yaml - network-policy-loadgenerator.yaml
  - network-policy-paymentservice.yaml - network-policy-productcatalogservice.yaml
  - network-policy-recommendationservice.yaml - network-policy-redis.yaml - network-policy-shippingservice.yaml'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: recommendationservice spec: podSelector: matchLabels:
  app: recommendationservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend ports: - port: 8080 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: emailservice spec: podSelector: matchLabels:
  app: emailservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: checkoutservice ports: - port: 8080 protocol: TCP egress: - {}'
- '# Secure Online Boutique with Network Policies You can use [Network Policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
  enforcement to control the communication between your cluster''s Pods and Services.
  To use `NetworkPolicies` in Google Kubernetes Engine (GKE), you will need a GKE
  cluster with network policy enforcement enabled, the recommended approach is to
  use [GKE Dataplane V2](https://cloud.google.com/kubernetes-engine/docs/how-to/dataplane-v2).
  To use `NetworkPolicies` on a local cluster such as [minikube](https://minikube.sigs.k8s.io/docs/start/),
  you will need to use an alternative CNI that supports `NetworkPolicies` like [Calico](https://projectcalico.docs.tigera.io/getting-started/kubernetes/minikube).
  To run a minikube cluster with Calico, run `minikube start --cni=calico`. By design,
  the minikube default CNI [Kindnet](https://github.com/aojea/kindnet) does not support
  it. ## Deploy Online Boutique with `NetworkPolicies` via Kustomize To automate the
  deployment of Online Boutique integrated with fine granular `NetworkPolicies` (one
  per `Deployment`), you can leverage the following variation with [Kustomize](../..).
  From the `kustomize/` folder at the root level of this repository, execute this
  command: ```bash kustomize edit add component components/network-policies ``` This
  will update the `kustomize/kustomization.yaml` file which could be similar to: ```yaml
  apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - base
  components: - components/network-policies ``` You can locally render these manifests
  by running `kubectl kustomize .` as well as deploying them by running `kubectl apply
  -k .`. Once deployed, you can verify that the `NetworkPolicies` are successfully
  deployed: ```bash kubectl get networkpolicy ``` The output could be similar to:
  ```output NAME POD-SELECTOR AGE adservice app=adservice 2m58s cartservice app=cartservice
  2m58s checkoutservice app=checkoutservice 2m58s currencyservice app=currencyservice
  2m58s deny-all <none> 2m58s emailservice app=emailservice 2m58s frontend app=frontend
  2m58s loadgenerator app=loadgenerator 2m58s paymentservice app=paymentservice 2m58s
  productcatalogservice app=productcatalogservice 2m58s recommendationservice app=recommendationservice
  2m58s redis-cart app=redis-cart 2m58s shippingservice app=shippingservice 2m58s
  ``` _Note: `Egress` is wide open in these `NetworkPolicies` . In our case, we do
  this is on purpose because there are multiple egress destinations to take into consideration
  like the Kubernetes DNS, Istio control plane (`istiod`), Cloud Trace API, Cloud
  Profiler API, etc._ ## Related Resources - [GKE Dataplane V2 announcement](https://cloud.google.com/blog/products/containers-kubernetes/bringing-ebpf-and-cilium-to-google-kubernetes-engine)
  - [Kubernetes Network Policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
  - [Kubernetes Network Policy Recipes](https://github.com/ahmetb/kubernetes-network-policy-recipes)
  - [Network policy logging](https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy-logging)'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: cartservice spec: podSelector: matchLabels:
  app: cartservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend - podSelector: matchLabels: app: checkoutservice ports:
  - port: 7070 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: checkoutservice spec: podSelector: matchLabels:
  app: checkoutservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend ports: - port: 5050 protocol: TCP egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: productcatalogservice spec: podSelector: matchLabels:
  app: productcatalogservice policyTypes: - Ingress - Egress ingress: - from: - podSelector:
  matchLabels: app: frontend - podSelector: matchLabels: app: checkoutservice - podSelector:
  matchLabels: app: recommendationservice ports: - port: 3550 protocol: TCP egress:
  - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy metadata: name: loadgenerator spec: podSelector: matchLabels:
  app: loadgenerator policyTypes: - Egress egress: - {}'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component images: - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/adservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/cartservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/checkoutservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/currencyservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/emailservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/paymentservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/productcatalogservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice
  newTag: CONTAINER_IMAGES_TAG - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/shippingservice
  newTag: CONTAINER_IMAGES_TAG'
- '# Update the container image tag of the Online Boutique apps By default, the Online
  Boutique apps are targeting the latest release version (see the list of versions
  [here](https://github.com/GoogleCloudPlatform/microservices-demo/releases)). You
  may need to change this image tag to target a specific version, this Kustomize variation
  will help you setting this up. ## Change the default container image tag via Kustomize
  To automate the deployment of the Online Boutique apps with a specific container
  imag tag, you can leverage the following variation with [Kustomize](../..). From
  the `kustomize/` folder at the root level of this repository, execute this command:
  ```bash TAG=v1.0.0 sed -i "s/CONTAINER_IMAGES_TAG/$TAG/g" components/container-images-tag/kustomization.yaml
  kustomize edit add component components/container-images-tag ``` _Note: this Kustomize
  component will update the container image tag of the `image:` field in all `Deployments`._
  This will update the `kustomize/kustomization.yaml` file which could be similar
  to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources:
  - base components: - components/container-images-tag ``` You can locally render
  these manifests by running `kubectl kustomize .` as well as deploying them by running
  `kubectl apply -k .`. **Important notes:** if combining with the other variations,
  here are some considerations: - should be placed before `components/container-images-registry`
  So for example here is the order respected: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/container-images-tag
  - components/container-images-registry ```'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. --- apiVersion: apps/v1
  kind: Deployment metadata: name: opentelemetrycollector spec: replicas: 1 selector:
  matchLabels: app: opentelemetrycollector template: metadata: labels: app: opentelemetrycollector
  spec: securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 # Init container retrieves the current cloud project id from the metadata server
  # and inserts it into the collector config template # https://cloud.google.com/compute/docs/storing-retrieving-metadata
  initContainers: - name: otel-gateway-init securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  busybox:latest@sha256:37f7b378a29ceb4c551b1b5582e27747b855bbfaa73fa11914fe0df028dc581f
  command: - ''/bin/sh'' - ''-c'' - | sed "s/{{PROJECT_ID}}/$(curl -H ''Metadata-Flavor:
  Google'' http://metadata.google.internal/computeMetadata/v1/project/project-id)/"
  /template/collector-gateway-config-template.yaml >> /conf/collector-gateway-config.yaml
  volumeMounts: - name: collector-gateway-config-template mountPath: /template - name:
  collector-gateway-config mountPath: /conf containers: # This gateway container will
  receive traces and metrics from each microservice # and forward it to GCP - name:
  otel-gateway securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true args: - --config=/conf/collector-gateway-config.yaml
  image: otel/opentelemetry-collector-contrib:0.122.1@sha256:0076e6c250bef16968e29e8f94177b87b5a851c79ce14b270e657f5f655b9e04
  volumeMounts: - name: collector-gateway-config mountPath: /conf volumes: # Simple
  ConfigMap volume with template file - name: collector-gateway-config-template configMap:
  items: - key: collector-gateway-config-template.yaml path: collector-gateway-config-template.yaml
  name: collector-gateway-config-template # Create a volume to store the expanded
  template (with correct cloud project ID) - name: collector-gateway-config emptyDir:
  {} --- apiVersion: v1 kind: Service metadata: name: opentelemetrycollector spec:
  ports: - name: grpc-otlp port: 4317 protocol: TCP targetPort: 4317 selector: app:
  opentelemetrycollector type: ClusterIP --- apiVersion: v1 kind: ConfigMap metadata:
  name: collector-gateway-config-template # Open Telemetry Collector config # https://opentelemetry.io/docs/collector/configuration/
  data: collector-gateway-config-template.yaml: | receivers: otlp: protocols: grpc:
  processors: exporters: googlecloud: project: {{PROJECT_ID}} service: pipelines:
  traces: receivers: [otlp] # Receive otlp-formatted data from other collector instances
  processors: [] exporters: [googlecloud] # Export traces directly to Google Cloud
  metrics: receivers: [otlp] processors: [] exporters: [googlecloud] # Export metrics
  to Google Cloud'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component resources: - otel-collector.yaml patches: # adservice - not yet
  implemented # checkoutservice - tracing, profiler - patch: |- apiVersion: apps/v1
  kind: Deployment metadata: name: checkoutservice spec: template: spec: containers:
  - name: server env: - name: COLLECTOR_SERVICE_ADDR value: "opentelemetrycollector:4317"
  - name: OTEL_SERVICE_NAME value: "checkoutservice" - name: ENABLE_TRACING value:
  "1" - name: ENABLE_PROFILER value: "1" # currencyservice - tracing, profiler - patch:
  |- apiVersion: apps/v1 kind: Deployment metadata: name: currencyservice spec: template:
  spec: containers: - name: server env: - name: COLLECTOR_SERVICE_ADDR value: "opentelemetrycollector:4317"
  - name: OTEL_SERVICE_NAME value: "currencyservice" - name: ENABLE_TRACING value:
  "1" - name: DISABLE_PROFILER $patch: delete # emailservice - tracing, profiler -
  patch: |- apiVersion: apps/v1 kind: Deployment metadata: name: emailservice spec:
  template: spec: containers: - name: server env: - name: COLLECTOR_SERVICE_ADDR value:
  "opentelemetrycollector:4317" - name: OTEL_SERVICE_NAME value: "emailservice" -
  name: ENABLE_TRACING value: "1" - name: DISABLE_PROFILER $patch: delete # frontend
  - tracing, profiler - patch: |- apiVersion: apps/v1 kind: Deployment metadata: name:
  frontend spec: template: spec: containers: - name: server env: - name: ENABLE_TRACING
  value: "1" - name: COLLECTOR_SERVICE_ADDR value: "opentelemetrycollector:4317" -
  name: OTEL_SERVICE_NAME value: "frontend" - name: ENABLE_PROFILER value: "1" # paymentservice
  - tracing, profiler - patch: |- apiVersion: apps/v1 kind: Deployment metadata: name:
  paymentservice spec: template: spec: containers: - name: server env: - name: COLLECTOR_SERVICE_ADDR
  value: "opentelemetrycollector:4317" - name: OTEL_SERVICE_NAME value: "paymentservice"
  - name: ENABLE_TRACING value: "1" - name: DISABLE_PROFILER $patch: delete # productcatalogservice
  - tracing, profiler - patch: |- apiVersion: apps/v1 kind: Deployment metadata: name:
  productcatalogservice spec: template: spec: containers: - name: server env: - name:
  COLLECTOR_SERVICE_ADDR value: "opentelemetrycollector:4317" - name: OTEL_SERVICE_NAME
  value: "productcatalogservice" - name: ENABLE_TRACING value: "1" - name: DISABLE_PROFILER
  value: "1" # recommendationservice - tracing, profiler - patch: |- apiVersion: apps/v1
  kind: Deployment metadata: name: recommendationservice spec: template: spec: containers:
  - name: server env: - name: COLLECTOR_SERVICE_ADDR value: "opentelemetrycollector:4317"
  - name: OTEL_SERVICE_NAME value: "recommendationservice" - name: ENABLE_TRACING
  value: "1" - name: DISABLE_PROFILER $patch: delete # shippingservice - stats, tracing,
  profiler - patch: |- apiVersion: apps/v1 kind: Deployment metadata: name: shippingservice
  spec: template: spec: containers: - name: server env: - name: DISABLE_PROFILER $patch:
  delete'
- '# Integrate Online Boutique with Google Cloud Operations By default, [Google Cloud
  Operations](https://cloud.google.com/products/operations) instrumentation is **turned
  off** for Online Boutique deployments. This includes Monitoring (Stats), Tracing,
  and Profiler. This means that even if you''re running this app on [GKE](https://cloud.google.com/kubernetes-engine),
  traces (for example) will not be exported to [Google Cloud Trace](https://cloud.google.com/trace).
  If you want to re-enable Google Cloud Operations instrumentation, the easiest way
  is to enable the included kustomize module, which enables traces, metrics, and adds
  a deployment of the [Open Telemetry Collector](https://opentelemetry.io/docs/collector/)
  to gather the traces and metrics and forward them to the appropriate Google Cloud
  backend. From the `kustomize/` folder at the root level of this repository, execute
  this command: ```bash kustomize edit add component components/google-cloud-operations
  ``` This will update the `kustomize/kustomization.yaml` file which could be similar
  to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources:
  - base components: - components/google-cloud-operations ``` You can locally render
  these manifests by running `kubectl kustomize .` as well as deploying them by running
  `kubectl apply -k .`. You will also need to make sure that you have the associated
  Google APIs enabled in your Google Cloud project: ```bash PROJECT_ID=<your-gcp-project-id>
  gcloud services enable \ monitoring.googleapis.com \ cloudtrace.googleapis.com \
  cloudprofiler.googleapis.com \ --project ${PROJECT_ID} ``` In addition to that,
  you will need to grant the following IAM roles associated to your Google Service
  Account (GSA): ```bash PROJECT_ID=<your-gcp-project-id> GSA_NAME=<your-gsa> gcloud
  projects add-iam-policy-binding ${PROJECT_ID} \ --member "serviceAccount:${GSA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
  \ --role roles/cloudtrace.agent gcloud projects add-iam-policy-binding ${PROJECT_ID}
  \ --member "serviceAccount:${GSA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" \
  --role roles/monitoring.metricWriter gcloud projects add-iam-policy-binding ${PROJECT_ID}
  \ --member "serviceAccount:${GSA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" \
  --role roles/cloudprofiler.agent ``` **Note** Currently only trace is supported.
  Support for metrics, and more is coming soon. ## Changes When enabling this kustomize
  module, most services will be patched with a configuration similar to the following:
  ```yaml apiVersion: apps/v1 kind: Deployment metadata: name: productcatalogservice
  spec: template: spec: containers: - name: server env: - name: COLLECTOR_SERVICE_ADDR
  value: "opentelemetrycollector:4317" - name: ENABLE_STATS value: "1" - name: ENABLE_TRACING
  value: "1" ``` This patch sets environment variables to enable export of stats and
  tracing, as well as a variable to tell the service how to reach the new collector
  deployment. ## OpenTelemetry Collector Currently, this component adds a single collector
  service which collects traces and metrics from individual services and forwards
  them to the appropriate Google Cloud backend. ![Collector Architecture Diagram](collector-model.png)
  If you wish to experiment with different backends, you can modify the appropriate
  lines in [otel-collector.yaml](otel-collector.yaml) to export traces or metrics
  to a different backend. See the [OpenTelemetry docs](https://opentelemetry.io/docs/collector/configuration/)
  for more details. ## Workload Identity If you are running this sample on GKE, your
  GKE cluster may be configured to use [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity)
  to manage access to Google Cloud APIs (like Cloud Trace). If this is the case, you
  may not see traces properly exported, or may see an error message like `failed to
  export to Google Cloud Trace: rpc error: code = PermissionDenied desc = The caller
  does not have permission` logged by your `opentelemetrycollector` Pod(s). In order
  to export traces with such a setup, you need to associate the Kubernetes [ServiceAccount](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
  (`default/default`) with your [default compute service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
  on Google Cloud (or a custom'
- 'traces properly exported, or may see an error message like `failed to export to
  Google Cloud Trace: rpc error: code = PermissionDenied desc = The caller does not
  have permission` logged by your `opentelemetrycollector` Pod(s). In order to export
  traces with such a setup, you need to associate the Kubernetes [ServiceAccount](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
  (`default/default`) with your [default compute service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
  on Google Cloud (or a custom Google Cloud service account you may create for this
  purpose). * To get the email address associated with your Google service account,
  check in the IAM section of the Cloud Console. Or run the following command in your
  terminal: ```bash gcloud iam service-accounts list ``` * Then, allow the Kubernetes
  service account to act as your Google service account with the following command
  (using your own `PROJECT_ID` and the `GSA_EMAIL` you found in the previous step):
  ```bash gcloud iam service-accounts add-iam-policy-binding ${GSA_EMAIL} \ --role
  roles/iam.workloadIdentityUser \ --member "serviceAccount:${PROJECT_ID}.svc.id.goog[default/default]"
  ``` * Annotate your Kubernetes service account (`default/default` for the `default`
  namespace) to use the Google IAM service account: ```bash kubectl annotate serviceaccount
  default \ iam.gke.io/gcp-service-account=${GSA_EMAIL} ``` * Finally, restart your
  `opentelemetrycollector` deployment to reflect the new settings: ```bash kubectl
  rollout restart deployment opentelemetrycollector ``` When the new Pod rolls out,
  you should start to see traces appear in the cloud console.'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: # cartservice - replace REDIS_ADDR by SPANNER_CONNECTION_STRING
  for the cartservice Deployment - patch: |- apiVersion: apps/v1 kind: Deployment
  metadata: name: cartservice spec: template: spec: containers: - name: server env:
  - name: REDIS_ADDR $patch: delete - name: SPANNER_CONNECTION_STRING value: projects/SPANNER_PROJECT/instances/SPANNER_INSTANCE/databases/SPANNER_DATABASE
  # cartservice - add the GSA annotation for the cartservice KSA - patch: |- apiVersion:
  v1 kind: ServiceAccount metadata: name: cartservice annotations: iam.gke.io/gcp-service-account:
  SPANNER_DB_USER_GSA_ID # redis - remove the redis-cart Deployment - patch: |- apiVersion:
  apps/v1 kind: Deployment metadata: name: redis-cart $patch: delete # redis - remove
  the redis-cart Service - patch: |- apiVersion: v1 kind: Service metadata: name:
  redis-cart $patch: delete'
- '# Integrate Online Boutique with Spanner By default the `cartservice` stores its
  data in an in-cluster Redis database. Using a fully managed database service outside
  your GKE cluster (such as [Google Cloud Spanner](https://cloud.google.com/spanner))
  could bring more resiliency and more security. ## Provision a Spanner database To
  provision a Spanner instance you can follow the following instructions: ```bash
  gcloud services enable spanner.googleapis.com SPANNER_REGION_CONFIG="<your-spanner-region-config-name>"
  # e.g. "regional-us-east5" SPANNER_INSTANCE_NAME=onlineboutique gcloud spanner instances
  create ${SPANNER_INSTANCE_NAME} \ --description="online boutique shopping cart"
  \ --config ${SPANNER_REGION_CONFIG} \ --instance-type free-instance ``` _Note: With
  latest version of `gcloud` we are creating a free Spanner instance._ To provision
  a Spanner database you can follow the following instructions: ```bash SPANNER_DATABASE_NAME=carts
  gcloud spanner databases create ${SPANNER_DATABASE_NAME} \ --instance ${SPANNER_INSTANCE_NAME}
  \ --database-dialect GOOGLE_STANDARD_SQL \ --ddl "CREATE TABLE CartItems (userId
  STRING(1024), productId STRING(1024), quantity INT64) PRIMARY KEY (userId, productId);
  CREATE INDEX CartItemsByUserId ON CartItems(userId);" ``` ## Grant the `cartservice`''s
  service account access to the Spanner database **Important note:** Your GKE cluster
  should have [Workload Identity enabled](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable).
  As a good practice, let''s create a dedicated least privilege Google Service Account
  to allow the `cartservice` to communicate with the Spanner database: ```bash PROJECT_ID=<your-project-id>
  SPANNER_DB_USER_GSA_NAME=spanner-db-user-sa SPANNER_DB_USER_GSA_ID=${SPANNER_DB_USER_GSA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com
  ONLINEBOUTIQUE_NAMESPACE=default CARTSERVICE_KSA_NAME=cartservice gcloud iam service-accounts
  create ${SPANNER_DB_USER_GSA_NAME} \ --display-name=${SPANNER_DB_USER_GSA_NAME}
  gcloud spanner databases add-iam-policy-binding ${SPANNER_DATABASE_NAME} \ --member
  "serviceAccount:${SPANNER_DB_USER_GSA_ID}" \ --role roles/spanner.databaseUser gcloud
  iam service-accounts add-iam-policy-binding ${SPANNER_DB_USER_GSA_ID} \ --member
  "serviceAccount:${PROJECT_ID}.svc.id.goog[${ONLINEBOUTIQUE_NAMESPACE}/${CARTSERVICE_KSA_NAME}]"
  \ --role roles/iam.workloadIdentityUser ``` ## Deploy Online Boutique connected
  to a Spanner database To automate the deployment of Online Boutique integrated with
  Spanner you can leverage the following variation with [Kustomize](../..). From the
  `kustomize/` folder at the root level of this repository, execute these commands:
  ```bash kustomize edit add component components/spanner ``` _Note: this Kustomize
  component will also remove the `redis-cart` `Deployment` and `Service` not used
  anymore._ This will update the `kustomize/kustomization.yaml` file which could be
  similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization
  resources: - base components: - components/spanner ``` Update current Kustomize
  manifest to target this Spanner database. ```bash sed -i "s/SPANNER_PROJECT/${PROJECT_ID}/g"
  components/spanner/kustomization.yaml sed -i "s/SPANNER_INSTANCE/${SPANNER_INSTANCE_NAME}/g"
  components/spanner/kustomization.yaml sed -i "s/SPANNER_DATABASE/${SPANNER_DATABASE_NAME}/g"
  components/spanner/kustomization.yaml sed -i "s/SPANNER_DB_USER_GSA_ID/${SPANNER_DB_USER_GSA_ID}/g"
  components/spanner/kustomization.yaml ``` You can locally render these manifests
  by running `kubectl kustomize .` as well as deploying them by running `kubectl apply
  -k .`. ## Note on Spanner connection environment variables The following environment
  variables will be used by the `cartservice`, if present: - `SPANNER_INSTANCE`: defaults
  to `onlineboutique`, unless specified. - `SPANNER_DATABASE`: defaults to `carts`,
  unless specified. - `SPANNER_CONNECTION_STRING`: defaults to `projects/${SPANNER_PROJECT}/instances/${SPANNER_INSTANCE}/databases/${SPANNER_DATABASE}`.
  If this variable is defined explicitly, all other environment variables will be
  ignored. ## Resources - [Use Google Cloud Spanner with the Online Boutique sample
  apps](https://medium.com/google-cloud/f7248e077339)'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: # cartservice - replace REDIS_ADDR by ALLOYDB_PRIMARY_IP
  for the cartservice Deployment # Potentially later we''ll factor in splitting traffic
  to primary/read pool, but for now # we''ll just manage the primary instance - patch:
  |- apiVersion: apps/v1 kind: Deployment metadata: name: cartservice spec: template:
  spec: containers: - name: server env: - name: REDIS_ADDR $patch: delete - name:
  ALLOYDB_PRIMARY_IP value: ALLOYDB_PRIMARY_IP_VAL - name: ALLOYDB_DATABASE_NAME value:
  ALLOYDB_CARTS_DATABASE_NAME_VAL - name: ALLOYDB_TABLE_NAME value: ALLOYDB_CARTS_TABLE_NAME_VAL
  - name: ALLOYDB_SECRET_NAME value: ALLOYDB_SECRET_NAME_VAL - name: PROJECT_ID value:
  PROJECT_ID_VAL # cartservice - add the GSA annotation for the cartservice KSA -
  patch: |- apiVersion: v1 kind: ServiceAccount metadata: name: cartservice annotations:
  iam.gke.io/gcp-service-account: ALLOYDB_USER_GSA_ID # productcatalogservice - replace
  ALLOYDB environments - patch: |- apiVersion: apps/v1 kind: Deployment metadata:
  name: productcatalogservice spec: template: spec: containers: - name: server env:
  - name: ALLOYDB_CLUSTER_NAME value: ALLOYDB_CLUSTER_NAME_VAL - name: ALLOYDB_INSTANCE_NAME
  value: ALLOYDB_INSTANCE_NAME_VAL - name: ALLOYDB_DATABASE_NAME value: ALLOYDB_PRODUCTS_DATABASE_NAME_VAL
  - name: ALLOYDB_TABLE_NAME value: ALLOYDB_PRODUCTS_TABLE_NAME_VAL - name: ALLOYDB_SECRET_NAME
  value: ALLOYDB_SECRET_NAME_VAL - name: PROJECT_ID value: PROJECT_ID_VAL - name:
  REGION value: REGION_VAL # productcatalogservice - add the GSA annotation for the
  productcatalogservice KSA - patch: |- apiVersion: v1 kind: ServiceAccount metadata:
  name: productcatalogservice annotations: iam.gke.io/gcp-service-account: ALLOYDB_USER_GSA_ID
  # redis - remove the redis-cart Deployment - patch: |- apiVersion: apps/v1 kind:
  Deployment metadata: name: redis-cart $patch: delete # redis - remove the redis-cart
  Service - patch: |- apiVersion: v1 kind: Service metadata: name: redis-cart $patch:
  delete'
- '# Integrate Online Boutique with AlloyDB By default the `cartservice` stores its
  data in an in-cluster Redis database. Using a fully managed database service outside
  your GKE cluster (such as [AlloyDB](https://cloud.google.com/alloydb)) could bring
  more resiliency and more security. Note that because of AlloyDB''s current connectivity,
  you''ll need to run all this from a VM with VPC access to the network you want to
  use for everything (out of the box this should just use the default network). The
  Cloud Shell doesn''t work because of transitive VPC peering not working. ## Provision
  an AlloyDB database and the supporting infrastructure Environmental variables needed
  for setup. These should be set in a .bashrc or similar as some of the variables
  are used in the application itself. Default values are supplied in this readme,
  but any of them can be changed. Anything in <> needs to be replaced. ```bash # PROJECT_ID
  should be set to the project ID that was created to hold the demo PROJECT_ID=<project_id>
  #Pick a region near you that also has AlloyDB available. See available regions:
  https://cloud.google.com/alloydb/docs/locations REGION=<region> USE_GKE_GCLOUD_AUTH_PLUGIN=True
  ALLOYDB_NETWORK=default ALLOYDB_SERVICE_NAME=onlineboutique-network-range ALLOYDB_CLUSTER_NAME=onlineboutique-cluster
  ALLOYDB_INSTANCE_NAME=onlineboutique-instance # **Note:** Primary and Read IP will
  need to be set after you create the instance. The command to set this in the shell
  is included below, but it would also be a good idea to run the command, and manually
  set the IP address in the .bashrc ALLOYDB_PRIMARY_IP=<ip set below after instance
  created> ALLOYDB_READ_IP=<ip set below after instance created> ALLOYDB_DATABASE_NAME=carts
  ALLOYDB_TABLE_NAME=cart_items ALLOYDB_USER_GSA_NAME=alloydb-user-sa ALLOYDB_USER_GSA_ID=${ALLOYDB_USER_GSA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com
  CARTSERVICE_KSA_NAME=cartservice ALLOYDB_SECRET_NAME=alloydb-secret # PGPASSWORD
  needs to be set in order to run the psql from the CLI easily. The value for this
  # needs to be set behind the Secret mentioned above PGPASSWORD=<password> ``` To
  provision an AlloyDB instance you can follow the following instructions: ```bash
  gcloud services enable alloydb.googleapis.com gcloud services enable servicenetworking.googleapis.com
  gcloud services enable secretmanager.googleapis.com # Set our DB credentials behind
  the secret. Replace <password> with whatever you want # to use as the credentials
  for the database. Don''t use $ in the password. echo <password> | gcloud secrets
  create ${ALLOYDB_SECRET_NAME} --data-file=- # Setting up needed service connection
  gcloud compute addresses create ${ALLOYDB_SERVICE_NAME} \ --global \ --purpose=VPC_PEERING
  \ --prefix-length=16 \ --description="Online Boutique Private Services" \ --network=${ALLOYDB_NETWORK}
  gcloud services vpc-peerings connect \ --service=servicenetworking.googleapis.com
  \ --ranges=${ALLOYDB_SERVICE_NAME} \ --network=${ALLOYDB_NETWORK} gcloud alloydb
  clusters create ${ALLOYDB_CLUSTER_NAME} \ --region=${REGION} \ --password=${PGPASSWORD}
  \ --disable-automated-backup \ --network=${ALLOYDB_NETWORK} gcloud alloydb instances
  create ${ALLOYDB_INSTANCE_NAME} \ --cluster=${ALLOYDB_CLUSTER_NAME} \ --region=${REGION}
  \ --cpu-count=4 \ --instance-type=PRIMARY gcloud alloydb instances create ${ALLOYDB_INSTANCE_NAME}-replica
  \ --cluster=${ALLOYDB_CLUSTER_NAME} \ --region=${REGION} \ --cpu-count=4 \ --instance-type=READ_POOL
  \ --read-pool-node-count=2 # Need to grab and store the IP addresses for our primary
  and read replicas # Don''t forget to set these two values in the environment for
  later use. ALLOYDB_PRIMARY_IP=gcloud alloydb instances list --region=${REGION} --cluster=${ALLOYDB_CLUSTER_NAME}
  --filter="INSTANCE_TYPE:PRIMARY" --format=flattened | sed -nE "s/ipAddress:\s*(.*)/\1/p"
  ALLOYDB_READ_IP=gcloud alloydb instances list --region=${REGION} --cluster=${ALLOYDB_CLUSTER_NAME}
  --filter="INSTANCE_TYPE:READ_POOL" --format=flattened | sed -nE "s/ipAddress:\s*(.*)/\1/p"
  psql -h ${ALLOYDB_PRIMARY_IP} -U postgres -c "CREATE DATABASE ${ALLOYDB_DATABASE_NAME}"
  psql -h ${ALLOYDB_PRIMARY_IP} -U postgres -d ${ALLOYDB_DATABASE_NAME} -c "CREATE
  TABLE ${ALLOYDB_TABLE_NAME} (userId text, productId text, quantity int, PRIMARY
  KEY(userId, productId))" psql -h ${ALLOYDB_PRIMARY_IP} -U postgres -d ${ALLOYDB_DATABASE_NAME}
  -c "CREATE INDEX cartItemsByUserId ON ${ALLOYDB_TABLE_NAME}(userId)" ```'
- 'list --region=${REGION} --cluster=${ALLOYDB_CLUSTER_NAME} --filter="INSTANCE_TYPE:PRIMARY"
  --format=flattened | sed -nE "s/ipAddress:\s*(.*)/\1/p" ALLOYDB_READ_IP=gcloud alloydb
  instances list --region=${REGION} --cluster=${ALLOYDB_CLUSTER_NAME} --filter="INSTANCE_TYPE:READ_POOL"
  --format=flattened | sed -nE "s/ipAddress:\s*(.*)/\1/p" psql -h ${ALLOYDB_PRIMARY_IP}
  -U postgres -c "CREATE DATABASE ${ALLOYDB_DATABASE_NAME}" psql -h ${ALLOYDB_PRIMARY_IP}
  -U postgres -d ${ALLOYDB_DATABASE_NAME} -c "CREATE TABLE ${ALLOYDB_TABLE_NAME} (userId
  text, productId text, quantity int, PRIMARY KEY(userId, productId))" psql -h ${ALLOYDB_PRIMARY_IP}
  -U postgres -d ${ALLOYDB_DATABASE_NAME} -c "CREATE INDEX cartItemsByUserId ON ${ALLOYDB_TABLE_NAME}(userId)"
  ``` _Note: It can take more than 20 minutes for the AlloyDB instances to be created._
  ## Grant the `cartservice`''s service account access to the AlloyDB database **Important
  note:** Your GKE cluster should have [Workload Identity enabled](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable).
  As a good practice, let''s create a dedicated least privilege Google Service Account
  to allow the `cartservice` to communicate with the AlloyDB database and grab the
  database password from the Secret manager.: ```bash gcloud iam service-accounts
  create ${ALLOYDB_USER_GSA_NAME} \ --display-name=${ALLOYDB_USER_GSA_NAME} gcloud
  projects add-iam-policy-binding ${PROJECT_ID} --member=serviceAccount:${ALLOYDB_USER_GSA_ID}
  --role=roles/alloydb.client gcloud projects add-iam-policy-binding ${PROJECT_ID}
  --member=serviceAccount:${ALLOYDB_USER_GSA_ID} --role=roles/secretmanager.secretAccessor
  gcloud iam service-accounts add-iam-policy-binding ${ALLOYDB_USER_GSA_ID} \ --member
  "serviceAccount:${PROJECT_ID}.svc.id.goog[default/${CARTSERVICE_KSA_NAME}]" \ --role
  roles/iam.workloadIdentityUser ``` ## Deploy Online Boutique connected to an AlloyDB
  database To automate the deployment of Online Boutique integrated with AlloyDB you
  can leverage the following variation with [Kustomize](../..). From the `kustomize/`
  folder at the root level of this repository, execute these commands: ```bash kustomize
  edit add component components/alloydb ``` _**Note:** this Kustomize component will
  also remove the `redis-cart` `Deployment` and `Service` not used anymore._ This
  will update the `kustomize/kustomization.yaml` file which could be similar to: ```yaml
  apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - base
  components: - components/alloydb ``` Update current Kustomize manifest to target
  this AlloyDB database. ```bash sed -i "s/PROJECT_ID_VAL/${PROJECT_ID}/g" components/alloydb/kustomization.yaml
  sed -i "s/ALLOYDB_PRIMARY_IP_VAL/${ALLOYDB_PRIMARY_IP}/g" components/alloydb/kustomization.yaml
  sed -i "s/ALLOYDB_USER_GSA_ID/${ALLOYDB_USER_GSA_ID}/g" components/alloydb/kustomization.yaml
  sed -i "s/ALLOYDB_DATABASE_NAME_VAL/${ALLOYDB_DATABASE_NAME}/g" components/alloydb/kustomization.yaml
  sed -i "s/ALLOYDB_TABLE_NAME_VAL/${ALLOYDB_TABLE_NAME}/g" components/alloydb/kustomization.yaml
  sed -i "s/ALLOYDB_SECRET_NAME_VAL/${ALLOYDB_SECRET_NAME}/g" components/alloydb/kustomization.yaml
  ``` You can locally render these manifests by running `kubectl kustomize .` as well
  as deploying them by running `kubectl apply -k .`. ## Extra cleanup steps ```bash
  gcloud compute addresses delete ${ALLOYDB_SERVICE_NAME} --global # Force takes care
  of cleaning up the instances inside the cluster automatically gcloud alloydb clusters
  delete ${ALLOYDB_CLUSTER_NAME} --force --region ${REGION} gcloud iam service-accounts
  delete ${ALLOYDB_USER_GSA_ID} gcloud secrets delete ${ALLOYDB_SECRET_NAME} ```'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: gateway.networking.k8s.io/v1beta1
  kind: Gateway metadata: name: istio-gateway spec: gatewayClassName: istio listeners:
  - name: http port: 80 protocol: HTTP allowedRoutes: namespaces: from: Same --- apiVersion:
  gateway.networking.k8s.io/v1beta1 kind: HTTPRoute metadata: name: frontend-route
  spec: parentRefs: - name: istio-gateway rules: - matches: - path: value: / backendRefs:
  - name: frontend port: 80'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry metadata: name: allow-egress-googleapis spec: hosts: - "accounts.google.com"
  # Used to get token - "*.googleapis.com" ports: - number: 80 protocol: HTTP name:
  http - number: 443 protocol: HTTPS name: https --- apiVersion: networking.istio.io/v1alpha3
  kind: ServiceEntry metadata: name: allow-egress-google-metadata spec: hosts: - metadata.google.internal
  addresses: - 169.254.169.254 # GCE metadata server ports: - number: 80 name: http
  protocol: HTTP - number: 443 name: https protocol: HTTPS'
- '# Copyright 2023 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component resources: - allow-egress-googleapis.yaml - frontend-gateway.yaml
  - frontend.yaml patches: # frontend - delete frontend-external service (same as
  non-public-frontend component) - patch: |- apiVersion: v1 kind: Service metadata:
  name: frontend-external $patch: delete'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService metadata: name: frontend spec: hosts: - "frontend.default.svc.cluster.local"
  http: - route: - destination: host: frontend port: number: 80'
- '# Service mesh with Istio You can use [Istio](https://istio.io) to enable [service
  mesh features](https://cloud.google.com/service-mesh/docs/overview) such as traffic
  management, observability, and security. Istio can be provisioned using Cloud Service
  Mesh (CSM), the Open Source Software (OSS) istioctl tool, or via other Istio providers.
  You can then label individual namespaces for sidecar injection and configure an
  Istio gateway to replace the frontend-external load balancer. # Setup The following
  CLI tools needs to be installed and in the PATH: - `gcloud` - `kubectl` - `kustomize`
  - `istioctl` (optional) 1. Set-up some default environment variables. ```sh PROJECT_ID="<your-project-id>"
  REGION="<your-google-cloud-region" CLUSTER_NAME="online-boutique" gcloud config
  set project $PROJECT_ID ``` # Provision a GKE Cluster 1. Create an Autopilot GKE
  cluster. ```sh gcloud container clusters create-auto $CLUSTER_NAME \ --location=$REGION
  ``` To make the best use of our service mesh, we need to have [GKE Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity),
  and the [Kubernetes Gateway API resource definitions](https://cloud.google.com/kubernetes-engine/docs/how-to/deploying-gateways)
  enabled. Autopilot takes care of this for us. 1. Change our kubectl context for
  the newly created cluster. ```sh gcloud container clusters get-credentials $CLUSTER_NAME
  \ --region $REGION ``` # Provision and Configure Istio Service Mesh ## (Option A)
  Provision managed Istio using Cloud Service Mesh Cloud Service Mesh (CSM) provides
  a service mesh experience that includes a fully managed control plane and data plane.
  The recommended way to [install CSM](https://cloud.google.com/service-mesh/docs/onboarding/provision-control-plane)
  uses [fleet management](https://cloud.google.com/kubernetes-engine/fleet-management/docs/fleet-creation).
  1. Enable the Cloud Service Mesh and GKE Enterprise APIs. ```sh gcloud services
  enable mesh.googleapis.com anthos.googleapis.com ``` 1. Enable service mesh support
  fleet-wide. ```sh gcloud container fleet mesh enable ``` 1. Register the GKE cluster
  to the fleet. ```sh gcloud container clusters update $CLUSTER_NAME \ --location
  $REGION \ --fleet-project $PROJECT_ID 1. Enable automatic management of the service
  mesh feature in the cluster. ```sh gcloud container fleet mesh update \ --management
  automatic \ --memberships $CLUSTER_NAME \ --project $PROJECT_ID \ --location $REGION
  ``` 1. Add the Istio injection labels to the default namespace. ```sh kubectl label
  namespace default \ istio.io/rev- istio-injection=enabled --overwrite ``` 1. Verify
  that the service mesh is fully provisioned. It will take several minutes for both
  the control plane and data plane to be ready. ```sh gcloud container fleet mesh
  describe ``` The output should be similar to: ``` createTime: ''2024-09-18T15:52:36.133664725Z''
  fleetDefaultMemberConfig: mesh: management: MANAGEMENT_AUTOMATIC membershipSpecs:
  projects/12345/locations/us-central1/memberships/online-boutique: mesh: management:
  MANAGEMENT_AUTOMATIC origin: type: USER membershipStates: projects/12345/locations/us-central1/memberships/online-boutique:
  servicemesh: conditions: - code: VPCSC_GA_SUPPORTED details: This control plane
  supports VPC-SC GA. documentationLink: http://cloud.google.com/service-mesh/docs/managed/vpc-sc
  severity: INFO controlPlaneManagement: details: - code: REVISION_READY details:
  ''Ready: asm-managed'' implementation: TRAFFIC_DIRECTOR state: ACTIVE dataPlaneManagement:
  details: - code: OK details: Service is running. state: ACTIVE state: code: OK description:
  ''Revision ready for use: asm-managed.'' updateTime: ''2024-09-18T16:30:37.632583401Z''
  name: projects/my-project/locations/global/features/servicemesh resourceState: state:
  ACTIVE spec: {} updateTime: ''2024-09-18T16:15:05.957266437Z'' ``` 1. (Optional)
  If you require Certificate Authority Service, you can configure it by [following
  these instructions](https://cloud.google.com/service-mesh/docs/security/certificate-authority-service).
  ## (Option B) Provision Istio using istioctl 1. Alternatively you can install the
  open source version of Istio by following the [getting started guide](https://istio.io/latest/docs/setup/getting-started/).
  ```sh # Install istio 1.17 or above istioctl install --set profile=minimal -y #
  Enable sidecar injection for Kubernetes namespace(s) where microservices-demo is
  deployed kubectl label namespace default istio-injection=enabled # Make sure the
  istiod injection webhook port 15017 is accessible'
- 'instructions](https://cloud.google.com/service-mesh/docs/security/certificate-authority-service).
  ## (Option B) Provision Istio using istioctl 1. Alternatively you can install the
  open source version of Istio by following the [getting started guide](https://istio.io/latest/docs/setup/getting-started/).
  ```sh # Install istio 1.17 or above istioctl install --set profile=minimal -y #
  Enable sidecar injection for Kubernetes namespace(s) where microservices-demo is
  deployed kubectl label namespace default istio-injection=enabled # Make sure the
  istiod injection webhook port 15017 is accessible via GKE master nodes # Otherwise
  your replicaset-controller may be blocked when trying to create new pods with: #
  Error creating: Internal error occurred: failed calling # webhook "namespace.sidecar-injector.istio.io"
  ... context deadline exceeded gcloud compute firewall-rules list --filter="name~gke-[0-9a-z-]*-master"
  NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED gke-online-boutique-c94d71e8-master
  gke-vpc INGRESS 1000 tcp:10250,tcp:443 False # Update firewall rule (or create a
  new one) to allow webhook port 15017 gcloud compute firewall-rules update gke-online-boutique-c94d71e8-master
  \ --allow tcp:10250,tcp:443,tcp:15017 ``` # Deploy Online Boutique with the Istio
  component Once the service mesh and namespace injection are configured, you can
  then deploy the Istio manifests using Kustomize. You should also include the [service-accounts
  component](../service-accounts) if you plan on using AuthorizationPolicies. 1. Enable
  the service-mesh-istio component. ```sh cd kustomize/ kustomize edit add component
  components/service-mesh-istio ``` This will update the `kustomize/kustomization.yaml`
  file which could be similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/service-mesh-istio
  ``` _Note: `service-mesh-istio` component includes the same delete patch as the
  `non-public-frontend` component. Trying to use both those components in your kustomization.yaml
  file will result in an error._ 1. Deploy the manifests. ```sh kubectl apply -k .
  ``` The output should be similar to: ``` serviceaccount/adservice created serviceaccount/cartservice
  created serviceaccount/checkoutservice created serviceaccount/currencyservice created
  serviceaccount/emailservice created serviceaccount/frontend created serviceaccount/loadgenerator
  created serviceaccount/paymentservice created serviceaccount/productcatalogservice
  created serviceaccount/recommendationservice created serviceaccount/shippingservice
  created service/adservice created service/cartservice created service/checkoutservice
  created service/currencyservice created service/emailservice created service/frontend
  created service/paymentservice created service/productcatalogservice created service/recommendationservice
  created service/redis-cart created service/shippingservice created deployment.apps/adservice
  created deployment.apps/cartservice created deployment.apps/checkoutservice created
  deployment.apps/currencyservice created deployment.apps/emailservice created deployment.apps/frontend
  created deployment.apps/loadgenerator created deployment.apps/paymentservice created
  deployment.apps/productcatalogservice created deployment.apps/recommendationservice
  created deployment.apps/redis-cart created deployment.apps/shippingservice created
  gateway.gateway.networking.k8s.io/istio-gateway created httproute.gateway.networking.k8s.io/frontend-route
  created serviceentry.networking.istio.io/allow-egress-google-metadata created serviceentry.networking.istio.io/allow-egress-googleapis
  created virtualservice.networking.istio.io/frontend created ``` # Verify that the
  deployment succeeded 1. Check that the pods and the gateway are in a healthy and
  ready state. ```sh kubectl get pods,gateways,services ``` The output should be similar
  to: ``` NAME READY STATUS RESTARTS AGE pod/adservice-6cbd9794f9-8c4gv 2/2 Running
  0 47s pod/cartservice-667bbd5f6-84j8v 2/2 Running 0 47s pod/checkoutservice-547557f445-bw46n
  2/2 Running 0 47s pod/currencyservice-6bd8885d9c-2cszv 2/2 Running 0 47s pod/emailservice-64997dcf97-8fpsd
  2/2 Running 0 47s pod/frontend-c54778dcf-wbgmr 2/2 Running 0 46s pod/istio-gateway-istio-8577b948c6-cxl8j
  1/1 Running 0 45s pod/loadgenerator-ccfd4d598-jh6xj 2/2 Running 0 46s pod/paymentservice-79b77cd7c-6hth7
  2/2 Running 0 46s pod/productcatalogservice-5f75795545-nk5wv 2/2 Running 0 46s pod/recommendationservice-56dd4c7df5-gnwwr
  2/2 Running 0 46s pod/redis-cart-799c85c644-pxsvt 2/2 Running 0 46s pod/shippingservice-64f8df74f5-7wllf
  2/2 Running 0 45s NAME CLASS ADDRESS READY AGE gateway.gateway.networking.k8s.io/istio-gateway
  istio 35.247.123.146 True 45s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/adservice
  ClusterIP 10.68.231.142 <none> 9555/TCP 49s service/cartservice ClusterIP 10.68.184.25
  <none> 7070/TCP 49s service/checkoutservice ClusterIP 10.68.177.213 <none> 5050/TCP
  49s service/currencyservice ClusterIP 10.68.249.87 <none> 7000/TCP 49s service/emailservice
  ClusterIP 10.68.205.123 <none> 5000/TCP 49s service/frontend ClusterIP 10.68.94.203
  <none> 80/TCP 48s service/istio-gateway-istio LoadBalancer 10.68.147.158 35.247.123.146
  15021:30376/TCP,80:30332/TCP 45s service/kubernetes ClusterIP 10.68.0.1 <none> 443/TCP
  65m service/paymentservice ClusterIP 10.68.114.19 <none> 50051/TCP 48s service/productcatalogservice
  ClusterIP'
- 'True 45s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/adservice ClusterIP
  10.68.231.142 <none> 9555/TCP 49s service/cartservice ClusterIP 10.68.184.25 <none>
  7070/TCP 49s service/checkoutservice ClusterIP 10.68.177.213 <none> 5050/TCP 49s
  service/currencyservice ClusterIP 10.68.249.87 <none> 7000/TCP 49s service/emailservice
  ClusterIP 10.68.205.123 <none> 5000/TCP 49s service/frontend ClusterIP 10.68.94.203
  <none> 80/TCP 48s service/istio-gateway-istio LoadBalancer 10.68.147.158 35.247.123.146
  15021:30376/TCP,80:30332/TCP 45s service/kubernetes ClusterIP 10.68.0.1 <none> 443/TCP
  65m service/paymentservice ClusterIP 10.68.114.19 <none> 50051/TCP 48s service/productcatalogservice
  ClusterIP 10.68.240.153 <none> 3550/TCP 48s service/recommendationservice ClusterIP
  10.68.117.97 <none> 8080/TCP 48s service/redis-cart ClusterIP 10.68.189.126 <none>
  6379/TCP 48s service/shippingservice ClusterIP 10.68.221.62 <none> 50051/TCP 48s
  ``` 1. Find the external IP address of your Istio gateway. ```sh INGRESS_HOST="$(kubectl
  get gateway istio-gateway \ -o jsonpath=''{.status.addresses[*].value}'')" ``` 1.
  Navigate to the frontend in a web browser. ``` http://$INGRESS_HOST ``` # Additional
  service mesh demos using Online Boutique - [Canary deployment](https://github.com/GoogleCloudPlatform/istio-samples/tree/master/istio-canary-gke)
  - [Security (mTLS, JWT, Authorization)](https://github.com/GoogleCloudPlatform/istio-samples/tree/master/security-intro)
  - [Cloud Operations (Stackdriver)](https://github.com/GoogleCloudPlatform/istio-samples/tree/master/istio-stackdriver)
  - [Stackdriver metrics (Open source Istio)](https://github.com/GoogleCloudPlatform/istio-samples/tree/master/stackdriver-metrics)
  # Related resources - [Deploying classic istio-ingressgateway in ASM](https://cloud.google.com/service-mesh/docs/gateways#deploy_gateways)
  - [Uninstall Istio via istioctl](https://istio.io/latest/docs/setup/install/istioctl/#uninstall-istio)
  - [Uninstall Cloud Service Mesh](https://cloud.google.com/service-mesh/docs/uninstall)'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component images: - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/adservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/cartservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/checkoutservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/currencyservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/emailservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/paymentservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/productcatalogservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX - name: us-central1-docker.pkg.dev/google-samples/microservices-demo/shippingservice
  tagSuffix: CONTAINER_IMAGES_TAG_SUFFIX'
- '# Add a suffix to the image tag of the Online Boutique container images You may
  want to add a suffix to the Online Boutique container image tag to target a specific
  version. The Kustomize Component inside this folder can help. ## Add a suffix to
  the container image tag via Kustomize To automate the deployment of the Online Boutique
  apps with a suffix added to the container imag tag, you can leverage the following
  variation with [Kustomize](../..). From the `kustomize/` folder at the root level
  of this repository, execute this command: ```bash SUFFIX=-my-suffix sed -i "s/CONTAINER_IMAGES_TAG_SUFFIX/$SUFFIX/g"
  components/container-images-tag-suffix/kustomization.yaml kustomize edit add component
  components/container-images-tag-suffix ``` _Note: this Kustomize component will
  add a suffix to the container image tag of the `image:` field in all `Deployments`._
  This will update the `kustomize/kustomization.yaml` file which could be similar
  to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources:
  - base components: - components/container-images-tag-suffix ``` You can locally
  render these manifests by running `kubectl kustomize . | sed "s/$SUFFIX$SUFFIX/$SUFFIX/g"`
  as well as deploying them by running `kubectl kustomize . | sed "s/$SUFFIX$SUFFIX/$SUFFIX/g"
  | kubectl apply -f`. _Note: for this variation, `kubectl apply -k .` alone won''t
  work because there is a [known issue currently in Kustomize](https://github.com/kubernetes-sigs/kustomize/issues/4814)
  where the `tagSuffix` is duplicated. The `sed "s/$SUFFIX$SUFFIX/$SUFFIX/g"` commands
  above are a temporary workaround._ ## Combine with other Kustomize Components If
  you''re combining this Kustomize Component with other variations, here are some
  considerations: - `components/container-images-tag-suffix` should be placed before
  `components/container-images-registry` - `components/container-images-tag-suffix`
  should be placed after `components/container-images-tag` So for example here is
  the order respected: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization
  resources: - base components: - components/container-images-tag - components/container-images-tag-suffix
  - components/container-images-registry ```'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component patches: # frontend - delete frontend-external service - patch:
  |- apiVersion: v1 kind: Service metadata: name: frontend-external $patch: delete'
- '# Remove the public exposure of Online Boutique''s frontend By default, when you
  deploy Online Boutique, a `Service` (named `frontend-external`) of type `LoadBalancer`
  is deployed with a publicly accessible IP address. But you may not want to expose
  this sample app publicly. ## Deploy Online Boutique without the default public endpoint
  To automate the deployment of Online Boutique without the default public endpoint
  you can leverage the following variation with [Kustomize](../..). From the `kustomize/`
  folder at the root level of this repository, execute this command: ```bash kustomize
  edit add component components/non-public-frontend ``` This will update the `kustomize/kustomization.yaml`
  file which could be similar to: ```yaml apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - base components: - components/non-public-frontend
  ``` You can locally render these manifests by running `kubectl kustomize .` as well
  as deploying them by running `kubectl apply -k .`.'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1alpha1
  kind: Component resources: - shoppingassistantservice.yaml patches: - patch: |-
  apiVersion: apps/v1 kind: Deployment metadata: name: frontend spec: template: spec:
  containers: - name: server env: - name: ENABLE_ASSISTANT value: "true"'
- '# Shopping Assistant with RAG & AlloyDB This demo adds a new service to Online
  Boutique called `shoppingassistantservice` which, alongside an Alloy-DB backed products
  catalog, adds a RAG-featured AI assistant to the frontned experience, helping users
  suggest products matching their home decor. ## Setup instructions **Note:** This
  demo requires a Google Cloud project where you to have the `owner` role, else you
  may be unable to enable APIs or modify VPC rules that are needed for this demo.
  1. Set some environment variables. ```sh export PROJECT_ID=<project_id> export PROJECT_NUMBER=<project_number>
  export PGPASSWORD=<pgpassword> ``` **Note**: The project ID and project number of
  your Google Cloud project can be found in the Console. The PostgreSQL password can
  be set to anything you want, but make sure to note it down. 1. Change your default
  Google Cloud project. ```sh gcloud auth login gcloud config set project $PROJECT_ID
  ``` 1. Enable the Google Kubernetes Engine (GKE) and Artifact Registry (AR) APIs.
  ```sh gcloud services enable container.googleapis.com gcloud services enable artifactregistry.googleapis.com
  ``` 1. Create a GKE Autopilot cluster. This may take a few minutes. ```sh gcloud
  container clusters create-auto cymbal-shops \ --region=us-central1 ``` 1. Change
  your Kubernetes context to your newly created GKE cluster. ```sh gcloud container
  clusters get-credentials cymbal-shops \ --region us-central1 ``` 1. Create an Artifact
  Registry container image repository. ```sh gcloud artifacts repositories create
  images \ --repository-format=docker \ --location=us-central1 ``` 1. Clone the `microservices-demo`
  repository locally. ```sh git clone https://github.com/GoogleCloudPlatform/microservices-demo
  \ && cd microservices-demo/ ``` 1. Run script #1. If it asks about policy bindings,
  select the option `None`. This may take a few minutes. ```sh ./kustomize/components/shopping-assistant/scripts/1_deploy_alloydb_infra.sh
  ``` **Note**: If you are on macOS and use a non-GNU version of `sed`, you may have
  to tweak the script to use `gsed` instead. 1. Create a Linux VM in Compute Engine
  (GCE). ```sh gcloud compute instances create gce-linux \ --zone=us-central1-a \
  --machine-type=e2-micro \ --image-family=debian-12 \ --image-project=debian-cloud
  ``` 1. SSH into the VM. From here until we exit, all steps happen in the VM. ```sh
  gcloud compute ssh gce-linux \ --zone "us-central1-a" ``` 1. Install the Postgres
  client and set your default Google Cloud project. ```sh sudo apt-get install -y
  postgresql-client gcloud auth login gcloud config set project <PROJECT_ID> ``` 1.
  Copy script #2, the python script, and the products.json to the VM. Make sure the
  scripts are executable. ```sh nano 2_create_populate_alloydb_tables.sh # paste content
  nano generate_sql_from_products.py # paste content nano products.json # paste content
  chmod +x 2_create_populate_alloydb_tables.sh chmod +x generate_sql_from_products.py
  ``` **Note:** You can find the files at the following places: - `kustomize/components/shopping-assistant/scripts/2_create_populate_alloydb_tables.sh`
  - `kustomize/components/shopping-assistant/scripts/generate_sql_from_products.py`
  - `src/productcatalogservice/products.json` 1. Run script #2 in the VM. If it asks
  for a postgres password, it should be the same that you set in script #1 earlier.
  This may take a few minutes. ```sh ./2_create_populate_alloydb_tables.sh ``` 1.
  Exit SSH. ```sh exit ``` 1. Create an API key in the [Credentials page](https://pantheon.corp.google.com/apis/credentials)
  with permissions for "Generative Language API", and make note of the secret key.
  1. Replace the Google API key placeholder in the shoppingassistant service. ```sh
  export GOOGLE_API_KEY=<google_api_key> sed -i "s/GOOGLE_API_KEY_VAL/${GOOGLE_API_KEY}/g"
  kustomize/components/shopping-assistant/shoppingassistantservice.yaml ``` 1. Edit
  the root Kustomize file to enable'
- 'This may take a few minutes. ```sh ./2_create_populate_alloydb_tables.sh ``` 1.
  Exit SSH. ```sh exit ``` 1. Create an API key in the [Credentials page](https://pantheon.corp.google.com/apis/credentials)
  with permissions for "Generative Language API", and make note of the secret key.
  1. Replace the Google API key placeholder in the shoppingassistant service. ```sh
  export GOOGLE_API_KEY=<google_api_key> sed -i "s/GOOGLE_API_KEY_VAL/${GOOGLE_API_KEY}/g"
  kustomize/components/shopping-assistant/shoppingassistantservice.yaml ``` 1. Edit
  the root Kustomize file to enable the `alloydb` and `shopping-assistant` components.
  ```sh nano kubernetes-manifests/kustomization.yaml # make the modifications below
  ``` ```yaml # ...head of the file components: # remove this comment # - ../kustomize/components/cymbal-branding
  # - ../kustomize/components/google-cloud-operations # - ../kustomize/components/memorystore
  # - ../kustomize/components/network-policies - ../kustomize/components/alloydb #
  remove this comment - ../kustomize/components/shopping-assistant # remove this comment
  # - ../kustomize/components/spanner # - ../kustomize/components/container-images-tag
  # - ../kustomize/components/container-images-tag-suffix # - ../kustomize/components/container-images-registry
  ``` 1. Deploy to the GKE cluster. ```sh skaffold run --default-repo=us-central1-docker.pkg.dev/$PROJECT_ID/images
  ``` 1. Wait for all the pods to be up and running. You can then find the external
  IP and navigate to it. ```sh kubectl get pods kubectl get services ```'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: shoppingassistantservice labels: app: shoppingassistantservice
  spec: selector: matchLabels: app: shoppingassistantservice template: metadata: labels:
  app: shoppingassistantservice spec: serviceAccountName: shoppingassistantservice
  terminationGracePeriodSeconds: 5 securityContext: fsGroup: 1000 runAsGroup: 1000
  runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: false
  image: shoppingassistantservice ports: - name: http containerPort: 8080 env: - name:
  GOOGLE_API_KEY value: GOOGLE_API_KEY_VAL - name: ALLOYDB_CLUSTER_NAME value: ALLOYDB_CLUSTER_NAME_VAL
  - name: ALLOYDB_INSTANCE_NAME value: ALLOYDB_INSTANCE_NAME_VAL - name: ALLOYDB_DATABASE_NAME
  value: ALLOYDB_DATABASE_NAME_VAL - name: ALLOYDB_TABLE_NAME value: ALLOYDB_TABLE_NAME_VAL
  - name: ALLOYDB_SECRET_NAME value: ALLOYDB_SECRET_NAME_VAL - name: PROJECT_ID value:
  PROJECT_ID_VAL - name: REGION value: REGION_VAL resources: requests: cpu: 100m memory:
  64Mi limits: cpu: 200m memory: 128Mi --- apiVersion: v1 kind: Service metadata:
  name: shoppingassistantservice labels: app: shoppingassistantservice spec: type:
  ClusterIP selector: app: shoppingassistantservice ports: - name: http port: 80 targetPort:
  8080 --- apiVersion: v1 kind: ServiceAccount metadata: name: shoppingassistantservice
  annotations: iam.gke.io/gcp-service-account: ALLOYDB_USER_GSA_ID'
- '# Copyright 2024 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import json table_name
  = "catalog_items" fields = [ ''id'', ''name'', ''description'', ''picture'', ''price_usd_currency_code'',
  ''price_usd_units'', ''price_usd_nanos'', ''categories'' ] # Load the produts JSON
  with open("products.json", ''r'') as f: data = json.load(f) # Generate SQL INSERT
  statements for product in data[''products'']: columns = '', ''.join(fields) placeholders
  = '', ''.join([''{}''] * len(fields)) sql = f"INSERT INTO {table_name} ({columns})
  VALUES ({placeholders});" # Escape single quotes within product data product[''name'']
  = product[''name''].replace("''", "") product[''description''] = product[''description''].replace("''",
  "") escaped_values = ( f"''{product[''id'']}''", f"''{product[''name'']}''", f"''{product[''description'']}''",
  f"''{product[''picture'']}''", f"''{product[''priceUsd''][''currencyCode'']}''",
  product[''priceUsd''][''units''], product[''priceUsd''][''nanos''], f"''{'',''.join(product[''categories''])}''"
  ) # Render the formatted SQL query print(sql.format(*escaped_values))'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: emailservice labels: app: emailservice spec: selector:
  matchLabels: app: emailservice template: metadata: labels: app: emailservice spec:
  serviceAccountName: emailservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/emailservice:v0.10.3
  ports: - containerPort: 8080 env: - name: PORT value: "8080" - name: DISABLE_PROFILER
  value: "1" readinessProbe: periodSeconds: 5 grpc: port: 8080 livenessProbe: periodSeconds:
  5 grpc: port: 8080 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m
  memory: 128Mi --- apiVersion: v1 kind: Service metadata: name: emailservice labels:
  app: emailservice spec: type: ClusterIP selector: app: emailservice ports: - name:
  grpc port: 5000 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: emailservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: checkoutservice labels: app: checkoutservice spec: selector:
  matchLabels: app: checkoutservice template: metadata: labels: app: checkoutservice
  spec: serviceAccountName: checkoutservice securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/checkoutservice:v0.10.3
  ports: - containerPort: 5050 readinessProbe: grpc: port: 5050 livenessProbe: grpc:
  port: 5050 env: - name: PORT value: "5050" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "productcatalogservice:3550" - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051"
  - name: PAYMENT_SERVICE_ADDR value: "paymentservice:50051" - name: EMAIL_SERVICE_ADDR
  value: "emailservice:5000" - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000"
  - name: CART_SERVICE_ADDR value: "cartservice:7070" resources: requests: cpu: 100m
  memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion: v1 kind: Service metadata:
  name: checkoutservice labels: app: checkoutservice spec: type: ClusterIP selector:
  app: checkoutservice ports: - name: grpc port: 5050 targetPort: 5050 --- apiVersion:
  v1 kind: ServiceAccount metadata: name: checkoutservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: recommendationservice labels: app: recommendationservice
  spec: selector: matchLabels: app: recommendationservice template: metadata: labels:
  app: recommendationservice spec: serviceAccountName: recommendationservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice:v0.10.3
  ports: - containerPort: 8080 readinessProbe: periodSeconds: 5 grpc: port: 8080 livenessProbe:
  periodSeconds: 5 grpc: port: 8080 env: - name: PORT value: "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR
  value: "productcatalogservice:3550" - name: DISABLE_PROFILER value: "1" resources:
  requests: cpu: 100m memory: 220Mi limits: cpu: 200m memory: 450Mi --- apiVersion:
  v1 kind: Service metadata: name: recommendationservice labels: app: recommendationservice
  spec: type: ClusterIP selector: app: recommendationservice ports: - name: grpc port:
  8080 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata: name: recommendationservice'
- '# Copyright 2022 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: kustomize.config.k8s.io/v1beta1
  kind: Kustomization resources: - adservice.yaml - cartservice.yaml - checkoutservice.yaml
  - currencyservice.yaml - emailservice.yaml - frontend.yaml - loadgenerator.yaml
  - paymentservice.yaml - productcatalogservice.yaml - recommendationservice.yaml
  - shippingservice.yaml'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: frontend labels: app: frontend spec: selector: matchLabels:
  app: frontend template: metadata: labels: app: frontend annotations: sidecar.istio.io/rewriteAppHTTPProbers:
  "true" spec: serviceAccountName: frontend securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend:v0.10.3
  ports: - containerPort: 8080 readinessProbe: initialDelaySeconds: 10 httpGet: path:
  "/_healthz" port: 8080 httpHeaders: - name: "Cookie" value: "shop_session-id=x-readiness-probe"
  livenessProbe: initialDelaySeconds: 10 httpGet: path: "/_healthz" port: 8080 httpHeaders:
  - name: "Cookie" value: "shop_session-id=x-liveness-probe" env: - name: PORT value:
  "8080" - name: PRODUCT_CATALOG_SERVICE_ADDR value: "productcatalogservice:3550"
  - name: CURRENCY_SERVICE_ADDR value: "currencyservice:7000" - name: CART_SERVICE_ADDR
  value: "cartservice:7070" - name: RECOMMENDATION_SERVICE_ADDR value: "recommendationservice:8080"
  - name: SHIPPING_SERVICE_ADDR value: "shippingservice:50051" - name: CHECKOUT_SERVICE_ADDR
  value: "checkoutservice:5050" - name: AD_SERVICE_ADDR value: "adservice:9555" -
  name: SHOPPING_ASSISTANT_SERVICE_ADDR value: "shoppingassistantservice:80" # # ENV_PLATFORM:
  One of: local, gcp, aws, azure, onprem, alibaba # # When not set, defaults to "local"
  unless running in GKE, otherwies auto-sets to gcp # - name: ENV_PLATFORM # value:
  "aws" - name: ENABLE_PROFILER value: "0" # - name: CYMBAL_BRANDING # value: "true"
  # - name: ENABLE_ASSISTANT # value: "true" # - name: FRONTEND_MESSAGE # value: "Replace
  this with a message you want to display on all pages." # As part of an optional
  Google Cloud demo, you can run an optional microservice called the "packaging service".
  # - name: PACKAGING_SERVICE_URL # value: "" # This value would look like "http://123.123.123"
  resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi ---
  apiVersion: v1 kind: Service metadata: name: frontend labels: app: frontend spec:
  type: ClusterIP selector: app: frontend ports: - name: http port: 80 targetPort:
  8080 --- apiVersion: v1 kind: Service metadata: name: frontend-external labels:
  app: frontend spec: type: LoadBalancer selector: app: frontend ports: - name: http
  port: 80 targetPort: 8080 --- apiVersion: v1 kind: ServiceAccount metadata: name:
  frontend'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: paymentservice labels: app: paymentservice spec: selector:
  matchLabels: app: paymentservice template: metadata: labels: app: paymentservice
  spec: serviceAccountName: paymentservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/paymentservice:v0.10.3
  ports: - containerPort: 50051 env: - name: PORT value: "50051" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 50051 livenessProbe: grpc: port: 50051 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: paymentservice labels: app: paymentservice spec:
  type: ClusterIP selector: app: paymentservice ports: - name: grpc port: 50051 targetPort:
  50051 --- apiVersion: v1 kind: ServiceAccount metadata: name: paymentservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: productcatalogservice labels: app: productcatalogservice
  spec: selector: matchLabels: app: productcatalogservice template: metadata: labels:
  app: productcatalogservice spec: serviceAccountName: productcatalogservice terminationGracePeriodSeconds:
  5 securityContext: fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser:
  1000 containers: - name: server securityContext: allowPrivilegeEscalation: false
  capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/productcatalogservice:v0.10.3
  ports: - containerPort: 3550 env: - name: PORT value: "3550" - name: DISABLE_PROFILER
  value: "1" readinessProbe: grpc: port: 3550 livenessProbe: grpc: port: 3550 resources:
  requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory: 128Mi --- apiVersion:
  v1 kind: Service metadata: name: productcatalogservice labels: app: productcatalogservice
  spec: type: ClusterIP selector: app: productcatalogservice ports: - name: grpc port:
  3550 targetPort: 3550 --- apiVersion: v1 kind: ServiceAccount metadata: name: productcatalogservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: cartservice labels: app: cartservice spec: selector:
  matchLabels: app: cartservice template: metadata: labels: app: cartservice spec:
  serviceAccountName: cartservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/cartservice:v0.10.3
  ports: - containerPort: 7070 env: - name: REDIS_ADDR value: "redis-cart:6379" resources:
  requests: cpu: 200m memory: 64Mi limits: cpu: 300m memory: 128Mi readinessProbe:
  initialDelaySeconds: 15 grpc: port: 7070 livenessProbe: initialDelaySeconds: 15
  periodSeconds: 10 grpc: port: 7070 --- apiVersion: v1 kind: Service metadata: name:
  cartservice labels: app: cartservice spec: type: ClusterIP selector: app: cartservice
  ports: - name: grpc port: 7070 targetPort: 7070 --- apiVersion: v1 kind: ServiceAccount
  metadata: name: cartservice --- apiVersion: apps/v1 kind: Deployment metadata: name:
  redis-cart labels: app: redis-cart spec: selector: matchLabels: app: redis-cart
  template: metadata: labels: app: redis-cart spec: securityContext: fsGroup: 1000
  runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: - name: redis securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: redis:alpine ports: - containerPort: 6379 readinessProbe: periodSeconds:
  5 tcpSocket: port: 6379 livenessProbe: periodSeconds: 5 tcpSocket: port: 6379 volumeMounts:
  - mountPath: /data name: redis-data resources: limits: memory: 256Mi cpu: 125m requests:
  cpu: 70m memory: 200Mi volumes: - name: redis-data emptyDir: {} --- apiVersion:
  v1 kind: Service metadata: name: redis-cart labels: app: redis-cart spec: type:
  ClusterIP selector: app: redis-cart ports: - name: tcp-redis port: 6379 targetPort:
  6379'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: loadgenerator labels: app: loadgenerator spec: selector:
  matchLabels: app: loadgenerator replicas: 1 template: metadata: labels: app: loadgenerator
  annotations: sidecar.istio.io/rewriteAppHTTPProbers: "true" spec: serviceAccountName:
  loadgenerator terminationGracePeriodSeconds: 5 restartPolicy: Always securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 initContainers:
  - command: - /bin/sh - -exc - | MAX_RETRIES=12 RETRY_INTERVAL=10 for i in $(seq
  1 $MAX_RETRIES); do echo "Attempt $i: Pinging frontend: ${FRONTEND_ADDR}..." STATUSCODE=$(wget
  --server-response http://${FRONTEND_ADDR} 2>&1 | awk ''/^ HTTP/{print $2}'') if
  [ $STATUSCODE -eq 200 ]; then echo "Frontend is reachable." exit 0 fi echo "Error:
  Could not reach frontend - Status code: ${STATUSCODE}" sleep $RETRY_INTERVAL done
  echo "Failed to reach frontend after $MAX_RETRIES attempts." exit 1 name: frontend-check
  securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged:
  false readOnlyRootFilesystem: true image: busybox:latest env: - name: FRONTEND_ADDR
  value: "frontend:80" containers: - name: main securityContext: allowPrivilegeEscalation:
  false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem: true image:
  us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator:v0.10.3
  env: - name: FRONTEND_ADDR value: "frontend:80" - name: USERS value: "10" - name:
  RATE value: "1" resources: requests: cpu: 300m memory: 256Mi limits: cpu: 500m memory:
  512Mi --- apiVersion: v1 kind: ServiceAccount metadata: name: loadgenerator'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: currencyservice labels: app: currencyservice spec: selector:
  matchLabels: app: currencyservice template: metadata: labels: app: currencyservice
  spec: serviceAccountName: currencyservice terminationGracePeriodSeconds: 5 securityContext:
  fsGroup: 1000 runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 containers: -
  name: server securityContext: allowPrivilegeEscalation: false capabilities: drop:
  - ALL privileged: false readOnlyRootFilesystem: true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/currencyservice:v0.10.3
  ports: - name: grpc containerPort: 7000 env: - name: PORT value: "7000" - name:
  DISABLE_PROFILER value: "1" readinessProbe: grpc: port: 7000 livenessProbe: grpc:
  port: 7000 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory:
  128Mi --- apiVersion: v1 kind: Service metadata: name: currencyservice labels: app:
  currencyservice spec: type: ClusterIP selector: app: currencyservice ports: - name:
  grpc port: 7000 targetPort: 7000 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: currencyservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: shippingservice labels: app: shippingservice spec: selector:
  matchLabels: app: shippingservice template: metadata: labels: app: shippingservice
  spec: serviceAccountName: shippingservice securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/shippingservice:v0.10.3
  ports: - containerPort: 50051 env: - name: PORT value: "50051" - name: DISABLE_PROFILER
  value: "1" readinessProbe: periodSeconds: 5 grpc: port: 50051 livenessProbe: grpc:
  port: 50051 resources: requests: cpu: 100m memory: 64Mi limits: cpu: 200m memory:
  128Mi --- apiVersion: v1 kind: Service metadata: name: shippingservice labels: app:
  shippingservice spec: type: ClusterIP selector: app: shippingservice ports: - name:
  grpc port: 50051 targetPort: 50051 --- apiVersion: v1 kind: ServiceAccount metadata:
  name: shippingservice'
- '# Copyright 2018 Google LLC # # Licensed under the Apache License, Version 2.0
  (the "License"); # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. apiVersion: apps/v1 kind:
  Deployment metadata: name: adservice labels: app: adservice spec: selector: matchLabels:
  app: adservice template: metadata: labels: app: adservice spec: serviceAccountName:
  adservice terminationGracePeriodSeconds: 5 securityContext: fsGroup: 1000 runAsGroup:
  1000 runAsNonRoot: true runAsUser: 1000 containers: - name: server securityContext:
  allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false readOnlyRootFilesystem:
  true image: us-central1-docker.pkg.dev/google-samples/microservices-demo/adservice:v0.10.3
  ports: - containerPort: 9555 env: - name: PORT value: "9555" resources: requests:
  cpu: 200m memory: 180Mi limits: cpu: 300m memory: 300Mi readinessProbe: initialDelaySeconds:
  20 periodSeconds: 15 grpc: port: 9555 livenessProbe: initialDelaySeconds: 20 periodSeconds:
  15 grpc: port: 9555 --- apiVersion: v1 kind: Service metadata: name: adservice labels:
  app: adservice spec: type: ClusterIP selector: app: adservice ports: - name: grpc
  port: 9555 targetPort: 9555 --- apiVersion: v1 kind: ServiceAccount metadata: name:
  adservice'
- '# Ad Service The Ad service provides advertisement based on context keys. If no
  context keys are provided then it returns random ads. ## Building locally The Ad
  service uses gradlew to compile/install/distribute. Gradle wrapper is already part
  of the source code. To build Ad Service, run: ``` ./gradlew installDist ``` It will
  create executable script src/adservice/build/install/hipstershop/bin/AdService ###
  Upgrading gradle version If you need to upgrade the version of gradle then run ```
  ./gradlew wrapper --gradle-version <new-version> ``` ## Building docker image From
  `src/adservice/`, run: ``` docker build ./ ```'
- "#!/usr/bin/python # # Copyright 2024 Google LLC # # Licensed under the Apache License,\
  \ Version 2.0 (the \"License\"); # you may not use this file except in compliance\
  \ with the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0\
  \ # # Unless required by applicable law or agreed to in writing, software # distributed\
  \ under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR\
  \ CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific\
  \ language governing permissions and # limitations under the License. import os\
  \ from google.cloud import secretmanager_v1 from urllib.parse import unquote from\
  \ langchain_core.messages import HumanMessage from langchain_google_genai import\
  \ ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings from flask import Flask,\
  \ request from langchain_google_alloydb_pg import AlloyDBEngine, AlloyDBVectorStore\
  \ PROJECT_ID = os.environ[\"PROJECT_ID\"] REGION = os.environ[\"REGION\"] ALLOYDB_DATABASE_NAME\
  \ = os.environ[\"ALLOYDB_DATABASE_NAME\"] ALLOYDB_TABLE_NAME = os.environ[\"ALLOYDB_TABLE_NAME\"\
  ] ALLOYDB_CLUSTER_NAME = os.environ[\"ALLOYDB_CLUSTER_NAME\"] ALLOYDB_INSTANCE_NAME\
  \ = os.environ[\"ALLOYDB_INSTANCE_NAME\"] ALLOYDB_SECRET_NAME = os.environ[\"ALLOYDB_SECRET_NAME\"\
  ] secret_manager_client = secretmanager_v1.SecretManagerServiceClient() secret_name\
  \ = secret_manager_client.secret_version_path(project=PROJECT_ID, secret=ALLOYDB_SECRET_NAME,\
  \ secret_version=\"latest\") secret_request = secretmanager_v1.AccessSecretVersionRequest(name=secret_name)\
  \ secret_response = secret_manager_client.access_secret_version(request=secret_request)\
  \ PGPASSWORD = secret_response.payload.data.decode(\"UTF-8\").strip() engine = AlloyDBEngine.from_instance(\
  \ project_id=PROJECT_ID, region=REGION, cluster=ALLOYDB_CLUSTER_NAME, instance=ALLOYDB_INSTANCE_NAME,\
  \ database=ALLOYDB_DATABASE_NAME, user=\"postgres\", password=PGPASSWORD ) # Create\
  \ a synchronous connection to our vectorstore vectorstore = AlloyDBVectorStore.create_sync(\
  \ engine=engine, table_name=ALLOYDB_TABLE_NAME, embedding_service=GoogleGenerativeAIEmbeddings(model=\"\
  models/embedding-001\"), id_column=\"id\", content_column=\"description\", embedding_column=\"\
  product_embedding\", metadata_columns=[\"id\", \"name\", \"categories\"] ) def create_app():\
  \ app = Flask(__name__) @app.route(\"/\", methods=['POST']) def talkToGemini():\
  \ print(\"Beginning RAG call\") prompt = request.json['message'] prompt = unquote(prompt)\
  \ # Step 1 \u2013 Get a room description from Gemini-vision-pro llm_vision = ChatGoogleGenerativeAI(model=\"\
  gemini-1.5-flash\") message = HumanMessage( content=[ { \"type\": \"text\", \"text\"\
  : \"You are a professional interior designer, give me a detailed decsription of\
  \ the style of the room in this image\", }, {\"type\": \"image_url\", \"image_url\"\
  : request.json['image']}, ] ) response = llm_vision.invoke([message]) print(\"Description\
  \ step:\") print(response) description_response = response.content # Step 2 \u2013\
  \ Similarity search with the description & user prompt vector_search_prompt = f\"\
  \"\" This is the user's request: {prompt} Find the most relevant items for that\
  \ prompt, while matching style of the room described here: {description_response}\
  \ \"\"\" print(vector_search_prompt) docs = vectorstore.similarity_search(vector_search_prompt)\
  \ print(f\"Vector search: {description_response}\") print(f\"Retrieved documents:\
  \ {len(docs)}\") #Prepare relevant documents for inclusion in final prompt relevant_docs\
  \ = \"\" for doc in docs: doc_details = doc.to_json() print(f\"Adding relevant document\
  \ to prompt context: {doc_details}\") relevant_docs += str(doc_details) + \", \"\
  \ # Step 3 \u2013 Tie it all together by augmenting our call to Gemini-pro llm =\
  \ ChatGoogleGenerativeAI(model=\"gemini-1.5-flash\") design_prompt = ( f\" You are\
  \ an interior designer that works for Online Boutique. You are tasked with providing\
  \ recommendations to a customer on what they should add to a given room from our\
  \ catalog. This is the description of the room: \\n\" f\"{description_response}\
  \ Here are a list of products that are relevant to it: {relevant_docs} Specifically,\
  \ this is what the customer has asked for, see if you can accommodate it: {prompt}\
  \ Start by repeating a brief description of the room's design to the customer, then\
  \ provide your recommendations. Do your best to pick the most relevant item out\
  \ of the list of products provided, but if none of them seem relevant, then say\
  \ that instead of inventing a new product. At the end of the response, add a list\
  \ of the IDs of the relevant products in the following format for the top"
- 'room''s design to the customer, then provide your recommendations. Do your best
  to pick the most relevant item out of the list of products provided, but if none
  of them seem relevant, then say that instead of inventing a new product. At the
  end of the response, add a list of the IDs of the relevant products in the following
  format for the top 3 results: [<first product ID>], [<second product ID>], [<third
  product ID>] ") print("Final design prompt: ") print(design_prompt) design_response
  = llm.invoke( design_prompt ) data = {''content'': design_response.content} return
  data return app if __name__ == "__main__": # Create an instance of flask server
  when called directly app = create_app() app.run(host=''0.0.0.0'', port=8080)'
- '# frontend Run the following command to restore dependencies to `vendor/` directory:
  dep ensure --vendor-only'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import random from locust
  import FastHttpUser, TaskSet, between from faker import Faker import datetime fake
  = Faker() products = [ ''0PUK6V6EV0'', ''1YMWWN1N4O'', ''2ZYFJ3GM2N'', ''66VCHSJNUP'',
  ''6E92ZMYYFZ'', ''9SIQT8TOJO'', ''L9ECAV7KIM'', ''LS4PSXUNUM'', ''OLJCESPC7Z'']
  def index(l): l.client.get("/") def setCurrency(l): currencies = [''EUR'', ''USD'',
  ''JPY'', ''CAD'', ''GBP'', ''TRY''] l.client.post("/setCurrency", {''currency_code'':
  random.choice(currencies)}) def browseProduct(l): l.client.get("/product/" + random.choice(products))
  def viewCart(l): l.client.get("/cart") def addToCart(l): product = random.choice(products)
  l.client.get("/product/" + product) l.client.post("/cart", { ''product_id'': product,
  ''quantity'': random.randint(1,10)}) def empty_cart(l): l.client.post(''/cart/empty'')
  def checkout(l): addToCart(l) current_year = datetime.datetime.now().year+1 l.client.post("/cart/checkout",
  { ''email'': fake.email(), ''street_address'': fake.street_address(), ''zip_code'':
  fake.zipcode(), ''city'': fake.city(), ''state'': fake.state_abbr(), ''country'':
  fake.country(), ''credit_card_number'': fake.credit_card_number(card_type="visa"),
  ''credit_card_expiration_month'': random.randint(1, 12), ''credit_card_expiration_year'':
  random.randint(current_year, current_year + 70), ''credit_card_cvv'': f"{random.randint(100,
  999)}", }) def logout(l): l.client.get(''/logout'') class UserBehavior(TaskSet):
  def on_start(self): index(self) tasks = {index: 1, setCurrency: 2, browseProduct:
  10, addToCart: 2, viewCart: 3, checkout: 1} class WebsiteUser(FastHttpUser): tasks
  = [UserBehavior] wait_time = between(1, 10)'
- '# productcatalogservice Run the following command to restore dependencies to `vendor/`
  directory: go mod vendor ## Dynamic catalog reloading / artificial delay This service
  has a "dynamic catalog reloading" feature that is purposefully not well implemented.
  The goal of this feature is to allow you to modify the `products.json` file and
  have the changes be picked up without having to restart the service. However, this
  feature is bugged: the catalog is actually reloaded on each request, introducing
  a noticeable delay in the frontend. This delay will also show up in profiling tools:
  the `parseCatalog` function will take more than 80% of the CPU time. You can trigger
  this feature (and the delay) by sending a `USR1` signal and remove it (if needed)
  by sending a `USR2` signal: ``` # Trigger bug kubectl exec \ $(kubectl get pods
  -l app=productcatalogservice -o jsonpath=''{.items[0].metadata.name}'') \ -c server
  -- kill -USR1 1 # Remove bug kubectl exec \ $(kubectl get pods -l app=productcatalogservice
  -o jsonpath=''{.items[0].metadata.name}'') \ -c server -- kill -USR2 1 ``` ## Latency
  injection This service has an `EXTRA_LATENCY` environment variable. This will inject
  a sleep for the specified [time.Duration](https://golang.org/pkg/time/#ParseDuration)
  on every call to to the server. For example, use `EXTRA_LATENCY="5.5s"` to sleep
  for 5.5 seconds on every request.'
- '# checkoutservice Run the following command to restore dependencies to `vendor/`
  directory: dep ensure --vendor-only'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # Generated by the gRPC
  Python protocol compiler plugin. DO NOT EDIT! """Client and server classes corresponding
  to protobuf-defined services.""" import grpc import demo_pb2 as demo__pb2 class
  CartServiceStub(object): """-----------------Cart service----------------- """ def
  __init__(self, channel): """Constructor. Args: channel: A grpc.Channel. """ self.AddItem
  = channel.unary_unary( ''/hipstershop.CartService/AddItem'', request_serializer=demo__pb2.AddItemRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) self.GetCart = channel.unary_unary(
  ''/hipstershop.CartService/GetCart'', request_serializer=demo__pb2.GetCartRequest.SerializeToString,
  response_deserializer=demo__pb2.Cart.FromString, ) self.EmptyCart = channel.unary_unary(
  ''/hipstershop.CartService/EmptyCart'', request_serializer=demo__pb2.EmptyCartRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) class CartServiceServicer(object):
  """-----------------Cart service----------------- """ def AddItem(self, request,
  context): """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def GetCart(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def EmptyCart(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_CartServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''AddItem'': grpc.unary_unary_rpc_method_handler(
  servicer.AddItem, request_deserializer=demo__pb2.AddItemRequest.FromString, response_serializer=demo__pb2.Empty.SerializeToString,
  ), ''GetCart'': grpc.unary_unary_rpc_method_handler( servicer.GetCart, request_deserializer=demo__pb2.GetCartRequest.FromString,
  response_serializer=demo__pb2.Cart.SerializeToString, ), ''EmptyCart'': grpc.unary_unary_rpc_method_handler(
  servicer.EmptyCart, request_deserializer=demo__pb2.EmptyCartRequest.FromString,
  response_serializer=demo__pb2.Empty.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CartService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CartService(object): """-----------------Cart
  service----------------- """ @staticmethod def AddItem(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/AddItem'', demo__pb2.AddItemRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) @staticmethod def GetCart(request,
  target, options=(), channel_credentials=None, call_credentials=None, insecure=False,
  compression=None, wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/GetCart'', demo__pb2.GetCartRequest.SerializeToString,
  demo__pb2.Cart.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) @staticmethod def EmptyCart(request,
  target, options=(), channel_credentials=None, call_credentials=None, insecure=False,
  compression=None, wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/EmptyCart'', demo__pb2.EmptyCartRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class RecommendationServiceStub(object):
  """---------------Recommendation service---------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.ListRecommendations = channel.unary_unary(
  ''/hipstershop.RecommendationService/ListRecommendations'', request_serializer=demo__pb2.ListRecommendationsRequest.SerializeToString,
  response_deserializer=demo__pb2.ListRecommendationsResponse.FromString, ) class
  RecommendationServiceServicer(object): """---------------Recommendation service----------
  """ def ListRecommendations(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def add_RecommendationServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''ListRecommendations'': grpc.unary_unary_rpc_method_handler(
  servicer.ListRecommendations, request_deserializer=demo__pb2.ListRecommendationsRequest.FromString,
  response_serializer=demo__pb2.ListRecommendationsResponse.SerializeToString, ),
  } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.RecommendationService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class RecommendationService(object): """---------------Recommendation
  service---------- """ @staticmethod def ListRecommendations(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.RecommendationService/ListRecommendations'', demo__pb2.ListRecommendationsRequest.SerializeToString,
  demo__pb2.ListRecommendationsResponse.FromString, options, channel_credentials,
  insecure, call_credentials, compression, wait_for_ready, timeout, metadata) class
  ProductCatalogServiceStub(object): """---------------Product Catalog----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.ListProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/ListProducts'',
  request_serializer=demo__pb2.Empty.SerializeToString, response_deserializer=demo__pb2.ListProductsResponse.FromString,
  ) self.GetProduct = channel.unary_unary( ''/hipstershop.ProductCatalogService/GetProduct'',
  request_serializer=demo__pb2.GetProductRequest.SerializeToString, response_deserializer=demo__pb2.Product.FromString,
  ) self.SearchProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/SearchProducts'',
  request_serializer=demo__pb2.SearchProductsRequest.SerializeToString, response_deserializer=demo__pb2.SearchProductsResponse.FromString,
  ) class ProductCatalogServiceServicer(object): """---------------Product Catalog----------------
  """ def ListProducts(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def GetProduct(self,
  request, context): """Missing associated'
- 'ProductCatalogServiceStub(object): """---------------Product Catalog----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.ListProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/ListProducts'',
  request_serializer=demo__pb2.Empty.SerializeToString, response_deserializer=demo__pb2.ListProductsResponse.FromString,
  ) self.GetProduct = channel.unary_unary( ''/hipstershop.ProductCatalogService/GetProduct'',
  request_serializer=demo__pb2.GetProductRequest.SerializeToString, response_deserializer=demo__pb2.Product.FromString,
  ) self.SearchProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/SearchProducts'',
  request_serializer=demo__pb2.SearchProductsRequest.SerializeToString, response_deserializer=demo__pb2.SearchProductsResponse.FromString,
  ) class ProductCatalogServiceServicer(object): """---------------Product Catalog----------------
  """ def ListProducts(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def GetProduct(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def SearchProducts(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_ProductCatalogServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''ListProducts'': grpc.unary_unary_rpc_method_handler(
  servicer.ListProducts, request_deserializer=demo__pb2.Empty.FromString, response_serializer=demo__pb2.ListProductsResponse.SerializeToString,
  ), ''GetProduct'': grpc.unary_unary_rpc_method_handler( servicer.GetProduct, request_deserializer=demo__pb2.GetProductRequest.FromString,
  response_serializer=demo__pb2.Product.SerializeToString, ), ''SearchProducts'':
  grpc.unary_unary_rpc_method_handler( servicer.SearchProducts, request_deserializer=demo__pb2.SearchProductsRequest.FromString,
  response_serializer=demo__pb2.SearchProductsResponse.SerializeToString, ), } generic_handler
  = grpc.method_handlers_generic_handler( ''hipstershop.ProductCatalogService'', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,)) # This class is part of an EXPERIMENTAL
  API. class ProductCatalogService(object): """---------------Product Catalog----------------
  """ @staticmethod def ListProducts(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/ListProducts'',
  demo__pb2.Empty.SerializeToString, demo__pb2.ListProductsResponse.FromString, options,
  channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout,
  metadata) @staticmethod def GetProduct(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/GetProduct'',
  demo__pb2.GetProductRequest.SerializeToString, demo__pb2.Product.FromString, options,
  channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout,
  metadata) @staticmethod def SearchProducts(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/SearchProducts'',
  demo__pb2.SearchProductsRequest.SerializeToString, demo__pb2.SearchProductsResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class ShippingServiceStub(object): """---------------Shipping
  Service---------- """ def __init__(self, channel): """Constructor. Args: channel:
  A grpc.Channel. """ self.GetQuote = channel.unary_unary( ''/hipstershop.ShippingService/GetQuote'',
  request_serializer=demo__pb2.GetQuoteRequest.SerializeToString, response_deserializer=demo__pb2.GetQuoteResponse.FromString,
  ) self.ShipOrder = channel.unary_unary( ''/hipstershop.ShippingService/ShipOrder'',
  request_serializer=demo__pb2.ShipOrderRequest.SerializeToString, response_deserializer=demo__pb2.ShipOrderResponse.FromString,
  ) class ShippingServiceServicer(object): """---------------Shipping Service----------
  """ def GetQuote(self, request, context): """Missing associated documentation comment
  in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def ShipOrder(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_ShippingServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetQuote'': grpc.unary_unary_rpc_method_handler(
  servicer.GetQuote, request_deserializer=demo__pb2.GetQuoteRequest.FromString, response_serializer=demo__pb2.GetQuoteResponse.SerializeToString,
  ), ''ShipOrder'': grpc.unary_unary_rpc_method_handler( servicer.ShipOrder, request_deserializer=demo__pb2.ShipOrderRequest.FromString,
  response_serializer=demo__pb2.ShipOrderResponse.SerializeToString, ), } generic_handler
  = grpc.method_handlers_generic_handler( ''hipstershop.ShippingService'', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,)) # This class is part of an EXPERIMENTAL
  API. class ShippingService(object): """---------------Shipping Service----------
  """ @staticmethod def GetQuote(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ShippingService/GetQuote'',
  demo__pb2.GetQuoteRequest.SerializeToString, demo__pb2.GetQuoteResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) @staticmethod def ShipOrder(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ShippingService/ShipOrder'',
  demo__pb2.ShipOrderRequest.SerializeToString, demo__pb2.ShipOrderResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class CurrencyServiceStub(object): """-----------------Currency
  service----------------- """ def __init__(self, channel): """Constructor. Args:
  channel: A grpc.Channel. """ self.GetSupportedCurrencies = channel.unary_unary(
  ''/hipstershop.CurrencyService/GetSupportedCurrencies'', request_serializer=demo__pb2.Empty.SerializeToString,
  response_deserializer=demo__pb2.GetSupportedCurrenciesResponse.FromString, ) self.Convert
  = channel.unary_unary( ''/hipstershop.CurrencyService/Convert'', request_serializer=demo__pb2.CurrencyConversionRequest.SerializeToString,
  response_deserializer=demo__pb2.Money.FromString, ) class CurrencyServiceServicer(object):
  """-----------------Currency service----------------- """ def GetSupportedCurrencies(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def Convert(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_CurrencyServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetSupportedCurrencies'': grpc.unary_unary_rpc_method_handler(
  servicer.GetSupportedCurrencies, request_deserializer=demo__pb2.Empty.FromString,
  response_serializer=demo__pb2.GetSupportedCurrenciesResponse.SerializeToString,
  ), ''Convert'': grpc.unary_unary_rpc_method_handler( servicer.Convert, request_deserializer=demo__pb2.CurrencyConversionRequest.FromString,
  response_serializer=demo__pb2.Money.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CurrencyService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CurrencyService(object): """-----------------Currency
  service----------------- """ @staticmethod def GetSupportedCurrencies(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CurrencyService/GetSupportedCurrencies'', demo__pb2.Empty.SerializeToString,
  demo__pb2.GetSupportedCurrenciesResponse.FromString, options, channel_credentials,
  insecure,'
- 'raise NotImplementedError(''Method not implemented!'') def add_CurrencyServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetSupportedCurrencies'': grpc.unary_unary_rpc_method_handler(
  servicer.GetSupportedCurrencies, request_deserializer=demo__pb2.Empty.FromString,
  response_serializer=demo__pb2.GetSupportedCurrenciesResponse.SerializeToString,
  ), ''Convert'': grpc.unary_unary_rpc_method_handler( servicer.Convert, request_deserializer=demo__pb2.CurrencyConversionRequest.FromString,
  response_serializer=demo__pb2.Money.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CurrencyService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CurrencyService(object): """-----------------Currency
  service----------------- """ @staticmethod def GetSupportedCurrencies(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CurrencyService/GetSupportedCurrencies'', demo__pb2.Empty.SerializeToString,
  demo__pb2.GetSupportedCurrenciesResponse.FromString, options, channel_credentials,
  insecure, call_credentials, compression, wait_for_ready, timeout, metadata) @staticmethod
  def Convert(request, target, options=(), channel_credentials=None, call_credentials=None,
  insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
  return grpc.experimental.unary_unary(request, target, ''/hipstershop.CurrencyService/Convert'',
  demo__pb2.CurrencyConversionRequest.SerializeToString, demo__pb2.Money.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class PaymentServiceStub(object): """-------------Payment service-----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.Charge = channel.unary_unary( ''/hipstershop.PaymentService/Charge'', request_serializer=demo__pb2.ChargeRequest.SerializeToString,
  response_deserializer=demo__pb2.ChargeResponse.FromString, ) class PaymentServiceServicer(object):
  """-------------Payment service----------------- """ def Charge(self, request, context):
  """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def add_PaymentServiceServicer_to_server(servicer, server):
  rpc_method_handlers = { ''Charge'': grpc.unary_unary_rpc_method_handler( servicer.Charge,
  request_deserializer=demo__pb2.ChargeRequest.FromString, response_serializer=demo__pb2.ChargeResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.PaymentService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class PaymentService(object): """-------------Payment
  service----------------- """ @staticmethod def Charge(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.PaymentService/Charge'', demo__pb2.ChargeRequest.SerializeToString,
  demo__pb2.ChargeResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class EmailServiceStub(object):
  """-------------Email service----------------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.SendOrderConfirmation =
  channel.unary_unary( ''/hipstershop.EmailService/SendOrderConfirmation'', request_serializer=demo__pb2.SendOrderConfirmationRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) class EmailServiceServicer(object):
  """-------------Email service----------------- """ def SendOrderConfirmation(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_EmailServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''SendOrderConfirmation'': grpc.unary_unary_rpc_method_handler(
  servicer.SendOrderConfirmation, request_deserializer=demo__pb2.SendOrderConfirmationRequest.FromString,
  response_serializer=demo__pb2.Empty.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.EmailService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class EmailService(object): """-------------Email
  service----------------- """ @staticmethod def SendOrderConfirmation(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.EmailService/SendOrderConfirmation'', demo__pb2.SendOrderConfirmationRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class CheckoutServiceStub(object):
  """-------------Checkout service----------------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.PlaceOrder = channel.unary_unary(
  ''/hipstershop.CheckoutService/PlaceOrder'', request_serializer=demo__pb2.PlaceOrderRequest.SerializeToString,
  response_deserializer=demo__pb2.PlaceOrderResponse.FromString, ) class CheckoutServiceServicer(object):
  """-------------Checkout service----------------- """ def PlaceOrder(self, request,
  context): """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def add_CheckoutServiceServicer_to_server(servicer, server):
  rpc_method_handlers = { ''PlaceOrder'': grpc.unary_unary_rpc_method_handler( servicer.PlaceOrder,
  request_deserializer=demo__pb2.PlaceOrderRequest.FromString, response_serializer=demo__pb2.PlaceOrderResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.CheckoutService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class CheckoutService(object): """-------------Checkout
  service----------------- """ @staticmethod def PlaceOrder(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CheckoutService/PlaceOrder'', demo__pb2.PlaceOrderRequest.SerializeToString,
  demo__pb2.PlaceOrderResponse.FromString, options, channel_credentials, insecure,
  call_credentials, compression, wait_for_ready, timeout, metadata) class AdServiceStub(object):
  """------------Ad service------------------ """ def __init__(self, channel): """Constructor.
  Args: channel: A grpc.Channel. """ self.GetAds = channel.unary_unary( ''/hipstershop.AdService/GetAds'',
  request_serializer=demo__pb2.AdRequest.SerializeToString, response_deserializer=demo__pb2.AdResponse.FromString,
  ) class AdServiceServicer(object): """------------Ad service------------------ """
  def GetAds(self, request, context): """Missing associated documentation comment
  in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def add_AdServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetAds'': grpc.unary_unary_rpc_method_handler(
  servicer.GetAds, request_deserializer=demo__pb2.AdRequest.FromString, response_serializer=demo__pb2.AdResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.AdService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class AdService(object): """------------Ad
  service------------------ """ @staticmethod def GetAds(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.AdService/GetAds'', demo__pb2.AdRequest.SerializeToString,
  demo__pb2.AdResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata)'
- 'raise NotImplementedError(''Method not implemented!'') def add_AdServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetAds'': grpc.unary_unary_rpc_method_handler(
  servicer.GetAds, request_deserializer=demo__pb2.AdRequest.FromString, response_serializer=demo__pb2.AdResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.AdService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class AdService(object): """------------Ad
  service------------------ """ @staticmethod def GetAds(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.AdService/GetAds'', demo__pb2.AdRequest.SerializeToString,
  demo__pb2.AdResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata)'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import logging import
  sys from pythonjsonlogger import jsonlogger # TODO(yoshifumi) this class is duplicated
  since other Python services are # not sharing the modules for logging. class CustomJsonFormatter(jsonlogger.JsonFormatter):
  def add_fields(self, log_record, record, message_dict): super(CustomJsonFormatter,
  self).add_fields(log_record, record, message_dict) if not log_record.get(''timestamp''):
  log_record[''timestamp''] = record.created if log_record.get(''severity''): log_record[''severity'']
  = log_record[''severity''].upper() else: log_record[''severity''] = record.levelname
  def getJSONLogger(name): logger = logging.getLogger(name) handler = logging.StreamHandler(sys.stdout)
  formatter = CustomJsonFormatter(''%(timestamp)s %(severity)s %(name)s %(message)s'')
  handler.setFormatter(formatter) logger.addHandler(handler) logger.setLevel(logging.INFO)
  logger.propagate = False return logger'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import grpc import demo_pb2
  import demo_pb2_grpc from logger import getJSONLogger logger = getJSONLogger(''emailservice-client'')
  def send_confirmation_email(email, order): channel = grpc.insecure_channel(''[::]:8080'')
  stub = demo_pb2_grpc.EmailServiceStub(channel) try: response = stub.SendOrderConfirmation(demo_pb2.SendOrderConfirmationRequest(
  email = email, order = order )) logger.info(''Request sent.'') except grpc.RpcError
  as err: logger.error(err.details()) logger.error(''{}, {}''.format(err.code().name,
  err.code().value)) if __name__ == ''__main__'': logger.info(''Client for email service.'')'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. from concurrent import
  futures import argparse import os import sys import time import grpc import traceback
  from jinja2 import Environment, FileSystemLoader, select_autoescape, TemplateError
  from google.api_core.exceptions import GoogleAPICallError from google.auth.exceptions
  import DefaultCredentialsError import demo_pb2 import demo_pb2_grpc from grpc_health.v1
  import health_pb2 from grpc_health.v1 import health_pb2_grpc from opentelemetry
  import trace from opentelemetry.instrumentation.grpc import GrpcInstrumentorServer
  from opentelemetry.sdk.trace import TracerProvider from opentelemetry.sdk.trace.export
  import BatchSpanProcessor from opentelemetry.exporter.otlp.proto.grpc.trace_exporter
  import OTLPSpanExporter import googlecloudprofiler from logger import getJSONLogger
  logger = getJSONLogger(''emailservice-server'') # Loads confirmation email template
  from file env = Environment( loader=FileSystemLoader(''templates''), autoescape=select_autoescape([''html'',
  ''xml'']) ) template = env.get_template(''confirmation.html'') class BaseEmailService(demo_pb2_grpc.EmailServiceServicer):
  def Check(self, request, context): return health_pb2.HealthCheckResponse( status=health_pb2.HealthCheckResponse.SERVING)
  def Watch(self, request, context): return health_pb2.HealthCheckResponse( status=health_pb2.HealthCheckResponse.UNIMPLEMENTED)
  class EmailService(BaseEmailService): def __init__(self): raise Exception(''cloud
  mail client not implemented'') super().__init__() @staticmethod def send_email(client,
  email_address, content): response = client.send_message( sender = client.sender_path(project_id,
  region, sender_id), envelope_from_authority = '''', header_from_authority = '''',
  envelope_from_address = from_address, simple_message = { "from": { "address_spec":
  from_address, }, "to": [{ "address_spec": email_address }], "subject": "Your Confirmation
  Email", "html_body": content } ) logger.info("Message sent: {}".format(response.rfc822_message_id))
  def SendOrderConfirmation(self, request, context): email = request.email order =
  request.order try: confirmation = template.render(order = order) except TemplateError
  as err: context.set_details("An error occurred when preparing the confirmation mail.")
  logger.error(err.message) context.set_code(grpc.StatusCode.INTERNAL) return demo_pb2.Empty()
  try: EmailService.send_email(self.client, email, confirmation) except GoogleAPICallError
  as err: context.set_details("An error occurred when sending the email.") print(err.message)
  context.set_code(grpc.StatusCode.INTERNAL) return demo_pb2.Empty() return demo_pb2.Empty()
  class DummyEmailService(BaseEmailService): def SendOrderConfirmation(self, request,
  context): logger.info(''A request to send order confirmation email to {} has been
  received.''.format(request.email)) return demo_pb2.Empty() class HealthCheck():
  def Check(self, request, context): return health_pb2.HealthCheckResponse( status=health_pb2.HealthCheckResponse.SERVING)
  def start(dummy_mode): server = grpc.server(futures.ThreadPoolExecutor(max_workers=10),)
  service = None if dummy_mode: service = DummyEmailService() else: raise Exception(''non-dummy
  mode not implemented yet'') demo_pb2_grpc.add_EmailServiceServicer_to_server(service,
  server) health_pb2_grpc.add_HealthServicer_to_server(service, server) port = os.environ.get(''PORT'',
  "8080") logger.info("listening on port: "+port) server.add_insecure_port(''[::]:''+port)
  server.start() try: while True: time.sleep(3600) except KeyboardInterrupt: server.stop(0)
  def initStackdriverProfiling(): project_id = None try: project_id = os.environ["GCP_PROJECT_ID"]
  except KeyError: # Environment variable not set pass for retry in range(1,4): try:
  if project_id: googlecloudprofiler.start(service=''email_server'', service_version=''1.0.0'',
  verbose=0, project_id=project_id) else: googlecloudprofiler.start(service=''email_server'',
  service_version=''1.0.0'', verbose=0) logger.info("Successfully started Stackdriver
  Profiler.") return except (BaseException) as exc: logger.info("Unable to start Stackdriver
  Profiler Python agent. " + str(exc)) if (retry < 4): logger.info("Sleeping %d to
  retry initializing Stackdriver Profiler"%(retry*10)) time.sleep (1) else: logger.warning("Could
  not initialize Stackdriver Profiler after retrying, giving up") return if __name__
  == ''__main__'': logger.info(''starting the email service in dummy mode.'') # Profiler
  try: if "DISABLE_PROFILER" in os.environ: raise KeyError() else: logger.info("Profiler
  enabled.") initStackdriverProfiling() except KeyError: logger.info("Profiler disabled.")
  # Tracing try: if os.environ["ENABLE_TRACING"] == "1": otel_endpoint = os.getenv("COLLECTOR_SERVICE_ADDR",
  "localhost:4317") trace.set_tracer_provider(TracerProvider()) trace.get_tracer_provider().add_span_processor(
  BatchSpanProcessor( OTLPSpanExporter( endpoint = otel_endpoint, insecure = True
  ) ) ) grpc_server_instrumentor = GrpcInstrumentorServer()'
- 'not initialize Stackdriver Profiler after retrying, giving up") return if __name__
  == ''__main__'': logger.info(''starting the email service in dummy mode.'') # Profiler
  try: if "DISABLE_PROFILER" in os.environ: raise KeyError() else: logger.info("Profiler
  enabled.") initStackdriverProfiling() except KeyError: logger.info("Profiler disabled.")
  # Tracing try: if os.environ["ENABLE_TRACING"] == "1": otel_endpoint = os.getenv("COLLECTOR_SERVICE_ADDR",
  "localhost:4317") trace.set_tracer_provider(TracerProvider()) trace.get_tracer_provider().add_span_processor(
  BatchSpanProcessor( OTLPSpanExporter( endpoint = otel_endpoint, insecure = True
  ) ) ) grpc_server_instrumentor = GrpcInstrumentorServer() grpc_server_instrumentor.instrument()
  except (KeyError, DefaultCredentialsError): logger.info("Tracing disabled.") except
  Exception as e: logger.warn(f"Exception on Cloud Trace setup: {traceback.format_exc()},
  tracing disabled.") start(dummy_mode = True)'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # -*- coding: utf-8 -*-
  # Generated by the protocol buffer compiler. DO NOT EDIT! # source: demo.proto """Generated
  protocol buffer code.""" from google.protobuf.internal import builder as _builder
  from google.protobuf import descriptor as _descriptor from google.protobuf import
  descriptor_pool as _descriptor_pool from google.protobuf import symbol_database
  as _symbol_database # @@protoc_insertion_point(imports) _sym_db = _symbol_database.Default()
  DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b''\n\ndemo.proto\x12\x0bhipstershop\"0\n\x08\x43\x61rtItem\x12\x12\n\nproduct_id\x18\x01
  \x01(\t\x12\x10\n\x08quantity\x18\x02 \x01(\x05\"F\n\x0e\x41\x64\x64ItemRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12#\n\x04item\x18\x02 \x01(\x0b\x32\x15.hipstershop.CartItem\"#\n\x10\x45mptyCartRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\"!\n\x0eGetCartRequest\x12\x0f\n\x07user_id\x18\x01 \x01(\t\"=\n\x04\x43\x61rt\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"\x07\n\x05\x45mpty\"B\n\x1aListRecommendationsRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12\x13\n\x0bproduct_ids\x18\x02 \x03(\t\"2\n\x1bListRecommendationsResponse\x12\x13\n\x0bproduct_ids\x18\x01
  \x03(\t\"\x84\x01\n\x07Product\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02
  \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\x0f\n\x07picture\x18\x04
  \x01(\t\x12%\n\tprice_usd\x18\x05 \x01(\x0b\x32\x12.hipstershop.Money\x12\x12\n\ncategories\x18\x06
  \x03(\t\">\n\x14ListProductsResponse\x12&\n\x08products\x18\x01 \x03(\x0b\x32\x14.hipstershop.Product\"\x1f\n\x11GetProductRequest\x12\n\n\x02id\x18\x01
  \x01(\t\"&\n\x15SearchProductsRequest\x12\r\n\x05query\x18\x01 \x01(\t\"?\n\x16SearchProductsResponse\x12%\n\x07results\x18\x01
  \x03(\x0b\x32\x14.hipstershop.Product\"^\n\x0fGetQuoteRequest\x12%\n\x07\x61\x64\x64ress\x18\x01
  \x01(\x0b\x32\x14.hipstershop.Address\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"8\n\x10GetQuoteResponse\x12$\n\x08\x63ost_usd\x18\x01
  \x01(\x0b\x32\x12.hipstershop.Money\"_\n\x10ShipOrderRequest\x12%\n\x07\x61\x64\x64ress\x18\x01
  \x01(\x0b\x32\x14.hipstershop.Address\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"(\n\x11ShipOrderResponse\x12\x13\n\x0btracking_id\x18\x01
  \x01(\t\"a\n\x07\x41\x64\x64ress\x12\x16\n\x0estreet_address\x18\x01 \x01(\t\x12\x0c\n\x04\x63ity\x18\x02
  \x01(\t\x12\r\n\x05state\x18\x03 \x01(\t\x12\x0f\n\x07\x63ountry\x18\x04 \x01(\t\x12\x10\n\x08zip_code\x18\x05
  \x01(\x05\"<\n\x05Money\x12\x15\n\rcurrency_code\x18\x01 \x01(\t\x12\r\n\x05units\x18\x02
  \x01(\x03\x12\r\n\x05nanos\x18\x03 \x01(\x05\"8\n\x1eGetSupportedCurrenciesResponse\x12\x16\n\x0e\x63urrency_codes\x18\x01
  \x03(\t\"N\n\x19\x43urrencyConversionRequest\x12 \n\x04\x66rom\x18\x01 \x01(\x0b\x32\x12.hipstershop.Money\x12\x0f\n\x07to_code\x18\x02
  \x01(\t\"\x90\x01\n\x0e\x43reditCardInfo\x12\x1a\n\x12\x63redit_card_number\x18\x01
  \x01(\t\x12\x17\n\x0f\x63redit_card_cvv\x18\x02 \x01(\x05\x12#\n\x1b\x63redit_card_expiration_year\x18\x03
  \x01(\x05\x12$\n\x1c\x63redit_card_expiration_month\x18\x04 \x01(\x05\"e\n\rChargeRequest\x12\"\n\x06\x61mount\x18\x01
  \x01(\x0b\x32\x12.hipstershop.Money\x12\x30\n\x0b\x63redit_card\x18\x02 \x01(\x0b\x32\x1b.hipstershop.CreditCardInfo\"(\n\x0e\x43hargeResponse\x12\x16\n\x0etransaction_id\x18\x01
  \x01(\t\"R\n\tOrderItem\x12#\n\x04item\x18\x01 \x01(\x0b\x32\x15.hipstershop.CartItem\x12
  \n\x04\x63ost\x18\x02 \x01(\x0b\x32\x12.hipstershop.Money\"\xbf\x01\n\x0bOrderResult\x12\x10\n\x08order_id\x18\x01
  \x01(\t\x12\x1c\n\x14shipping_tracking_id\x18\x02 \x01(\t\x12)\n\rshipping_cost\x18\x03
  \x01(\x0b\x32\x12.hipstershop.Money\x12.\n\x10shipping_address\x18\x04 \x01(\x0b\x32\x14.hipstershop.Address\x12%\n\x05items\x18\x05
  \x03(\x0b\x32\x16.hipstershop.OrderItem\"V\n\x1cSendOrderConfirmationRequest\x12\r\n\x05\x65mail\x18\x01
  \x01(\t\x12\''\n\x05order\x18\x02 \x01(\x0b\x32\x18.hipstershop.OrderResult\"\xa3\x01\n\x11PlaceOrderRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12\x15\n\ruser_currency\x18\x02 \x01(\t\x12%\n\x07\x61\x64\x64ress\x18\x03
  \x01(\x0b\x32\x14.hipstershop.Address\x12\r\n\x05\x65mail\x18\x05 \x01(\t\x12\x30\n\x0b\x63redit_card\x18\x06
  \x01(\x0b\x32\x1b.hipstershop.CreditCardInfo\"=\n\x12PlaceOrderResponse\x12\''\n\x05order\x18\x01
  \x01(\x0b\x32\x18.hipstershop.OrderResult\"!\n\tAdRequest\x12\x14\n\x0c\x63ontext_keys\x18\x01
  \x03(\t\"*\n\nAdResponse\x12\x1c\n\x03\x61\x64s\x18\x01 \x03(\x0b\x32\x0f.hipstershop.Ad\"(\n\x02\x41\x64\x12\x14\n\x0credirect_url\x18\x01
  \x01(\t\x12\x0c\n\x04text\x18\x02 \x01(\t2\xca\x01\n\x0b\x43\x61rtService\x12<\n\x07\x41\x64\x64Item\x12\x1b.hipstershop.AddItemRequest\x1a\x12.hipstershop.Empty\"\x00\x12;\n\x07GetCart\x12\x1b.hipstershop.GetCartRequest\x1a\x11.hipstershop.Cart\"\x00\x12@\n\tEmptyCart\x12\x1d.hipstershop.EmptyCartRequest\x1a\x12.hipstershop.Empty\"\x00\x32\x83\x01\n\x15RecommendationService\x12j\n\x13ListRecommendations\x12\''.hipstershop.ListRecommendationsRequest\x1a(.hipstershop.ListRecommendationsResponse\"\x00\x32\x83\x02\n\x15ProductCatalogService\x12G\n\x0cListProducts\x12\x12.hipstershop.Empty\x1a!.hipstershop.ListProductsResponse\"\x00\x12\x44\n\nGetProduct\x12\x1e.hipstershop.GetProductRequest\x1a\x14.hipstershop.Product\"\x00\x12[\n\x0eSearchProducts\x12\".hipstershop.SearchProductsRequest\x1a#.hipstershop.SearchProductsResponse\"\x00\x32\xaa\x01\n\x0fShippingService\x12I\n\x08GetQuote\x12\x1c.hipstershop.GetQuoteRequest\x1a\x1d.hipstershop.GetQuoteResponse\"\x00\x12L\n\tShipOrder\x12\x1d.hipstershop.ShipOrderRequest\x1a\x1e.hipstershop.ShipOrderResponse\"\x00\x32\xb7\x01\n\x0f\x43urrencyService\x12[\n\x16GetSupportedCurrencies\x12\x12.hipstershop.Empty\x1a+.hipstershop.GetSupportedCurrenciesResponse\"\x00\x12G\n\x07\x43onvert\x12&.hipstershop.CurrencyConversionRequest\x1a\x12.hipstershop.Money\"\x00\x32U\n\x0ePaymentService\x12\x43\n\x06\x43harge\x12\x1a.hipstershop.ChargeRequest\x1a\x1b.hipstershop.ChargeResponse\"\x00\x32h\n\x0c\x45mailService\x12X\n\x15SendOrderConfirmation\x12).hipstershop.SendOrderConfirmationRequest\x1a\x12.hipstershop.Empty\"\x00\x32\x62\n\x0f\x43heckoutService\x12O\n\nPlaceOrder\x12\x1e.hipstershop.PlaceOrderRequest\x1a\x1f.hipstershop.PlaceOrderResponse\"\x00\x32H\n\tAdService\x12;\n\x06GetAds\x12\x16.hipstershop.AdRequest\x1a\x17.hipstershop.AdResponse\"\x00\x62\x06proto3'')
  _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals()) _builder.BuildTopDescriptorsAndMessages(DESCRIPTOR,
  ''demo_pb2'', globals()) if _descriptor._USE_C_DESCRIPTORS == False: DESCRIPTOR._options
  = None _CARTITEM._serialized_start=27 _CARTITEM._serialized_end=75 _ADDITEMREQUEST._serialized_start=77
  _ADDITEMREQUEST._serialized_end=147 _EMPTYCARTREQUEST._serialized_start=149 _EMPTYCARTREQUEST._serialized_end=184
  _GETCARTREQUEST._serialized_start=186 _GETCARTREQUEST._serialized_end=219 _CART._serialized_start=221
  _CART._serialized_end=282 _EMPTY._serialized_start=284 _EMPTY._serialized_end=291
  _LISTRECOMMENDATIONSREQUEST._serialized_start=293 _LISTRECOMMENDATIONSREQUEST._serialized_end=359
  _LISTRECOMMENDATIONSRESPONSE._serialized_start=361 _LISTRECOMMENDATIONSRESPONSE._serialized_end=411
  _PRODUCT._serialized_start=414 _PRODUCT._serialized_end=546 _LISTPRODUCTSRESPONSE._serialized_start=548
  _LISTPRODUCTSRESPONSE._serialized_end=610 _GETPRODUCTREQUEST._serialized_start=612
  _GETPRODUCTREQUEST._serialized_end=643 _SEARCHPRODUCTSREQUEST._serialized_start=645
  _SEARCHPRODUCTSREQUEST._serialized_end=683 _SEARCHPRODUCTSRESPONSE._serialized_start=685
  _SEARCHPRODUCTSRESPONSE._serialized_end=748 _GETQUOTEREQUEST._serialized_start=750
  _GETQUOTEREQUEST._serialized_end=844 _GETQUOTERESPONSE._serialized_start=846 _GETQUOTERESPONSE._serialized_end=902
  _SHIPORDERREQUEST._serialized_start=904 _SHIPORDERREQUEST._serialized_end=999 _SHIPORDERRESPONSE._serialized_start=1001
  _SHIPORDERRESPONSE._serialized_end=1041 _ADDRESS._serialized_start=1043 _ADDRESS._serialized_end=1140
  _MONEY._serialized_start=1142 _MONEY._serialized_end=1202 _GETSUPPORTEDCURRENCIESRESPONSE._serialized_start=1204
  _GETSUPPORTEDCURRENCIESRESPONSE._serialized_end=1260 _CURRENCYCONVERSIONREQUEST._serialized_start=1262
  _CURRENCYCONVERSIONREQUEST._serialized_end=1340 _CREDITCARDINFO._serialized_start=1343
  _CREDITCARDINFO._serialized_end=1487 _CHARGEREQUEST._serialized_start=1489 _CHARGEREQUEST._serialized_end=1590
  _CHARGERESPONSE._serialized_start=1592 _CHARGERESPONSE._serialized_end=1632 _ORDERITEM._serialized_start=1634
  _ORDERITEM._serialized_end=1716 _ORDERRESULT._serialized_start=1719 _ORDERRESULT._serialized_end=1910
  _SENDORDERCONFIRMATIONREQUEST._serialized_start=1912 _SENDORDERCONFIRMATIONREQUEST._serialized_end=1998
  _PLACEORDERREQUEST._serialized_start=2001 _PLACEORDERREQUEST._serialized_end=2164
  _PLACEORDERRESPONSE._serialized_start=2166 _PLACEORDERRESPONSE._serialized_end=2227
  _ADREQUEST._serialized_start=2229 _ADREQUEST._serialized_end=2262 _ADRESPONSE._serialized_start=2264
  _ADRESPONSE._serialized_end=2306 _AD._serialized_start=2308 _AD._serialized_end=2348
  _CARTSERVICE._serialized_start=2351 _CARTSERVICE._serialized_end=2553 _RECOMMENDATIONSERVICE._serialized_start=2556
  _RECOMMENDATIONSERVICE._serialized_end=2687 _PRODUCTCATALOGSERVICE._serialized_start=2690
  _PRODUCTCATALOGSERVICE._serialized_end=2949 _SHIPPINGSERVICE._serialized_start=2952
  _SHIPPINGSERVICE._serialized_end=3122 _CURRENCYSERVICE._serialized_start=3125 _CURRENCYSERVICE._serialized_end=3308
  _PAYMENTSERVICE._serialized_start=3310 _PAYMENTSERVICE._serialized_end=3395 _EMAILSERVICE._serialized_start=3397
  _EMAILSERVICE._serialized_end=3501 _CHECKOUTSERVICE._serialized_start=3503 _CHECKOUTSERVICE._serialized_end=3601
  _ADSERVICE._serialized_start=3603 _ADSERVICE._serialized_end=3675 # @@protoc_insertion_point(module_scope)'
- '# Shipping Service The Shipping service provides price quote, tracking IDs, and
  the impression of order fulfillment & shipping processes. ## Local Run the following
  command to restore dependencies to `vendor/` directory: dep ensure --vendor-only
  ## Build From `src/shippingservice`, run: ``` docker build ./ ``` ## Test ``` go
  test . ```'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import sys import grpc
  import demo_pb2 import demo_pb2_grpc from logger import getJSONLogger logger = getJSONLogger(''recommendationservice-server'')
  if __name__ == "__main__": # get port if len(sys.argv) > 1: port = sys.argv[1] else:
  port = "8080" # set up server stub channel = grpc.insecure_channel(''localhost:''+port)
  stub = demo_pb2_grpc.RecommendationServiceStub(channel) # form request request =
  demo_pb2.ListRecommendationsRequest(user_id="test", product_ids=["test"]) # make
  call to server response = stub.ListRecommendations(request) logger.info(response)'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # Generated by the gRPC
  Python protocol compiler plugin. DO NOT EDIT! """Client and server classes corresponding
  to protobuf-defined services.""" import grpc import demo_pb2 as demo__pb2 class
  CartServiceStub(object): """-----------------Cart service----------------- """ def
  __init__(self, channel): """Constructor. Args: channel: A grpc.Channel. """ self.AddItem
  = channel.unary_unary( ''/hipstershop.CartService/AddItem'', request_serializer=demo__pb2.AddItemRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) self.GetCart = channel.unary_unary(
  ''/hipstershop.CartService/GetCart'', request_serializer=demo__pb2.GetCartRequest.SerializeToString,
  response_deserializer=demo__pb2.Cart.FromString, ) self.EmptyCart = channel.unary_unary(
  ''/hipstershop.CartService/EmptyCart'', request_serializer=demo__pb2.EmptyCartRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) class CartServiceServicer(object):
  """-----------------Cart service----------------- """ def AddItem(self, request,
  context): """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def GetCart(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def EmptyCart(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_CartServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''AddItem'': grpc.unary_unary_rpc_method_handler(
  servicer.AddItem, request_deserializer=demo__pb2.AddItemRequest.FromString, response_serializer=demo__pb2.Empty.SerializeToString,
  ), ''GetCart'': grpc.unary_unary_rpc_method_handler( servicer.GetCart, request_deserializer=demo__pb2.GetCartRequest.FromString,
  response_serializer=demo__pb2.Cart.SerializeToString, ), ''EmptyCart'': grpc.unary_unary_rpc_method_handler(
  servicer.EmptyCart, request_deserializer=demo__pb2.EmptyCartRequest.FromString,
  response_serializer=demo__pb2.Empty.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CartService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CartService(object): """-----------------Cart
  service----------------- """ @staticmethod def AddItem(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/AddItem'', demo__pb2.AddItemRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) @staticmethod def GetCart(request,
  target, options=(), channel_credentials=None, call_credentials=None, insecure=False,
  compression=None, wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/GetCart'', demo__pb2.GetCartRequest.SerializeToString,
  demo__pb2.Cart.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) @staticmethod def EmptyCart(request,
  target, options=(), channel_credentials=None, call_credentials=None, insecure=False,
  compression=None, wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CartService/EmptyCart'', demo__pb2.EmptyCartRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class RecommendationServiceStub(object):
  """---------------Recommendation service---------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.ListRecommendations = channel.unary_unary(
  ''/hipstershop.RecommendationService/ListRecommendations'', request_serializer=demo__pb2.ListRecommendationsRequest.SerializeToString,
  response_deserializer=demo__pb2.ListRecommendationsResponse.FromString, ) class
  RecommendationServiceServicer(object): """---------------Recommendation service----------
  """ def ListRecommendations(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def add_RecommendationServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''ListRecommendations'': grpc.unary_unary_rpc_method_handler(
  servicer.ListRecommendations, request_deserializer=demo__pb2.ListRecommendationsRequest.FromString,
  response_serializer=demo__pb2.ListRecommendationsResponse.SerializeToString, ),
  } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.RecommendationService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class RecommendationService(object): """---------------Recommendation
  service---------- """ @staticmethod def ListRecommendations(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.RecommendationService/ListRecommendations'', demo__pb2.ListRecommendationsRequest.SerializeToString,
  demo__pb2.ListRecommendationsResponse.FromString, options, channel_credentials,
  insecure, call_credentials, compression, wait_for_ready, timeout, metadata) class
  ProductCatalogServiceStub(object): """---------------Product Catalog----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.ListProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/ListProducts'',
  request_serializer=demo__pb2.Empty.SerializeToString, response_deserializer=demo__pb2.ListProductsResponse.FromString,
  ) self.GetProduct = channel.unary_unary( ''/hipstershop.ProductCatalogService/GetProduct'',
  request_serializer=demo__pb2.GetProductRequest.SerializeToString, response_deserializer=demo__pb2.Product.FromString,
  ) self.SearchProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/SearchProducts'',
  request_serializer=demo__pb2.SearchProductsRequest.SerializeToString, response_deserializer=demo__pb2.SearchProductsResponse.FromString,
  ) class ProductCatalogServiceServicer(object): """---------------Product Catalog----------------
  """ def ListProducts(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def GetProduct(self,
  request, context): """Missing associated'
- 'ProductCatalogServiceStub(object): """---------------Product Catalog----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.ListProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/ListProducts'',
  request_serializer=demo__pb2.Empty.SerializeToString, response_deserializer=demo__pb2.ListProductsResponse.FromString,
  ) self.GetProduct = channel.unary_unary( ''/hipstershop.ProductCatalogService/GetProduct'',
  request_serializer=demo__pb2.GetProductRequest.SerializeToString, response_deserializer=demo__pb2.Product.FromString,
  ) self.SearchProducts = channel.unary_unary( ''/hipstershop.ProductCatalogService/SearchProducts'',
  request_serializer=demo__pb2.SearchProductsRequest.SerializeToString, response_deserializer=demo__pb2.SearchProductsResponse.FromString,
  ) class ProductCatalogServiceServicer(object): """---------------Product Catalog----------------
  """ def ListProducts(self, request, context): """Missing associated documentation
  comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def GetProduct(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def SearchProducts(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_ProductCatalogServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''ListProducts'': grpc.unary_unary_rpc_method_handler(
  servicer.ListProducts, request_deserializer=demo__pb2.Empty.FromString, response_serializer=demo__pb2.ListProductsResponse.SerializeToString,
  ), ''GetProduct'': grpc.unary_unary_rpc_method_handler( servicer.GetProduct, request_deserializer=demo__pb2.GetProductRequest.FromString,
  response_serializer=demo__pb2.Product.SerializeToString, ), ''SearchProducts'':
  grpc.unary_unary_rpc_method_handler( servicer.SearchProducts, request_deserializer=demo__pb2.SearchProductsRequest.FromString,
  response_serializer=demo__pb2.SearchProductsResponse.SerializeToString, ), } generic_handler
  = grpc.method_handlers_generic_handler( ''hipstershop.ProductCatalogService'', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,)) # This class is part of an EXPERIMENTAL
  API. class ProductCatalogService(object): """---------------Product Catalog----------------
  """ @staticmethod def ListProducts(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/ListProducts'',
  demo__pb2.Empty.SerializeToString, demo__pb2.ListProductsResponse.FromString, options,
  channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout,
  metadata) @staticmethod def GetProduct(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/GetProduct'',
  demo__pb2.GetProductRequest.SerializeToString, demo__pb2.Product.FromString, options,
  channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout,
  metadata) @staticmethod def SearchProducts(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ProductCatalogService/SearchProducts'',
  demo__pb2.SearchProductsRequest.SerializeToString, demo__pb2.SearchProductsResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class ShippingServiceStub(object): """---------------Shipping
  Service---------- """ def __init__(self, channel): """Constructor. Args: channel:
  A grpc.Channel. """ self.GetQuote = channel.unary_unary( ''/hipstershop.ShippingService/GetQuote'',
  request_serializer=demo__pb2.GetQuoteRequest.SerializeToString, response_deserializer=demo__pb2.GetQuoteResponse.FromString,
  ) self.ShipOrder = channel.unary_unary( ''/hipstershop.ShippingService/ShipOrder'',
  request_serializer=demo__pb2.ShipOrderRequest.SerializeToString, response_deserializer=demo__pb2.ShipOrderResponse.FromString,
  ) class ShippingServiceServicer(object): """---------------Shipping Service----------
  """ def GetQuote(self, request, context): """Missing associated documentation comment
  in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def ShipOrder(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_ShippingServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetQuote'': grpc.unary_unary_rpc_method_handler(
  servicer.GetQuote, request_deserializer=demo__pb2.GetQuoteRequest.FromString, response_serializer=demo__pb2.GetQuoteResponse.SerializeToString,
  ), ''ShipOrder'': grpc.unary_unary_rpc_method_handler( servicer.ShipOrder, request_deserializer=demo__pb2.ShipOrderRequest.FromString,
  response_serializer=demo__pb2.ShipOrderResponse.SerializeToString, ), } generic_handler
  = grpc.method_handlers_generic_handler( ''hipstershop.ShippingService'', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,)) # This class is part of an EXPERIMENTAL
  API. class ShippingService(object): """---------------Shipping Service----------
  """ @staticmethod def GetQuote(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ShippingService/GetQuote'',
  demo__pb2.GetQuoteRequest.SerializeToString, demo__pb2.GetQuoteResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) @staticmethod def ShipOrder(request, target, options=(), channel_credentials=None,
  call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None,
  metadata=None): return grpc.experimental.unary_unary(request, target, ''/hipstershop.ShippingService/ShipOrder'',
  demo__pb2.ShipOrderRequest.SerializeToString, demo__pb2.ShipOrderResponse.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class CurrencyServiceStub(object): """-----------------Currency
  service----------------- """ def __init__(self, channel): """Constructor. Args:
  channel: A grpc.Channel. """ self.GetSupportedCurrencies = channel.unary_unary(
  ''/hipstershop.CurrencyService/GetSupportedCurrencies'', request_serializer=demo__pb2.Empty.SerializeToString,
  response_deserializer=demo__pb2.GetSupportedCurrenciesResponse.FromString, ) self.Convert
  = channel.unary_unary( ''/hipstershop.CurrencyService/Convert'', request_serializer=demo__pb2.CurrencyConversionRequest.SerializeToString,
  response_deserializer=demo__pb2.Money.FromString, ) class CurrencyServiceServicer(object):
  """-----------------Currency service----------------- """ def GetSupportedCurrencies(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def Convert(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_CurrencyServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetSupportedCurrencies'': grpc.unary_unary_rpc_method_handler(
  servicer.GetSupportedCurrencies, request_deserializer=demo__pb2.Empty.FromString,
  response_serializer=demo__pb2.GetSupportedCurrenciesResponse.SerializeToString,
  ), ''Convert'': grpc.unary_unary_rpc_method_handler( servicer.Convert, request_deserializer=demo__pb2.CurrencyConversionRequest.FromString,
  response_serializer=demo__pb2.Money.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CurrencyService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CurrencyService(object): """-----------------Currency
  service----------------- """ @staticmethod def GetSupportedCurrencies(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CurrencyService/GetSupportedCurrencies'', demo__pb2.Empty.SerializeToString,
  demo__pb2.GetSupportedCurrenciesResponse.FromString, options, channel_credentials,
  insecure,'
- 'raise NotImplementedError(''Method not implemented!'') def add_CurrencyServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetSupportedCurrencies'': grpc.unary_unary_rpc_method_handler(
  servicer.GetSupportedCurrencies, request_deserializer=demo__pb2.Empty.FromString,
  response_serializer=demo__pb2.GetSupportedCurrenciesResponse.SerializeToString,
  ), ''Convert'': grpc.unary_unary_rpc_method_handler( servicer.Convert, request_deserializer=demo__pb2.CurrencyConversionRequest.FromString,
  response_serializer=demo__pb2.Money.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.CurrencyService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class CurrencyService(object): """-----------------Currency
  service----------------- """ @staticmethod def GetSupportedCurrencies(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CurrencyService/GetSupportedCurrencies'', demo__pb2.Empty.SerializeToString,
  demo__pb2.GetSupportedCurrenciesResponse.FromString, options, channel_credentials,
  insecure, call_credentials, compression, wait_for_ready, timeout, metadata) @staticmethod
  def Convert(request, target, options=(), channel_credentials=None, call_credentials=None,
  insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
  return grpc.experimental.unary_unary(request, target, ''/hipstershop.CurrencyService/Convert'',
  demo__pb2.CurrencyConversionRequest.SerializeToString, demo__pb2.Money.FromString,
  options, channel_credentials, insecure, call_credentials, compression, wait_for_ready,
  timeout, metadata) class PaymentServiceStub(object): """-------------Payment service-----------------
  """ def __init__(self, channel): """Constructor. Args: channel: A grpc.Channel.
  """ self.Charge = channel.unary_unary( ''/hipstershop.PaymentService/Charge'', request_serializer=demo__pb2.ChargeRequest.SerializeToString,
  response_deserializer=demo__pb2.ChargeResponse.FromString, ) class PaymentServiceServicer(object):
  """-------------Payment service----------------- """ def Charge(self, request, context):
  """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def add_PaymentServiceServicer_to_server(servicer, server):
  rpc_method_handlers = { ''Charge'': grpc.unary_unary_rpc_method_handler( servicer.Charge,
  request_deserializer=demo__pb2.ChargeRequest.FromString, response_serializer=demo__pb2.ChargeResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.PaymentService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class PaymentService(object): """-------------Payment
  service----------------- """ @staticmethod def Charge(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.PaymentService/Charge'', demo__pb2.ChargeRequest.SerializeToString,
  demo__pb2.ChargeResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class EmailServiceStub(object):
  """-------------Email service----------------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.SendOrderConfirmation =
  channel.unary_unary( ''/hipstershop.EmailService/SendOrderConfirmation'', request_serializer=demo__pb2.SendOrderConfirmationRequest.SerializeToString,
  response_deserializer=demo__pb2.Empty.FromString, ) class EmailServiceServicer(object):
  """-------------Email service----------------- """ def SendOrderConfirmation(self,
  request, context): """Missing associated documentation comment in .proto file."""
  context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method not
  implemented!'') raise NotImplementedError(''Method not implemented!'') def add_EmailServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''SendOrderConfirmation'': grpc.unary_unary_rpc_method_handler(
  servicer.SendOrderConfirmation, request_deserializer=demo__pb2.SendOrderConfirmationRequest.FromString,
  response_serializer=demo__pb2.Empty.SerializeToString, ), } generic_handler = grpc.method_handlers_generic_handler(
  ''hipstershop.EmailService'', rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,))
  # This class is part of an EXPERIMENTAL API. class EmailService(object): """-------------Email
  service----------------- """ @staticmethod def SendOrderConfirmation(request, target,
  options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.EmailService/SendOrderConfirmation'', demo__pb2.SendOrderConfirmationRequest.SerializeToString,
  demo__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata) class CheckoutServiceStub(object):
  """-------------Checkout service----------------- """ def __init__(self, channel):
  """Constructor. Args: channel: A grpc.Channel. """ self.PlaceOrder = channel.unary_unary(
  ''/hipstershop.CheckoutService/PlaceOrder'', request_serializer=demo__pb2.PlaceOrderRequest.SerializeToString,
  response_deserializer=demo__pb2.PlaceOrderResponse.FromString, ) class CheckoutServiceServicer(object):
  """-------------Checkout service----------------- """ def PlaceOrder(self, request,
  context): """Missing associated documentation comment in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED)
  context.set_details(''Method not implemented!'') raise NotImplementedError(''Method
  not implemented!'') def add_CheckoutServiceServicer_to_server(servicer, server):
  rpc_method_handlers = { ''PlaceOrder'': grpc.unary_unary_rpc_method_handler( servicer.PlaceOrder,
  request_deserializer=demo__pb2.PlaceOrderRequest.FromString, response_serializer=demo__pb2.PlaceOrderResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.CheckoutService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class CheckoutService(object): """-------------Checkout
  service----------------- """ @staticmethod def PlaceOrder(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.CheckoutService/PlaceOrder'', demo__pb2.PlaceOrderRequest.SerializeToString,
  demo__pb2.PlaceOrderResponse.FromString, options, channel_credentials, insecure,
  call_credentials, compression, wait_for_ready, timeout, metadata) class AdServiceStub(object):
  """------------Ad service------------------ """ def __init__(self, channel): """Constructor.
  Args: channel: A grpc.Channel. """ self.GetAds = channel.unary_unary( ''/hipstershop.AdService/GetAds'',
  request_serializer=demo__pb2.AdRequest.SerializeToString, response_deserializer=demo__pb2.AdResponse.FromString,
  ) class AdServiceServicer(object): """------------Ad service------------------ """
  def GetAds(self, request, context): """Missing associated documentation comment
  in .proto file.""" context.set_code(grpc.StatusCode.UNIMPLEMENTED) context.set_details(''Method
  not implemented!'') raise NotImplementedError(''Method not implemented!'') def add_AdServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetAds'': grpc.unary_unary_rpc_method_handler(
  servicer.GetAds, request_deserializer=demo__pb2.AdRequest.FromString, response_serializer=demo__pb2.AdResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.AdService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class AdService(object): """------------Ad
  service------------------ """ @staticmethod def GetAds(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.AdService/GetAds'', demo__pb2.AdRequest.SerializeToString,
  demo__pb2.AdResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata)'
- 'raise NotImplementedError(''Method not implemented!'') def add_AdServiceServicer_to_server(servicer,
  server): rpc_method_handlers = { ''GetAds'': grpc.unary_unary_rpc_method_handler(
  servicer.GetAds, request_deserializer=demo__pb2.AdRequest.FromString, response_serializer=demo__pb2.AdResponse.SerializeToString,
  ), } generic_handler = grpc.method_handlers_generic_handler( ''hipstershop.AdService'',
  rpc_method_handlers) server.add_generic_rpc_handlers((generic_handler,)) # This
  class is part of an EXPERIMENTAL API. class AdService(object): """------------Ad
  service------------------ """ @staticmethod def GetAds(request, target, options=(),
  channel_credentials=None, call_credentials=None, insecure=False, compression=None,
  wait_for_ready=None, timeout=None, metadata=None): return grpc.experimental.unary_unary(request,
  target, ''/hipstershop.AdService/GetAds'', demo__pb2.AdRequest.SerializeToString,
  demo__pb2.AdResponse.FromString, options, channel_credentials, insecure, call_credentials,
  compression, wait_for_ready, timeout, metadata)'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import logging import
  sys from pythonjsonlogger import jsonlogger # TODO(yoshifumi) this class is duplicated
  since other Python services are # not sharing the modules for logging. class CustomJsonFormatter(jsonlogger.JsonFormatter):
  def add_fields(self, log_record, record, message_dict): super(CustomJsonFormatter,
  self).add_fields(log_record, record, message_dict) if not log_record.get(''timestamp''):
  log_record[''timestamp''] = record.created if log_record.get(''severity''): log_record[''severity'']
  = log_record[''severity''].upper() else: log_record[''severity''] = record.levelname
  def getJSONLogger(name): logger = logging.getLogger(name) handler = logging.StreamHandler(sys.stdout)
  formatter = CustomJsonFormatter(''%(timestamp)s %(severity)s %(name)s %(message)s'')
  handler.setFormatter(formatter) logger.addHandler(handler) logger.setLevel(logging.INFO)
  logger.propagate = False return logger'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # https://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. # -*- coding: utf-8 -*-
  # Generated by the protocol buffer compiler. DO NOT EDIT! # source: demo.proto """Generated
  protocol buffer code.""" from google.protobuf.internal import builder as _builder
  from google.protobuf import descriptor as _descriptor from google.protobuf import
  descriptor_pool as _descriptor_pool from google.protobuf import symbol_database
  as _symbol_database # @@protoc_insertion_point(imports) _sym_db = _symbol_database.Default()
  DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b''\n\ndemo.proto\x12\x0bhipstershop\"0\n\x08\x43\x61rtItem\x12\x12\n\nproduct_id\x18\x01
  \x01(\t\x12\x10\n\x08quantity\x18\x02 \x01(\x05\"F\n\x0e\x41\x64\x64ItemRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12#\n\x04item\x18\x02 \x01(\x0b\x32\x15.hipstershop.CartItem\"#\n\x10\x45mptyCartRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\"!\n\x0eGetCartRequest\x12\x0f\n\x07user_id\x18\x01 \x01(\t\"=\n\x04\x43\x61rt\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"\x07\n\x05\x45mpty\"B\n\x1aListRecommendationsRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12\x13\n\x0bproduct_ids\x18\x02 \x03(\t\"2\n\x1bListRecommendationsResponse\x12\x13\n\x0bproduct_ids\x18\x01
  \x03(\t\"\x84\x01\n\x07Product\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02
  \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\x0f\n\x07picture\x18\x04
  \x01(\t\x12%\n\tprice_usd\x18\x05 \x01(\x0b\x32\x12.hipstershop.Money\x12\x12\n\ncategories\x18\x06
  \x03(\t\">\n\x14ListProductsResponse\x12&\n\x08products\x18\x01 \x03(\x0b\x32\x14.hipstershop.Product\"\x1f\n\x11GetProductRequest\x12\n\n\x02id\x18\x01
  \x01(\t\"&\n\x15SearchProductsRequest\x12\r\n\x05query\x18\x01 \x01(\t\"?\n\x16SearchProductsResponse\x12%\n\x07results\x18\x01
  \x03(\x0b\x32\x14.hipstershop.Product\"^\n\x0fGetQuoteRequest\x12%\n\x07\x61\x64\x64ress\x18\x01
  \x01(\x0b\x32\x14.hipstershop.Address\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"8\n\x10GetQuoteResponse\x12$\n\x08\x63ost_usd\x18\x01
  \x01(\x0b\x32\x12.hipstershop.Money\"_\n\x10ShipOrderRequest\x12%\n\x07\x61\x64\x64ress\x18\x01
  \x01(\x0b\x32\x14.hipstershop.Address\x12$\n\x05items\x18\x02 \x03(\x0b\x32\x15.hipstershop.CartItem\"(\n\x11ShipOrderResponse\x12\x13\n\x0btracking_id\x18\x01
  \x01(\t\"a\n\x07\x41\x64\x64ress\x12\x16\n\x0estreet_address\x18\x01 \x01(\t\x12\x0c\n\x04\x63ity\x18\x02
  \x01(\t\x12\r\n\x05state\x18\x03 \x01(\t\x12\x0f\n\x07\x63ountry\x18\x04 \x01(\t\x12\x10\n\x08zip_code\x18\x05
  \x01(\x05\"<\n\x05Money\x12\x15\n\rcurrency_code\x18\x01 \x01(\t\x12\r\n\x05units\x18\x02
  \x01(\x03\x12\r\n\x05nanos\x18\x03 \x01(\x05\"8\n\x1eGetSupportedCurrenciesResponse\x12\x16\n\x0e\x63urrency_codes\x18\x01
  \x03(\t\"N\n\x19\x43urrencyConversionRequest\x12 \n\x04\x66rom\x18\x01 \x01(\x0b\x32\x12.hipstershop.Money\x12\x0f\n\x07to_code\x18\x02
  \x01(\t\"\x90\x01\n\x0e\x43reditCardInfo\x12\x1a\n\x12\x63redit_card_number\x18\x01
  \x01(\t\x12\x17\n\x0f\x63redit_card_cvv\x18\x02 \x01(\x05\x12#\n\x1b\x63redit_card_expiration_year\x18\x03
  \x01(\x05\x12$\n\x1c\x63redit_card_expiration_month\x18\x04 \x01(\x05\"e\n\rChargeRequest\x12\"\n\x06\x61mount\x18\x01
  \x01(\x0b\x32\x12.hipstershop.Money\x12\x30\n\x0b\x63redit_card\x18\x02 \x01(\x0b\x32\x1b.hipstershop.CreditCardInfo\"(\n\x0e\x43hargeResponse\x12\x16\n\x0etransaction_id\x18\x01
  \x01(\t\"R\n\tOrderItem\x12#\n\x04item\x18\x01 \x01(\x0b\x32\x15.hipstershop.CartItem\x12
  \n\x04\x63ost\x18\x02 \x01(\x0b\x32\x12.hipstershop.Money\"\xbf\x01\n\x0bOrderResult\x12\x10\n\x08order_id\x18\x01
  \x01(\t\x12\x1c\n\x14shipping_tracking_id\x18\x02 \x01(\t\x12)\n\rshipping_cost\x18\x03
  \x01(\x0b\x32\x12.hipstershop.Money\x12.\n\x10shipping_address\x18\x04 \x01(\x0b\x32\x14.hipstershop.Address\x12%\n\x05items\x18\x05
  \x03(\x0b\x32\x16.hipstershop.OrderItem\"V\n\x1cSendOrderConfirmationRequest\x12\r\n\x05\x65mail\x18\x01
  \x01(\t\x12\''\n\x05order\x18\x02 \x01(\x0b\x32\x18.hipstershop.OrderResult\"\xa3\x01\n\x11PlaceOrderRequest\x12\x0f\n\x07user_id\x18\x01
  \x01(\t\x12\x15\n\ruser_currency\x18\x02 \x01(\t\x12%\n\x07\x61\x64\x64ress\x18\x03
  \x01(\x0b\x32\x14.hipstershop.Address\x12\r\n\x05\x65mail\x18\x05 \x01(\t\x12\x30\n\x0b\x63redit_card\x18\x06
  \x01(\x0b\x32\x1b.hipstershop.CreditCardInfo\"=\n\x12PlaceOrderResponse\x12\''\n\x05order\x18\x01
  \x01(\x0b\x32\x18.hipstershop.OrderResult\"!\n\tAdRequest\x12\x14\n\x0c\x63ontext_keys\x18\x01
  \x03(\t\"*\n\nAdResponse\x12\x1c\n\x03\x61\x64s\x18\x01 \x03(\x0b\x32\x0f.hipstershop.Ad\"(\n\x02\x41\x64\x12\x14\n\x0credirect_url\x18\x01
  \x01(\t\x12\x0c\n\x04text\x18\x02 \x01(\t2\xca\x01\n\x0b\x43\x61rtService\x12<\n\x07\x41\x64\x64Item\x12\x1b.hipstershop.AddItemRequest\x1a\x12.hipstershop.Empty\"\x00\x12;\n\x07GetCart\x12\x1b.hipstershop.GetCartRequest\x1a\x11.hipstershop.Cart\"\x00\x12@\n\tEmptyCart\x12\x1d.hipstershop.EmptyCartRequest\x1a\x12.hipstershop.Empty\"\x00\x32\x83\x01\n\x15RecommendationService\x12j\n\x13ListRecommendations\x12\''.hipstershop.ListRecommendationsRequest\x1a(.hipstershop.ListRecommendationsResponse\"\x00\x32\x83\x02\n\x15ProductCatalogService\x12G\n\x0cListProducts\x12\x12.hipstershop.Empty\x1a!.hipstershop.ListProductsResponse\"\x00\x12\x44\n\nGetProduct\x12\x1e.hipstershop.GetProductRequest\x1a\x14.hipstershop.Product\"\x00\x12[\n\x0eSearchProducts\x12\".hipstershop.SearchProductsRequest\x1a#.hipstershop.SearchProductsResponse\"\x00\x32\xaa\x01\n\x0fShippingService\x12I\n\x08GetQuote\x12\x1c.hipstershop.GetQuoteRequest\x1a\x1d.hipstershop.GetQuoteResponse\"\x00\x12L\n\tShipOrder\x12\x1d.hipstershop.ShipOrderRequest\x1a\x1e.hipstershop.ShipOrderResponse\"\x00\x32\xb7\x01\n\x0f\x43urrencyService\x12[\n\x16GetSupportedCurrencies\x12\x12.hipstershop.Empty\x1a+.hipstershop.GetSupportedCurrenciesResponse\"\x00\x12G\n\x07\x43onvert\x12&.hipstershop.CurrencyConversionRequest\x1a\x12.hipstershop.Money\"\x00\x32U\n\x0ePaymentService\x12\x43\n\x06\x43harge\x12\x1a.hipstershop.ChargeRequest\x1a\x1b.hipstershop.ChargeResponse\"\x00\x32h\n\x0c\x45mailService\x12X\n\x15SendOrderConfirmation\x12).hipstershop.SendOrderConfirmationRequest\x1a\x12.hipstershop.Empty\"\x00\x32\x62\n\x0f\x43heckoutService\x12O\n\nPlaceOrder\x12\x1e.hipstershop.PlaceOrderRequest\x1a\x1f.hipstershop.PlaceOrderResponse\"\x00\x32H\n\tAdService\x12;\n\x06GetAds\x12\x16.hipstershop.AdRequest\x1a\x17.hipstershop.AdResponse\"\x00\x62\x06proto3'')
  _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals()) _builder.BuildTopDescriptorsAndMessages(DESCRIPTOR,
  ''demo_pb2'', globals()) if _descriptor._USE_C_DESCRIPTORS == False: DESCRIPTOR._options
  = None _CARTITEM._serialized_start=27 _CARTITEM._serialized_end=75 _ADDITEMREQUEST._serialized_start=77
  _ADDITEMREQUEST._serialized_end=147 _EMPTYCARTREQUEST._serialized_start=149 _EMPTYCARTREQUEST._serialized_end=184
  _GETCARTREQUEST._serialized_start=186 _GETCARTREQUEST._serialized_end=219 _CART._serialized_start=221
  _CART._serialized_end=282 _EMPTY._serialized_start=284 _EMPTY._serialized_end=291
  _LISTRECOMMENDATIONSREQUEST._serialized_start=293 _LISTRECOMMENDATIONSREQUEST._serialized_end=359
  _LISTRECOMMENDATIONSRESPONSE._serialized_start=361 _LISTRECOMMENDATIONSRESPONSE._serialized_end=411
  _PRODUCT._serialized_start=414 _PRODUCT._serialized_end=546 _LISTPRODUCTSRESPONSE._serialized_start=548
  _LISTPRODUCTSRESPONSE._serialized_end=610 _GETPRODUCTREQUEST._serialized_start=612
  _GETPRODUCTREQUEST._serialized_end=643 _SEARCHPRODUCTSREQUEST._serialized_start=645
  _SEARCHPRODUCTSREQUEST._serialized_end=683 _SEARCHPRODUCTSRESPONSE._serialized_start=685
  _SEARCHPRODUCTSRESPONSE._serialized_end=748 _GETQUOTEREQUEST._serialized_start=750
  _GETQUOTEREQUEST._serialized_end=844 _GETQUOTERESPONSE._serialized_start=846 _GETQUOTERESPONSE._serialized_end=902
  _SHIPORDERREQUEST._serialized_start=904 _SHIPORDERREQUEST._serialized_end=999 _SHIPORDERRESPONSE._serialized_start=1001
  _SHIPORDERRESPONSE._serialized_end=1041 _ADDRESS._serialized_start=1043 _ADDRESS._serialized_end=1140
  _MONEY._serialized_start=1142 _MONEY._serialized_end=1202 _GETSUPPORTEDCURRENCIESRESPONSE._serialized_start=1204
  _GETSUPPORTEDCURRENCIESRESPONSE._serialized_end=1260 _CURRENCYCONVERSIONREQUEST._serialized_start=1262
  _CURRENCYCONVERSIONREQUEST._serialized_end=1340 _CREDITCARDINFO._serialized_start=1343
  _CREDITCARDINFO._serialized_end=1487 _CHARGEREQUEST._serialized_start=1489 _CHARGEREQUEST._serialized_end=1590
  _CHARGERESPONSE._serialized_start=1592 _CHARGERESPONSE._serialized_end=1632 _ORDERITEM._serialized_start=1634
  _ORDERITEM._serialized_end=1716 _ORDERRESULT._serialized_start=1719 _ORDERRESULT._serialized_end=1910
  _SENDORDERCONFIRMATIONREQUEST._serialized_start=1912 _SENDORDERCONFIRMATIONREQUEST._serialized_end=1998
  _PLACEORDERREQUEST._serialized_start=2001 _PLACEORDERREQUEST._serialized_end=2164
  _PLACEORDERRESPONSE._serialized_start=2166 _PLACEORDERRESPONSE._serialized_end=2227
  _ADREQUEST._serialized_start=2229 _ADREQUEST._serialized_end=2262 _ADRESPONSE._serialized_start=2264
  _ADRESPONSE._serialized_end=2306 _AD._serialized_start=2308 _AD._serialized_end=2348
  _CARTSERVICE._serialized_start=2351 _CARTSERVICE._serialized_end=2553 _RECOMMENDATIONSERVICE._serialized_start=2556
  _RECOMMENDATIONSERVICE._serialized_end=2687 _PRODUCTCATALOGSERVICE._serialized_start=2690
  _PRODUCTCATALOGSERVICE._serialized_end=2949 _SHIPPINGSERVICE._serialized_start=2952
  _SHIPPINGSERVICE._serialized_end=3122 _CURRENCYSERVICE._serialized_start=3125 _CURRENCYSERVICE._serialized_end=3308
  _PAYMENTSERVICE._serialized_start=3310 _PAYMENTSERVICE._serialized_end=3395 _EMAILSERVICE._serialized_start=3397
  _EMAILSERVICE._serialized_end=3501 _CHECKOUTSERVICE._serialized_start=3503 _CHECKOUTSERVICE._serialized_end=3601
  _ADSERVICE._serialized_start=3603 _ADSERVICE._serialized_end=3675 # @@protoc_insertion_point(module_scope)'
- '#!/usr/bin/python # # Copyright 2018 Google LLC # # Licensed under the Apache License,
  Version 2.0 (the "License"); # you may not use this file except in compliance with
  the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0
  # # Unless required by applicable law or agreed to in writing, software # distributed
  under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. # See the License for the specific language
  governing permissions and # limitations under the License. import os import random
  import time import traceback from concurrent import futures import googlecloudprofiler
  from google.auth.exceptions import DefaultCredentialsError import grpc import demo_pb2
  import demo_pb2_grpc from grpc_health.v1 import health_pb2 from grpc_health.v1 import
  health_pb2_grpc from opentelemetry import trace from opentelemetry.instrumentation.grpc
  import GrpcInstrumentorClient, GrpcInstrumentorServer from opentelemetry.sdk.trace
  import TracerProvider from opentelemetry.sdk.trace.export import BatchSpanProcessor
  from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
  from logger import getJSONLogger logger = getJSONLogger(''recommendationservice-server'')
  def initStackdriverProfiling(): project_id = None try: project_id = os.environ["GCP_PROJECT_ID"]
  except KeyError: # Environment variable not set pass for retry in range(1,4): try:
  if project_id: googlecloudprofiler.start(service=''recommendation_server'', service_version=''1.0.0'',
  verbose=0, project_id=project_id) else: googlecloudprofiler.start(service=''recommendation_server'',
  service_version=''1.0.0'', verbose=0) logger.info("Successfully started Stackdriver
  Profiler.") return except (BaseException) as exc: logger.info("Unable to start Stackdriver
  Profiler Python agent. " + str(exc)) if (retry < 4): logger.info("Sleeping %d seconds
  to retry Stackdriver Profiler agent initialization"%(retry*10)) time.sleep (1) else:
  logger.warning("Could not initialize Stackdriver Profiler after retrying, giving
  up") return class RecommendationService(demo_pb2_grpc.RecommendationServiceServicer):
  def ListRecommendations(self, request, context): max_responses = 5 # fetch list
  of products from product catalog stub cat_response = product_catalog_stub.ListProducts(demo_pb2.Empty())
  product_ids = [x.id for x in cat_response.products] filtered_products = list(set(product_ids)-set(request.product_ids))
  num_products = len(filtered_products) num_return = min(max_responses, num_products)
  # sample list of indicies to return indices = random.sample(range(num_products),
  num_return) # fetch product ids from indices prod_list = [filtered_products[i] for
  i in indices] logger.info("[Recv ListRecommendations] product_ids={}".format(prod_list))
  # build and return response response = demo_pb2.ListRecommendationsResponse() response.product_ids.extend(prod_list)
  return response def Check(self, request, context): return health_pb2.HealthCheckResponse(
  status=health_pb2.HealthCheckResponse.SERVING) def Watch(self, request, context):
  return health_pb2.HealthCheckResponse( status=health_pb2.HealthCheckResponse.UNIMPLEMENTED)
  if __name__ == "__main__": logger.info("initializing recommendationservice") try:
  if "DISABLE_PROFILER" in os.environ: raise KeyError() else: logger.info("Profiler
  enabled.") initStackdriverProfiling() except KeyError: logger.info("Profiler disabled.")
  try: grpc_client_instrumentor = GrpcInstrumentorClient() grpc_client_instrumentor.instrument()
  grpc_server_instrumentor = GrpcInstrumentorServer() grpc_server_instrumentor.instrument()
  if os.environ["ENABLE_TRACING"] == "1": trace.set_tracer_provider(TracerProvider())
  otel_endpoint = os.getenv("COLLECTOR_SERVICE_ADDR", "localhost:4317") trace.get_tracer_provider().add_span_processor(
  BatchSpanProcessor( OTLPSpanExporter( endpoint = otel_endpoint, insecure = True
  ) ) ) except (KeyError, DefaultCredentialsError): logger.info("Tracing disabled.")
  except Exception as e: logger.warn(f"Exception on Cloud Trace setup: {traceback.format_exc()},
  tracing disabled.") port = os.environ.get(''PORT'', "8080") catalog_addr = os.environ.get(''PRODUCT_CATALOG_SERVICE_ADDR'',
  '''') if catalog_addr == "": raise Exception(''PRODUCT_CATALOG_SERVICE_ADDR environment
  variable not set'') logger.info("product catalog address: " + catalog_addr) channel
  = grpc.insecure_channel(catalog_addr) product_catalog_stub = demo_pb2_grpc.ProductCatalogServiceStub(channel)
  # create gRPC server server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
  # add class to gRPC server service = RecommendationService() demo_pb2_grpc.add_RecommendationServiceServicer_to_server(service,
  server) health_pb2_grpc.add_HealthServicer_to_server(service, server) # start server
  logger.info("listening on port: " + port) server.add_insecure_port(''[::]:''+port)
  server.start() # keep alive try: while True: time.sleep(10000) except KeyboardInterrupt:
  server.stop(0)'
- '" + port) server.add_insecure_port(''[::]:''+port) server.start() # keep alive
  try: while True: time.sleep(10000) except KeyboardInterrupt: server.stop(0)'
metadatas:
- source: fisas_db
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
- repo_url: https://github.com/GoogleCloudPlatform/microservices-demo
  source: repo
